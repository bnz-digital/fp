{"componentChunkName":"component---src-templates-template-js","path":"/how-to-fp","webpackCompilationHash":"46d485009da3d5443ff8","result":{"data":{"markdownRemark":{"html":"<h2>Rule #1</h2>\n<p><strong>As often as possible, functions should take <em>at least</em> one argument and return <em>exactly one</em> result.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// square(3) returns 9</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">square</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// add(2, 3) returns 5</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Corollary to Rule #1</h3>\n<p><strong>As often as possible, the output of a function should depend <em>only</em> on its inputs: the same inputs should <em>always</em> return the same output.</strong></p>\n<p>This allows us to reason about our code by simplifying it using substitution. If <code class=\"language-text\">square(3)</code> <em>always</em> returns <code class=\"language-text\">9</code>, then everywhere I see <code class=\"language-text\">square(3)</code> in my code, I can replace it with <code class=\"language-text\">9</code>.</p>\n<p>This is another way of saying that a function should only change what is <em>inside</em> the function.</p>\n<p>Primitive values such as numbers, booleans, and strings are passed in \"by value\", which means that a copy is made inside the function and you are operating on that copy. Consider this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeShade</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">baseColour</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'dark '</span> <span class=\"token operator\">+</span> baseColour\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> colour <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span>\n\n<span class=\"token function\">makeShade</span><span class=\"token punctuation\">(</span>colour<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 'dark red'</span>\n\n<span class=\"token comment\">// colour is still 'red'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In the above example, when <code class=\"language-text\">makeShade</code> is called with the value of <code class=\"language-text\">colour</code>, it makes a <em>copy</em> of its value ('red') and puts it in a local variable called <code class=\"language-text\">baseColour</code>. We then prepend 'dark ' to it and return the new value. So our original variable, <code class=\"language-text\">colour</code>, remains unchanged.</p>\n<p>In contrast, when we pass in a complex type such as an array or an object, it is passed in \"by reference\", which means that instead of making a copy of the value, our local variable points to the outer variable's value. So if we change that local variable in our function, it changes outside the function as well.</p>\n<p><strong>We want to avoid this as much as possible.</strong> Life is much easier when variables, once set, never change. Instead, make copies.</p>\n<p>In the example below, we make a copy of the array that was passed in using the <code class=\"language-text\">...</code> \"spread\" operator. This takes the items in the passed-in array and \"spreads\" them out into a new array. Now we can append our new value by including it at the end of the new array:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">append</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>list<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns [1, 2, 3, 4]</span>\n\n<span class=\"token comment\">// arr is still [1, 2, 3]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>We can <code class=\"language-text\">prepend</code> just as easily:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">prepend</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>list<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns [1, 2, 3, 4]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This works with objects as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setColour</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">colour<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>options<span class=\"token punctuation\">,</span>\n    colour <span class=\"token comment\">// shorthand for `colour: colour`</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> myOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span>\n  colour<span class=\"token punctuation\">:</span> <span class=\"token string\">'blue'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setColour</span><span class=\"token punctuation\">(</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> myOptions<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns { name: 'Bob', age: 27, colour: 'green' }</span>\n\n<span class=\"token comment\">// myOptions.colour is still 'blue</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Rule #2</h2>\n<p><strong>Assign the value of a variable when it is declared (immediately), then <em>never change it</em>. Instead, create a new variable.</strong></p>\n<p>First, this means that we will always assign a variable when we declare it, and once we've assigned it, we will never re-assign it. In JavaScript, <code class=\"language-text\">let</code> is used for variables that we may want to re-assign (just forget all about <code class=\"language-text\">var</code>). If a variable will not be re-assigned, we can use <code class=\"language-text\">const</code> instead. Therefore, as much as possible, <strong>you should always use <code class=\"language-text\">const</code> to declare variables in JavaScript</strong>. As <code class=\"language-text\">const</code> cannot be re-assigned, you will be forced to assign it as you declare it.</p>\n<p>If you \"must\" use <code class=\"language-text\">let</code>, examine carefully <em>why</em> you are using it. This should be a very, very rare occurrence, as in, um, <em>never</em>. Virtually always there is a <em>better</em> approach using <code class=\"language-text\">const</code>. Get used to <code class=\"language-text\">const</code>!</p>\n<p>Note, however, that using <code class=\"language-text\">const</code> is not enough to ensure that a variable is never changed! It is true that if you use <code class=\"language-text\">const</code> with a a \"primitive\" type such as a number, then it is \"immutable\" (can't be changed):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token comment\">// throws an \"x is read-only\" error</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>But while <code class=\"language-text\">const</code> prevents the variable from being re-assigned, when the variable is a complex type such as an array or object, it is still possible to reach into that value and change it internally.</p>\n<p><strong>Don't.</strong></p>\n<p>When you need to <em>change</em> a variable, create a new variable instead.</p>\n<p>But doesn't this making looping difficult? Yes, it does! So...</p>\n<h2>Rule #3</h2>\n<p><strong>Avoid loops! Use functions instead.</strong></p>\n<p>JavaScript has a host of built-in methods that allow you to avoid loops in most (if not all) instances. Even better, there are libraries such as <code class=\"language-text\">ramda</code> and <code class=\"language-text\">lodash/fp</code> (never use the non-fp lodash as it is broken) that provide truly-functional versions of these methods.</p>\n<p>What are these amazing functions/methods? Among the most used are <code class=\"language-text\">map</code>, <code class=\"language-text\">filter</code>, <code class=\"language-text\">find</code>, <code class=\"language-text\">reduce</code>, <code class=\"language-text\">join</code>, and <code class=\"language-text\">sort</code>. Let's look at some examples. We've included the way to do each of these using the built-in methods as well (so-called \"Vanilla JS\"), but the pure functional way is better in most circumstances. We'll explain why later in this tutorial. Patience, please.</p>\n<h3>map</h3>\n<p>The <code class=\"language-text\">map</code> function is used to apply some kind of transformation to each item in a list, and to return a <em>new</em> list of the transformed items. Because <code class=\"language-text\">map</code> transforms each item in the list successively, it always returns a new list (array) <em>of the same length</em>. Remember that.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> map<span class=\"token punctuation\">,</span> toUpper <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span>\n\n<span class=\"token function\">toUpper</span><span class=\"token punctuation\">(</span><span class=\"token string\">'make me big'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 'MAKE ME BIG'</span>\n\n<span class=\"token keyword\">const</span> words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'these'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aRe'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Some'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'strINGS'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// Convert all strings to uppercase</span>\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span>toUpper<span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns ['THESE', 'ARE', 'SOME', 'STRINGS']</span>\n\n<span class=\"token comment\">// Using Vanilla JS (returns a new list)</span>\nwords<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>toUpper<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns ['THESE', 'ARE', 'SOME', 'STRINGS']</span>\n\nwords <span class=\"token comment\">// still ['these', 'aRe', 'Some', 'strINGS']</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Look, ma! No loops!</p>\n<h3>filter</h3>\n<p>The <code class=\"language-text\">filter</code> function takes a function and a list, applies the function to each item in the list, and includes in the output only those items for which the function applied to that item returns <code class=\"language-text\">true</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> filter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isEven</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> someNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// Return a list of only the even numbers</span>\n<span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isEven<span class=\"token punctuation\">,</span> someNumbers<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns [4, 6, 8]</span>\n\n<span class=\"token comment\">// Using Vanilla JS (returns a new list)</span>\nsomeNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isEven<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns [4, 6, 8]</span>\n\nsomeNumbers <span class=\"token comment\">// still [1, 3, 4, 6, 7, 8, 9]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>find</h3>\n<p>The <code class=\"language-text\">find</code> function takes a function and a list, applies the function to each item in the list in turn, and returns the <em>first item</em> for which the function when applied to it returns <code class=\"language-text\">true</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> find <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">moreThanFive</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">></span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> possibles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// Find the first item greater than five</span>\n<span class=\"token function\">find</span><span class=\"token punctuation\">(</span>moreThanFive<span class=\"token punctuation\">,</span> possibles<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 6</span>\n\n<span class=\"token comment\">// Using Vanilla JS</span>\npossibles<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>moreThanFive<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 6</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Easy peasy, right?</p>\n<h3>reduce</h3>\n<p>The <code class=\"language-text\">reduce</code> function takes <strong>three</strong> parameters and can return just about anything! This is the most powerful of our functions, and can replace almost any loop. In fact, we can make any of the other functions here—<code class=\"language-text\">map</code>, <code class=\"language-text\">filter</code>, <code class=\"language-text\">find</code>, etc.—using the <code class=\"language-text\">reduce</code> function, so you can consider those functions really just sugar on top of <code class=\"language-text\">reduce</code>.</p>\n<p>The first parameter of the <code class=\"language-text\">reduce</code> function is a function, similar to <code class=\"language-text\">map</code>, <code class=\"language-text\">filter</code>, and <code class=\"language-text\">find</code>, and the <em>third</em> parameter is the list we're going to operate on, again, similar to <code class=\"language-text\">map</code>, <code class=\"language-text\">filter</code>, <code class=\"language-text\">find</code>, etc. The special extra parameter is the middle one. It is the \"accumulator\" because as we loop through the items in the list provided as the third argument, we are going to use this accumulator to build our final result.</p>\n<p>This is much easier done than said! One common use for <code class=\"language-text\">reduce</code> (as the name implies) is to take a list and combine the terms in some way, perhaps by adding them up. So suppose I wanted to add a list of numbers. In this instance, you can think of the accumulator as the \"running total\". So, naturally, we start with 0:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> reduce <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span>\n\n<span class=\"token keyword\">const</span> numbersToSum <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> total <span class=\"token operator\">+</span> num <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  numbersToSum\n<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 50 (0 + 5 + 10 + 15 + 20)</span>\n\n<span class=\"token comment\">// Using Vanilla JS</span>\nnumbersToSum<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> total <span class=\"token operator\">+</span> num<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// `(total, num) => total + num` is a shorter way to write</span>\n<span class=\"token comment\">// `function (total, num) { return total + num }` -- see \"arrow functions\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>What is happening here? It's very simple! The <code class=\"language-text\">reduce</code> function takes the list in the third argument—<code class=\"language-text\">[5, 10, 15, 20]</code>—and loops through it. For each item in the list is calls the function in the first argument—<code class=\"language-text\">function (total, num) { return total + num }</code>— and it passes it the <em>running total</em> (starting with the second argument, 0) and the item from the list.</p>\n<p>The function adds the running total (<code class=\"language-text\">total</code>) to the item (<code class=\"language-text\">num</code>) and returns the new total, _which is passed as the <code class=\"language-text\">total</code> when the function is called on the next item. So this function is called four times. Our anonymous function just takes two numbers and adds them together, so we can use the <code class=\"language-text\">ramda</code> <code class=\"language-text\">add</code> function just as easily:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> add<span class=\"token punctuation\">,</span> reduce <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span>\n\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// is the same as doing</span>\n\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 5</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 15</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 30</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 50</span>\n\n<span class=\"token comment\">// the first argument is the running total, and the second is the next item in the list</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>But <code class=\"language-text\">reduce</code> can do so much more. Let's recreate our <code class=\"language-text\">map</code>, <code class=\"language-text\">filter</code>, and <code class=\"language-text\">find</code> functions using <code class=\"language-text\">reduce</code>.</p>\n<p>First, <code class=\"language-text\">map</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> reduce <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">map</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>acc<span class=\"token punctuation\">,</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    list\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns [1, 4, 9]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Take a close look at our function, <code class=\"language-text\">(acc, item) =&gt; [...acc, f(item)]</code>. This is the same as this: <code class=\"language-text\">function (acc, item) { return [...acc, f(item)] }</code>. Here is what that looks like as it runs:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// First item</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// ...[] spreads to nothing, and 1 * 1 === 1, so the return is [1]</span>\n\n<span class=\"token comment\">// Second item</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// ...[1] spreads to 1, and 2 * 2 === 4, so the return is [1, 4]</span>\n\n<span class=\"token comment\">// Last item</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// ...[1, 4] spreads to 1, 4, and 3 * 3 === 9, so the return is [1, 4, 9]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Really not difficult. We are taking our \"accumulator\" (which can be anything) and modifying it on each call to the function, then returning the modified accumulator which is the first argument to the <em>next</em> call to the function. Build the output one function call at a time, <em>just like in a loop</em>.</p>\n<p>Now what about <code class=\"language-text\">filter</code>?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> reduce <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">filter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>acc<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> acc<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    list\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns [2, 4]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Same as map, but this time we are using the function <code class=\"language-text\">f</code> to check each item in the list. If <code class=\"language-text\">f(item)</code> returns <code class=\"language-text\">true</code>, then we include that item in the new array: <code class=\"language-text\">[...acc, item]</code>. If it returns <code class=\"language-text\">false</code>, then we return the new array unchanged: <code class=\"language-text\">acc</code>. If <code class=\"language-text\">acc</code> (for \"accumulator\") is confusing, then call it <code class=\"language-text\">out</code> or <code class=\"language-text\">output</code> or <code class=\"language-text\">filteredListSoFar</code> or whatever makes sense to you.</p>\n<p>Note: <code class=\"language-text\">n =&gt; n % 2 === 0</code> is the same as <code class=\"language-text\">function (n) { return n % 2 === 0 }</code>. It takes a number, divides it by 2 and takes the remainder and then compares that to 0. If the remainder is 0, then it returns <code class=\"language-text\">true</code> (the number is even). If it is anything but 0 (which could only be 1 in this instance), then it returns <code class=\"language-text\">false</code> because the number is not even.</p>\n<p>The \"ternary operator\" (<code class=\"language-text\">?:</code>) returns the second term (<code class=\"language-text\">[...acc, item]</code>) if the first term (<code class=\"language-text\">f(item)</code>) returns \"truthy\", or the third term (<code class=\"language-text\">acc</code>) if it returns anything other than \"truthy\".</p>\n<p>OK, <code class=\"language-text\">find</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> reduce <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">find</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> list</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> acc <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> item <span class=\"token punctuation\">:</span> acc<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    list\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This works similarly to <code class=\"language-text\">filter</code>, but when we start with our accumulator undefined. For each item in the list, if the accumulator has yet to be defined and the <code class=\"language-text\">f(item)</code> returns <code class=\"language-text\">true</code>, we return the item. If the accumulator is already filled or the <code class=\"language-text\">f(item)</code> returns <code class=\"language-text\">false</code>, then we return the accumulator unchanged.</p>\n<p>This is not the ideal way to write this function as the loop continues all the way to the end, even if we find the item in the first spot. Later in this tutorial we'll show you a better way to implement the <code class=\"language-text\">find</code> function (not that you'll ever actually have to...).</p>\n<p>We could also use <code class=\"language-text\">reduce</code> to map through an object. For example, here we want to convert the values of each key-value pair to uppercase:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> keys<span class=\"token punctuation\">,</span> reduce<span class=\"token punctuation\">,</span> toUpper <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span>\n\n<span class=\"token keyword\">const</span> colours <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  red<span class=\"token punctuation\">:</span> <span class=\"token string\">'f00'</span><span class=\"token punctuation\">,</span>\n  yellow<span class=\"token punctuation\">:</span> <span class=\"token string\">'ff0'</span><span class=\"token punctuation\">,</span>\n  green<span class=\"token punctuation\">:</span> <span class=\"token string\">'0f0'</span><span class=\"token punctuation\">,</span>\n  cyan<span class=\"token punctuation\">:</span> <span class=\"token string\">'0ff'</span><span class=\"token punctuation\">,</span>\n  blue<span class=\"token punctuation\">:</span> <span class=\"token string\">'00f'</span><span class=\"token punctuation\">,</span>\n  magenta<span class=\"token punctuation\">:</span> <span class=\"token string\">'f0f'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Returns\n  {\n      blue: \"00F\",\n      cyan: \"0FF\",\n      green: \"0F0\",\n      magenta: \"F0F\",\n      red: \"F00\",\n      yellow: \"FF0\"\n  }\n */</span>\n<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>acc<span class=\"token punctuation\">,</span> <span class=\"token comment\">// copy the current accumulator</span>\n    <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token function\">toUpper</span><span class=\"token punctuation\">(</span>colours<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// overwrite the value of `key` with the uppercase value of `key`</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// our starting accumulator: will contain the uppercased key-value pairs when we're done</span>\n  <span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>colours<span class=\"token punctuation\">)</span> <span class=\"token comment\">// an array of just the keys in `colours`</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Using Vanilla JS</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>colours<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>acc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> colours<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>join</h3>\n<p>The <code class=\"language-text\">join</code> function takes an array of strings and joins them together inserting a separator between individual items. The first parameter is the separator; the second parameter is the array of strings to join (unless you're using the <code class=\"language-text\">join</code> method on the array itself, as in the Vanilla JS version):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> join <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span>\n\n<span class=\"token keyword\">const</span> colours <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' / '</span><span class=\"token punctuation\">,</span> colours<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 'red / green / blue'</span>\n\n<span class=\"token comment\">// Using Vanilla JS</span>\ncolours<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' / '</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 'red / green / blue'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>sort</h3>\n<p>The <code class=\"language-text\">sort</code> function takes a comparator function and a list and sorts the items in the list using the comparator function. The comparator  function should return a negative number if the first value is comes first, a positive number if it comes second, and zero if it doesn't matter (e.g., they're equal). So if we wanted to sort a list of numbers in <em>descending</em> order, we could do it this way:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> sort <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">compare</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> b <span class=\"token operator\">-</span> a\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>compare<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns [5, 4, 3, 2, 1]</span>\n\n<span class=\"token comment\">// Using Vanilla JS</span>\nnums<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>compare<span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns [5, 4, 3, 2, 1]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>If we use our <code class=\"language-text\">compare</code> function on the first two numbers, 5 and 1, we can see that it returns -4: <code class=\"language-text\">compare(5, 1) // 1 - 5 === -4</code>. We said that a negative number means the first value goes first, so that means the 5 comes before the 1. On the other hand, comparing the 1 and the 4—<code class=\"language-text\">compare(1, 4) // 4 - 1 === 3</code>—returns a positive number, so the <em>second</em> number (4) comes first. And so on.</p>\n<p>What if we want to sort in ascending order? Just change the compare function: <code class=\"language-text\">(a, b) = a - b</code>.</p>\n<p>How does this work internally? Who cares? It works. If sorting algorithms are your thing, feel free to look at the source code. But to use <code class=\"language-text\">sort</code>, you don't \"need to know\".</p>\n<p><strong>Note that all of these functions <em>return copies</em> of the original list (or a new value entirely). None of them mutate the original list in place. If you started with an array, e.g., <code class=\"language-text\">[1, 2, 3]</code>, then after you've run one of these functions on it, the original array <em>is still</em> <code class=\"language-text\">[1, 2, 3]</code>.</strong> That's very important.</p>\n<h2>Rule 4</h2>\n<p><strong>Avoid loops! You can also create a function that calls itself over and over again.</strong></p>\n<p>We used <code class=\"language-text\">reduce</code> to define a <code class=\"language-text\">find</code> function above, but we said it was less than optimal because it ran through the entire list, even if it found the item it was looking for on in the first spot.</p>\n<p>There is another way to implement the <code class=\"language-text\">find</code> function without a loop. We can create a function that looks in the first spot, and if it finds the item we're looking for, then it returns it and <em>we're done</em>. No need to loop through the remaining items.</p>\n<p>But what if the first item is not the one we're looking for? Easy! In that instance, we'll just <em>call the find function again with <strong>the rest of the list</strong></em>. Meaning, we'll take the \"tail\" of the list (all the items except the first, \"head\" item), and call our <code class=\"language-text\">find</code> function on it <em>from inside our <code class=\"language-text\">find</code> function</em>. Sounds crazy, but it's very simple in practice. Here's our <code class=\"language-text\">find</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">find</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>xs<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> x\n    <span class=\"token punctuation\">:</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> xs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 4</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So what's happening here? Simple: <code class=\"language-text\">find</code> takes a function that returns <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code> and a list of items. We call the function on the first item, and if it returns <code class=\"language-text\">true</code> then we return that item from <code class=\"language-text\">find</code>. If it returns <code class=\"language-text\">false</code>, then we move on to the next item.</p>\n<p>The <code class=\"language-text\">[x, ...xs]</code> trick is a common one in JS. It \"destructures\" our array into a \"head\" (<code class=\"language-text\">x</code>), which is a single item, and a \"tail\" (<code class=\"language-text\">xs</code>), which is the rest of the array. Remember: <code class=\"language-text\">x</code> is an <strong>item</strong> in the array, and <code class=\"language-text\">xs</code> is an <strong>array of items</strong>. Very different things! The <code class=\"language-text\">x</code> and <code class=\"language-text\">xs</code> terminology is common, with <code class=\"language-text\">x</code> being an item and <code class=\"language-text\">xs</code> being \"the rest of the items\". We could as easily have called them <code class=\"language-text\">head</code> and <code class=\"language-text\">tail</code>, or <code class=\"language-text\">firstItem</code> and <code class=\"language-text\">remainingItems</code>, but <code class=\"language-text\">x</code> and <code class=\"language-text\">xs</code> are so common in functional programming that everyone understands what we mean.</p>\n<p>Inside the function, we use a ternary operator again. First we apply the function <code class=\"language-text\">f</code> to the first item (head) <code class=\"language-text\">x</code>. If it returns <code class=\"language-text\">true</code> (or truthy), then we return <code class=\"language-text\">x</code> and we're done. If it returns <code class=\"language-text\">false</code> (or falsy), then <em>we call <code class=\"language-text\">find</code> again and pass it the remaining items:</em> <code class=\"language-text\">find(f, xs)</code>.</p>\n<p>You may have noticed a problem here. What if we call our <code class=\"language-text\">find</code> on a list that <em>does not contain what we're looking for?</em> If you try it, you'll get an error that says \"Maximum call stack size exceeded\" or something like that. This is because our <code class=\"language-text\">find</code> function doesn't know when to stop looking! It keeps calling itself even though the list is empty. We can't have that.</p>\n<p>All functions that call themselves like this must have a \"base case\" that stops them from looping infinitely, <em>and each time the function is called, it must get <strong>closer</strong> to the base case</em>. In other words, it does no good to have a base case that says \"stop if the argument is zero\" if my function is <em>adding</em> numbers: I'll never get there.</p>\n<p>When our list is empty, <code class=\"language-text\">x</code> will be undefined. So we could add a guard clause to stop the loop when <code class=\"language-text\">x</code> is undefined, or we could just add it to our condition in the ternary:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">find</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>xs<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">?</span> x\n    <span class=\"token punctuation\">:</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> xs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns undefined</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>(Note: this won't work on an array with some items undefined, but that's probably OK for our purposes. If we have to permit undefined values in the array, we could use the array length instead and stop when it is empty.)</p>\n<p>This kind of function can pile up calls on the stack (memory) until it finally returns, so don't use it for functions that will operate on lists so long that you're likely to run out of memory or suffer a big performance hit. But for most instances where you are looping through only a few (or a few hundred) items, it's probably fast enough. For the others, prefer the functions such as <code class=\"language-text\">map</code>, which are optimised.</p>","frontmatter":{"path":"/how-to-fp","title":"How to FP"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}