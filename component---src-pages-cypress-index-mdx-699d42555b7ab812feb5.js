(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{208:function(e,t,n){"use strict";n.r(t);n(14),n(15),n(8),n(22),n(16),n(0);var a=n(69),o=n(219),i=n(221),s=n(217),r=n(218),c=n(220),l={code:"// DON'T DO THIS!\nclass Person {\n  constructor(nameGiven, nameFamily) {\n    this.nameGiven = nameGiven\n    this.nameFamily = nameFamily\n  }\n\n  get fullName () {\n    return `${this.nameGiven} ${this.nameFamily}`\n  }\n}\n\nclass Employee extends Person {\n  constructor(nameGiven, nameFamily, id) {\n    super(nameGiven, nameFamily)\n    \n    this.id = id\n  }\n  \n  toString () {\n    return `My name is ${this.fullName} and my employee ID is ${this.id}.`\n  }\n}\n\nconst employee = new Employee('Lucy', 'Fur', 666)\n\n// Note that `fullName` works even though it is in Person, not Employee\nconsole.log(`employee.fullName: ${employee.fullName}`)\nconsole.log(`employee.toString(): ${employee.toString()}`)\nconsole.log('employee:', employee)",imports:"",requires:""},p={code:"// Person factory\nconst createPerson = (nameGiven, nameFamily) => ({ nameGiven, nameFamily })\n\n// Employee factory (by aggregation)\nconst createEmployeeByAggregation = (id, person) => ({\n  id,\n  person\n})\n\n// New Person: Jane\nconst jane = createPerson('Jane', 'Dobbs')\n\n// Make Jane employee #1\nconst employee = createEmployeeByAggregation(1, jane)\n\nconsole.log('employee:', employee)\nconsole.log(`employee.id: ${employee.id}`)\n\n// To access the properties of the Person we have to reach into employee.person:\nconsole.log(`employee.person.nameGiven: ${employee.person.nameGiven}`)\nconsole.log(`employee.person.nameFamily: ${employee.person.nameFamily}`)\nconsole.log(`employee.person.nickname: ${employee.person.nickname}`)\n\nconsole.log(`Set jane.nickname to 'Mom'`)\njane.nickname = 'Mom'\n\n// We can see the new nickname property because our Employee\n// simply points to the Person object\nconsole.log(`employee.person.nickname: ${employee.person.nickname}`)\n\n// We can also extract the Person object from the Employee\nconsole.log('Here is our employee.person:', employee.person)",imports:"",requires:""},m={code:"// Person factory\nconst createPerson = (nameGiven, nameFamily) => ({ nameGiven, nameFamily })\n\n// Employee factory (by concatenation)\nconst createEmployeeByConcatenation = (id, person) => ({\n  id,\n  ...person\n})\n\n// New Person: Marsh\nconst marsh = createPerson('Marsh', 'Dobbs')\n\n// Make Marsh employee #3\nconst employee = createEmployeeByConcatenation(3, marsh)\n\n// We've copied all the properties into a new object so all are visible\nconsole.log('employee:', employee)\nconsole.log(`employee.id: ${employee.id}`)\nconsole.log(`employee.nameGiven: ${employee.nameGiven}`)\nconsole.log(`employee.nameFamily: ${employee.nameFamily}`)\nconsole.log(`employee.nickname: ${employee.nickname}`)\n\n// However, we are no longer connected to our Person (marsh)\n// so when we update `marsh`, we do not update `employee`\nconsole.log(`Set marsh.nickname to 'Connie'`)\nmarsh.nickname = 'Connie'\n\n// That said, if we are maintaining immutability, then we will\n// never update the Person, so this won't matter\nconsole.log(`employee.nickname: ${employee.nickname}`, '')",imports:"",requires:""},b={code:"// Person factory\nconst createPerson = (nameGiven, nameFamily) => ({ nameGiven, nameFamily })\n\n// Employee factory (by delegation)\nconst createEmployeeByDelegation = (id, person) => Object.assign(\n  Object.create(person),\n  { id }\n)\n\n// New Person: J.R.\nconst jr = createPerson('J.R.', 'Dobbs')\n\n// Make J.R. employee #2\nconst employee = createEmployeeByDelegation(2, jr)\n\n// Person properties remain in the Person (jr) and\n// are not visible in the Employee object\nconsole.log('employee:', employee)\nconsole.log(`employee.id: ${employee.id}`)\n\n// But we can still reference the Person properties\n// as if they were part of the Employee object\nconsole.log(`employee.nameGiven: ${employee.nameGiven}`)\nconsole.log(`employee.nameFamily: ${employee.nameFamily}`)\nconsole.log(`employee.nickname: ${employee.nickname}`)\n\n// And when we update the Person, the Employee properties reflect this\nconsole.log(`Set jr.nickname to 'Bob'`)\njr.nickname = 'Bob'\n\nconsole.log(`employee.nickname: ${employee.nickname}`)\n\n// Where is the person? In the prototype:\nconsole.log('Object.getPrototypeOf(employee):', Object.getPrototypeOf(employee))\nconsole.log(`Same person? ${Object.is(Object.getPrototypeOf(employee), jr)}`)",imports:"",requires:""},d={code:"// Person factory\nconst createPerson = (nameGiven, nameFamily) => ({ nameGiven, nameFamily })\n\n// Employee factory (by concatenation)\nconst createEmployee = (id, person) => ({\n  id,\n  ...person\n})\n\n// Our fullName utility function is effectively polymorphic\n// It will work with *any* object that has nameGiven and nameFamily properties\nconst fullName = ({ nameGiven, nameFamily }) => (`${nameGiven} ${nameFamily}`)\n\n// New Person: Marsh\nconst marsh = createPerson('Marsh', 'Dobbs')\n\n// Make Marsh employee #3\nconst employee = createEmployee(3, marsh)\n\n// We've copied all the properties into a new object so all are visible\nconsole.log('marsh:', marsh)\nconsole.log(`fullName(marsh): ${fullName(marsh)}`)\nconsole.log('employee:', employee)\nconsole.log(`employee.id: ${employee.id}`)\nconsole.log(`fullName(employee): ${fullName(employee)}`)",imports:"",requires:""};n.d(t,"_frontmatter",function(){return g}),n.d(t,"default",function(){return O});var g={},u={_frontmatter:g},h=o.a;function O(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["components"]);return Object(a.b)(h,Object.assign({},u,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("ul",null,Object(a.b)("li",null,Object(a.b)(r.a,{to:"/cypress/#no-more-page-objects",mdxType:"Link"},"No more Page Objects")),Object(a.b)("li",null,Object(a.b)(r.a,{to:"/cypress/#enter-page-modules",mdxType:"Link"},"Enter Page Modules")),Object(a.b)("li",null,Object(a.b)(r.a,{to:"/cypress/#but-what-about-inheritance",mdxType:"Link"},"But what about inheritance?")),Object(a.b)("li",null,Object(a.b)(r.a,{to:"/cypress/#favour-composition-over-inheritance",mdxType:"Link"},"Favour composition over inheritance")),Object(a.b)("li",null,Object(a.b)(r.a,{to:"/cypress/#readability",mdxType:"Link"},"Readability")),Object(a.b)("li",null,Object(a.b)(r.a,{to:"/cypress/#i-need-more-convincing",mdxType:"Link"},"I need more convincing...")),Object(a.b)("li",null,Object(a.b)(r.a,{to:"/cypress/#page-objects-break-the-srp",mdxType:"Link"},"Page Objects break the Single Responsibility Principle")),Object(a.b)("li",null,Object(a.b)(r.a,{to:"/cypress/#page-order-is-not-user-flow",mdxType:"Link"},"Page order is not user flow"))),Object(a.b)("h3",{id:"no-more-page-objects"},"No more Page Objects"),Object(a.b)("p",null,"The ",Object(a.b)("strong",{parentName:"p"},"Page Object")," design pattern offers two benefits:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"It keeps all page element selectors in one place; thus, it provides separation of test code from the locators of the application under test (AUT)."),Object(a.b)("li",{parentName:"ol"},"It standardises how tests interact with the page; thus, it avoids duplication of code and eases code maintenance.")),Object(a.b)("p",null,"Object-orientation (OO) in JavaScript is a bit awkward. Introduction of the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"class")," keyword in JavaScript 2015 helped, but classes, and specifically the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"this")," keyword, still surprise Java programmers because they work very differently."),Object(a.b)("p",null,Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://kentcdodds.com/blog/classes-complexity-and-functional-programming"}),"Here is a great blog post from Kent C. Dodds which highlights this point"),"."),Object(a.b)("h3",{id:"enter-page-modules"},"Enter Page Modules"),Object(a.b)("p",null,"In Java land, it's pretty common to find Page Objects which inherit from the Base Page. In JavaScript, that might look like this:"),Object(a.b)(s.a,{code:"import { HomePage } from './BasePage'\n\nclass HomePage extends BasePage  {\n  constructor() {\n    super();\n    this.mainElement = 'body > .banner';\n  }\n  //... More code\n\n  export const mainPage = new MainPage();\n}",theme:"dark",mdxType:"Highlighter"}),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"With the move to functional programming, we are going to lose not only ",Object(a.b)("strong",{parentName:"em"},"inheritance"),", but the ",Object(a.b)("code",Object.assign({parentName:"em"},{className:"language-text"}),"class")," itself.")," Therefore, we need to use ",Object(a.b)("strong",{parentName:"p"},"modules")," to arrange our code. Each module exports public functions that can be imported into other modules and used:"),Object(a.b)(s.a,{code:"// In the HomePage module (HomePage.js or HomePage/index.js)\nexport function login (email, password) {\n  // code here...\n}\n\nexport function logout () {\n  // code here...\n}\n\nexport function search (criterion) {\n  // code here...\n}",mdxType:"Highlighter"}),Object(a.b)("p",null,"This module can then be imported into your tests or other modules and used as below:"),Object(a.b)(s.a,{code:"// In the HomePageTest module (HomePageTest.js or HomePageTest/index.js)\nimport * as homePage from './HomePage.js'\n\ndescribe('Home Page', () => {\n  it('User can login', () => {\n      cy.visit('/')\n      homePage.login('prateek', '123456')\n  })\n})",mdxType:"Highlighter"}),Object(a.b)("p",null,"or we can import individual functions from a module selectively:"),Object(a.b)(s.a,{code:"import { login } from './HomePage.js'\n\ndescribe('Home Page', () => {\n  it('User can login', () => {\n    cy.visit('/')\n    login('prateek', '123456')\n  })\n})",mdxType:"Highlighter"}),Object(a.b)("p",null,"In general, import only the functions you need when possible."),Object(a.b)("h3",{id:"but-what-about-inheritance"},"But what about inheritance?"),Object(a.b)(s.a,{code:"public class HomePage extends BasePage { ... } // Java",language:"java",showLineNumbers:!1,mdxType:"Highlighter"}),Object(a.b)("p",null,"Often we come across test suites where Page Objects extend a ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"BasePage")," or every test file extends a ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"BaseTest")," class."),Object(a.b)("p",null,"The intention behind this is typically code reuse. Most often the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"BaseTest")," class has methods related to login, logout, logging, etc."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Please don't do that.")," Bundling ",Object(a.b)("em",{parentName:"p"},"unrelated functionality")," into a parent class for the purpose of reuse is an abuse of inheritance."),Object(a.b)("p",null,"Common functionality required by ",Object(a.b)("strong",{parentName:"p"},"specs")," can be added as Cypress ",Object(a.b)("strong",{parentName:"p"},"custom commands"),". Custom commands are available to be used globally with the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"cy.")," prefix. For example, we can add a method called ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"login")," using a custom command:"),Object(a.b)(s.a,{code:"Cypress.Commands.add('login', (username, password) => {\n    cy.get('#username').type(username)\n    // code here...\n})",mdxType:"Highlighter"}),Object(a.b)("p",null,"The ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Cypress.Commands.add")," function takes the ",Object(a.b)("em",{parentName:"p"},"name")," of the custom command as the first argument, and a ",Object(a.b)("em",{parentName:"p"},"function")," as the second argument."),Object(a.b)("p",null,"Now we can use that name to call the custom command in any spec:"),Object(a.b)(s.a,{code:"describe('Login Page', () => {\n  it('User can login', () => {\n    cy.login('prateek', '123456') // NOT a good password :-)\n    // code here...\n  })\n})",mdxType:"Highlighter"}),Object(a.b)("p",null,"Note: functionality that is shared between a few specs ",Object(a.b)("em",{parentName:"p"},"but not all")," should be added to ",Object(a.b)("strong",{parentName:"p"},"utility modules")," instead of adding a custom command. Reserve custom commands for widely-used functionality. "),Object(a.b)("h3",{id:"favour-composition-over-inheritance"},"“Favour composition over inheritance”"),Object(a.b)("p",null,"Why? Watch this video to find out:"),Object(a.b)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/wfMtDGfHWpA",frameBorder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}),Object(a.b)("p",null,"Now, consider the code below that uses ",Object(a.b)("strong",{parentName:"p"},"inheritance")," (don't do this):"),Object(a.b)(i.a,Object.assign({},l,{theme:"dark",mdxType:"CodeBlock"})),Object(a.b)("p",null,"Inheritance is actually a form of ","“","object composition","”",". It is the form that binds the objects most tightly, hence it is the one to be most avoided, if possible."),Object(a.b)("p",null,"Here we are using inheritance to provide for code reuse. There is no separate ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," object to which ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Employee")," refers. ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Employee")," simply inherits the properties (and methods, if any) of the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," object, so, for example, the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"fullName")," getter is available both within ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Employee")," (note the use of it in the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"toString")," method) and on instances of the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Employee")," class."),Object(a.b)("p",null,"The same functionality could be achieved using ",Object(a.b)("strong",{parentName:"p"},"composition"),". There are three common ways to compose objects in JavaScript: ",Object(a.b)("strong",{parentName:"p"},"aggregation"),", ",Object(a.b)("strong",{parentName:"p"},"delegation"),", and ",Object(a.b)("strong",{parentName:"p"},"concatenation"),"."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Aggregation")," ",Object(a.b)("em",{parentName:"p"},"preserves")," the objects that we're composing (i.e., aggregating). Here, an ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Employee")," is simply a wrapper around a ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," that adds an employee ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"id")," property. A key feature of aggregation is that the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," object retains its integrity and we can extract it from the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Employee")," object:"),Object(a.b)(i.a,Object.assign({},p,{mdxType:"CodeBlock"})),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Delegation")," is similar, except we do not inject the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," into the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Employee"),", so the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," is not directly visible in the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Employee")," and we can't extract the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," back out again as easily."),Object(a.b)("p",null,"However, the properties of the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," are directly accessible from within the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Employee"),", and if we mutate the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," (which we won't, right?), then those changes are immediately visible in the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Employee")," that delegates to that ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," object."),Object(a.b)("p",null,"To pull the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," back out, we've got to get it from the prototype: ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Object.getPrototypeOf(employee)"),"."),Object(a.b)("p",null,"Delegation can be used to save memory, while making the properties of ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," ",Object(a.b)("em",{parentName:"p"},"directly")," accessible from within ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Employee")," (i.e., we don't have to go through the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"person")," property):"),Object(a.b)(i.a,Object.assign({},b,{mdxType:"CodeBlock"})),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Concatenation")," is the simplest and often the best for our purposes as we always make copies rather than mutating in place. If we are never going to mutate the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," object once we've created it, then why bother linking to it? This is the loosest form of coupling, and should be the first one to which we turn."),Object(a.b)("p",null,"Concatenation simply creates a new object, copying the properties from all objects passed:"),Object(a.b)(i.a,Object.assign({},m,{mdxType:"CodeBlock"})),Object(a.b)("p",null,"Note: Functions which return objects are called ",Object(a.b)("strong",{parentName:"p"},"factory functions"),"."),Object(a.b)("p",null,"In our inheritance example above, ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," provided a ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"fullName")," getter","—","a computed property. The functional way to do this is with a utility function. We could put all our functions used for ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," in a ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," module rather than a ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Person")," class. Then we import that module","—","or just the functions we need","—","and use them."),Object(a.b)(i.a,Object.assign({},d,{mdxType:"CodeBlock"})),Object(a.b)("h3",{id:"readability"},"Readability"),Object(a.b)("p",null,"The reason many people give for using Page Objects is that they encapsulate the complexity of the UI and the locators, which helps with reusability and making the tests more readable. But what is the tradeoff? (There is ",Object(a.b)("em",{parentName:"p"},"always")," a tradeoff.) And is there a better way?"),Object(a.b)("p",null,"Note: For these examples we are using the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/cypress-io/cypress-example-todomvc"}),"Cypress TodoMVC Example Repo")," and refactoring a few tests."),Object(a.b)("p",null,"Consider this typical Cypress example:"),Object(a.b)(s.a,{code:"describe('Todo Application', () => {\n  it('Can add a new Todo', () => {\n    cy.get('.new-todo')    // What am I getting here? It's not clear\n      .type('First Todo')  // Entering text, so maybe some type of input?\n      .type('{enter}')     // Hitting enter, so maybe submitting a form?\n\n    cy.get('.todo-list li')            // Some list element\n      .eq(0)                           // Not even sure what this is\n      .find('label')                    // Has a label element\n      .should('contain', 'First Todo') // That should contain this text. Who cares?\n  })\n})",theme:"dark",mdxType:"Highlighter"}),Object(a.b)("p",null,"As you can see, while the ",Object(a.b)("em",{parentName:"p"},"action")," we're undertaking","—",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"get"),", ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"type"),", ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"eq"),", ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"find"),", ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"should"),"—","is obvious, what we're actually trying to accomplish is ",Object(a.b)("strong",{parentName:"p"},"not clear at all."),"."),Object(a.b)("p",null,"Contrast that with this equivalent example:"),Object(a.b)(s.a,{code:"import { addTodo, getTodoLabel, getTopTodoFromList } from './TodoUtil'\n\nconst TODO_LABEL = 'My Todo'\n\ndescribe('Todo Application', () => {\n  it('Can add a new Todo', () =>\n    addTodo(TODO_LABEL)\n      .then(getTopTodoFromList)\n      .then(getTodoLabel)\n      .should('equal', TODO_LABEL)\n  )\n})",mdxType:"Highlighter"}),Object(a.b)("p",null,"The first example is ",Object(a.b)("strong",{parentName:"p"},"imperative"),". It tells Cypress ",Object(a.b)("strong",{parentName:"p"},"how")," to execute the test. Our second, better example is ",Object(a.b)("strong",{parentName:"p"},"declarative"),". We have abstracted away the ","“","how","”"," and we simply concern ourselves with ",Object(a.b)("strong",{parentName:"p"},"what")," to do."),Object(a.b)("p",null,"Our declarative second example is far more readable, which means much lower cognitive load for the reader: we can understand it at a glance. Even non-technical personnel, such as your business analyst or product owner, can read and understand this test easily. Note also that we no longer need comments to explain what we're doing."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"And we get the added benefit of the reusability of the utility functions ",Object(a.b)("code",Object.assign({parentName:"strong"},{className:"language-text"}),"addTodo"),", ",Object(a.b)("code",Object.assign({parentName:"strong"},{className:"language-text"}),"getTopTodoFromList"),", and ",Object(a.b)("code",Object.assign({parentName:"strong"},{className:"language-text"}),"getTodoLabel"),".")),Object(a.b)("p",null,"So where can we find our ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"addTodo"),", ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"getTopTodoFromList"),", and ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"getTodoLabel")," functions? They're nicely tucked away in our ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"TodoUtil.js")," or ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"TodoUtil/index.js")," file:"),Object(a.b)(s.a,{code:"// TodoUtil.js or TodoUtil/index.js\nexport const addTodo = name =>\n  cy\n    .get('.new-todo')\n    .type(`${name}{enter}`)\n\nexport const getTopTodoFromList = () =>\n  cy\n    .get('.todo-list')\n    .eq(0)\n\nexport const getTodoLabel = todo =>\n  todo\n    .find('label')\n    .text()",mdxType:"Highlighter"}),Object(a.b)("p",null,"This is where we hide the imperative code. At some low level, we will always need to tell the computer ",Object(a.b)("strong",{parentName:"p"},"how")," to do things. But if we abstract this code into library or utility functions with ",Object(a.b)("strong",{parentName:"p"},"concise, clear names"),", then our actual code is as easy to read as plain English. That is a major benefit of working in a ",Object(a.b)("strong",{parentName:"p"},"declarative")," style."),Object(a.b)("p",null,"Now let's look at an update scenario:"),Object(a.b)(s.a,{code:"import {addTodo, getTodoLabel, updateTodo} from './TodoUtil'\n\ndescribe('Todo Application', ()=> {\n  const INITIAL_TODO = 'Initial todo'\n  const UPDATED_TODO = 'Updated todo'\n\n  it('Can update a newly created todo', () =>\n    addTodo(INITIAL_TODO)\n      .then(updateTodo(UPDATED_TODO)) // updateTodo(UPDATED_TODO) is partially applied\n      .then(getTodoLabel)\n      .should('equal', UPDATED_TODO)\n  )\n})",mdxType:"Highlighter"}),Object(a.b)("p",null,"And here is the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"updateTodo")," utility function:"),Object(a.b)(s.a,{code:"// In TodoUtils.js or TodoUtils/index.js\n// Calling this with the updatedLabel returns a FUNCTION\n// that takes the todo and updates it\nexport const updateTodo = updatedLabel =>\n  $todo => { // dollar sign indicates this is an element\n    cy\n      .wrap($todo) // wrap the element to give it Cypress superpowers\n      .within(     // scopes all subsequent commands to the $todo element\n        () => {    // callback function\n          cy\n            .get('label')     // grabs the label\n            .dblclick()       // double-clicks to open the editor\n\n          cy\n            .get('.edit')                   // grabs the editor input\n            .clear()                        // clears it\n            .type(`${updatedLabel}{enter}`) // enters updated label and submits\n        }\n      )\n\n    return cy.wrap($todo) // return the wrapped todo element so we can chain `thens`\n  }",mdxType:"Highlighter"}),Object(a.b)("p",null,"See how we've hidden the nasty imperative code in our utilities? That allows us to keep our actual test code clean, simple, and easy to understand."),Object(a.b)("h3",{id:"i-need-more-convincing"},"I need more convincing..."),Object(a.b)("p",null,"OK. Here are three strong arguments ",Object(a.b)("em",{parentName:"p"},"against")," Page Objects:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Page Objects introduce state ",Object(a.b)("em",{parentName:"li"},"in addition to")," the application state, which makes tests harder to understand."),Object(a.b)("li",{parentName:"ol"},"Using Page Objects means that all our tests go through the application's GUI."),Object(a.b)("li",{parentName:"ol"},"Page Objects try to fit multiple cases into a uniform interface, falling back to conditional logic","—","and that's just not nice.")),Object(a.b)("p",null,"Most of us who swear by Page Objects are coming from Java and Selenium, so it's worth noting that..."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"JavaScript is NOT Java"),"."),Object(a.b)("p",null,"Java is a statically-typed, compiled, ",Object(a.b)("em",{parentName:"p"},"strongly")," object-oriented language (although it is becoming more functional with each new version). JavaScript is a ",Object(a.b)("strong",{parentName:"p"},"dynamically-typed, interpreted, hybrid OOP/FP language")," that also gets more functional with each new version (and versions come annually)."),Object(a.b)("p",null,"New language ","→"," new paradigm ","→"," ",Object(a.b)("em",{parentName:"p"},"new way of doing things"),"."),Object(a.b)("p",null,"But even in an OO paradigm, Page Objects leave a lot to be desired. For example:"),Object(a.b)("h3",{id:"page-objects-break-the-srp"},"Page Objects break the Single Responsibility Principle"),Object(a.b)("p",null,"Page Objects bind unrelated functionality together in one class. For example, in the code below, ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"searchProduct()")," functionality is ",Object(a.b)("em",{parentName:"p"},"not related")," to the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"login")," or ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"logout")," actions."),Object(a.b)(s.a,{code:'// This is JAVA, not JavaScript\npublic class HomePage {\n    private final WebDriver webDriver;\n\n    public HomePage(WebDriver webDriver) {\n        this.webDriver = webDriver;\n    }\n\n    public SignUpPage signUp() {\n        webDriver.findElement(By.linkText("Sign up")).click();\n        return new SignUpPage(webDriver);\n    }\n\n    public void logOut() {\n        webDriver.findElement(By.linkText("Log out")).click();\n    }\n\n    public LoginPage logIn() {\n        webDriver.findElement(By.linkText("Log in")).click();\n        return new LoginPage(webDriver);\n    }\n\n    public ProductPage searchProduct(String product){\n        webDriver.findElement(By.linkText(product)).click();\n        return new ProductPage(webDriver);\n    }\n}',language:"java",theme:"dark",mdxType:"Highlighter"}),Object(a.b)("p",null,"One major problem with the above code is that our ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"HomePage")," class does not follow the ",Object(a.b)("strong",{parentName:"p"},"Single Responsibility Principle")," (SRP):"),Object(a.b)("blockquote",null,"The ",Object(a.b)("strong",null,"Single Responsibility Principle")," is a computer programming principle that states that every module, class, or function should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class. All its services should be narrowly aligned with that responsibility. [",Object(a.b)("a",{href:"https://en.wikipedia.org/wiki/Single_responsibility_principle"},"Wikipedia"),"]"),Object(a.b)("p",null,"The Single Responsibility Principle is part of the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://en.wikipedia.org/wiki/SOLID"}),"SOLID")," design principles for Object-Oriented Programming. Violating the SRP means that Page Objects aren't even good OOP design practice!"),Object(a.b)("p",null,"Breaking Page Objects like those above into multiple smaller Page Objects does not pass the SRP smell test, either. For example, we might move the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"login")," action outside the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"HomePage")," and create a new ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"LoginPage")," object and use it thus:"),Object(a.b)(s.a,{code:'// This is Java, not Javascript\nLoginPage loginPage = new HomePage().navigateToLoginPage();\nloginPage.login("username", "password");',language:"java",theme:"dark",mdxType:"Highlighter"}),Object(a.b)("p",null,"Because these actions belong to two different pages, this code will repeat in every test case that uses ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"login"),". The responsibility for log in has not been entirely ",Object(a.b)("strong",{parentName:"p"},"encapsulated"),"."),Object(a.b)("p",null,"We can correct this by defining a utility funjction that expresses the ",Object(a.b)("strong",{parentName:"p"},"intent")," rather than focusing on the page:"),Object(a.b)(s.a,{code:"export const loginAsCustomer = (name, password) => {\n  /* login code here */\n}",mdxType:"Highlighter"}),Object(a.b)("p",null,"Our ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"loginAsCustomer")," utility function can then work through both the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Home")," and ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"Login")," screens of the application to complete login as a single user ",Object(a.b)("em",{parentName:"p"},"action"),"."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Note: Base your modules on user ",Object(a.b)("em",{parentName:"strong"},"intent"),", not on pages.")),Object(a.b)("h3",{id:"page-order-is-not-user-flow"},"Page order is not user flow"),Object(a.b)("p",null,"Another situation in which Page Objects complicate things is when user flows are not the same as the page order."),Object(a.b)("p",null,"Consider the example of a shopping website. Here the user can add an item to the cart using either the Product Page or the search functionality on the Search page. "),Object(a.b)("p",null,"From the Cart page the user may be redirected either to the Home page or to the Search page (e.g., by clicking “continue to shop”), depending on whether the last item was added using the Product Page or the Search Page, respectively."),Object(a.b)("p",null,"With Page Objects, the code for the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"CartPage")," class might look something like this:"),Object(a.b)(s.a,{code:"// This is Java, not JavaScript\npublic class CartPage {       \n  Page continueShopping () {\n    if (state) {\n      // determines using which page the last item was added\n      return new SearchPage();\n    }\n    else {\n      return new HomePage();\n    } \n  }   \n}",language:"java",theme:"dark",mdxType:"Highlighter"}),Object(a.b)("p",null,"Not only is this code more complex to understand, but also it makes it harder to modify the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"CartPage")," if in future another user flow is introduced."),Object(a.b)("p",null,"This violates the ",Object(a.b)("strong",{parentName:"p"},"Open/Closed principle")," (OCP), which is the ",Object(a.b)("em",{parentName:"p"},"second")," of the OOP SOLID design principles, making this ",Object(a.b)("em",{parentName:"p"},"doubly")," bad OOP. And we have to maintain additional state."),Object(a.b)("blockquote",null,"The ",Object(a.b)("strong",null,"Open/Closed Principle")," (OCP) states that “software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification”. [",Object(a.b)("a",{href:"https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle"},"Wikipedia"),"]"),Object(a.b)("p",null,"We can remove the state logic from our ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"CartPage")," is by turning the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"continueShopping")," into a utility function that simply clicks on the “continue shopping” link:"),Object(a.b)(s.a,{code:"// In CartUtils.js\nexport const continueShopping () {\n  cy.get('#continue').click()\n}",mdxType:"Highlighter"}),Object(a.b)("p",null,"Then we can use it in our tests:"),Object(a.b)(s.a,{code:"// In Test.js\nimport { continueShopping } from './CartUtils'\n\nit('user can add item to cart from home page post selecting \"continue to shop\"', () {\n    /* code to add product to the cart from Product Page */\n    continueShopping()\n    homePage.navigateToProductPage()\n    productPage.addItemToCart('item2')\n})\n\nit('user can add item to cart from search page post selecting \"continue to shop\"', () {\n    /* code to add product to the cart using Search */\n    continueShopping()\n    searchPage.addItemToCart('item')\n})",mdxType:"Highlighter"}),Object(a.b)("p",null,"In the above example, our test creates user flows by calling loosely coupled steps in the right order. This means that our individual modules do not have to maintain state."),Object(a.b)("h3",{id:"loosely-coupled-steps"},"Loosely-coupled steps"),Object(a.b)("p",null,"Need another example of how loosely coupled steps reduce complexity? Consider the typical ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"LoginPage")," class below:"),Object(a.b)("p",null,"(The business requirement is that on successful login the user is redirected to the Home Page and on unsuccessful login, the user stays on the Login page.)"),Object(a.b)(s.a,{code:"// This is Java, not JavaScript\nclass LoginPage {\n    HomePage validLogin(String userName, String password) { /* ... */ }\n    LoginPage invalidLogin(String userName, String password) { /*... */ }\n  }\n}",language:"java",theme:"dark",mdxType:"Highlighter"}),Object(a.b)("p",null,"Now, let's introduce ",Object(a.b)("strong",{parentName:"p"},"roles")," into the mix. If the user has an Admin role, then they are redirected to the Admin Dashboard on log in. If not, they are redirected to the Home Page. Now we need yet another method in the ",Object(a.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"LoginPage")," Page Object to return an instance of the Admin Dashboard page:"),Object(a.b)(s.a,{code:"// This is Java, not JavaScript\nclass LoginPage {\n    HomePage validLogin(String userName, String password) { /* ... */ }\n    LoginPage invalidLogin(String userName, String password) { /*... */ }\n    AdminDashboardPage adminValidLogin(String userName, String password) { /* ... */}\n  }\n}",language:"java",theme:"dark",mdxType:"Highlighter"}),Object(a.b)("p",null,"More roles will mean even more methods ",Object(a.b)("em",{parentName:"p"},"because there is a tight coupling between the pages and the return type"),". Where will it end?"),Object(a.b)("p",null,"We can fix this by ",Object(a.b)("em",{parentName:"p"},"not")," returning references to different pages from the login action:"),Object(a.b)(s.a,{code:"const login = (username, password) => {\n  cy.get('.username').type(username)\n  cy.get('.password').type(password)\n  cy.click('.loginButton')\n}\n\nexport default login",mdxType:"Highlighter"}),Object(a.b)("p",null,"Now our test might look like this:"),Object(a.b)(s.a,{code:"// In Test.js\nit('User is taken to Home Page on valid login', () => {\n   login('prateek', '12345')\n   cy.title().should('equal', 'Home Page')\n})\n\nit('Admin is taken to Admin Dashboard on valid login', () => {\n   login('admin', '12345')\n   cy.title().should('equal', 'Admin Dashboard')\n})",mdxType:"Highlighter"}),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Loosely-coupled steps")," makes for simpler code and fewer lines of code, and that's a big win for everyone."),Object(a.b)("h3",{id:"resources"},"Resources"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)(c.a,{href:"https://medium.com/@cscalfani/",mdxType:"OffsiteLink"},"OOP vs. FP")),Object(a.b)("li",{parentName:"ul"},Object(a.b)(c.a,{href:"https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53",mdxType:"OffsiteLink"},"Goodbye, object-oriented programming")),Object(a.b)("li",{parentName:"ul"},Object(a.b)(c.a,{href:"https://tsh.io/blog/7-reasons-to-use-functional-programming-on-frontend-1-2/",mdxType:"OffsiteLink"},"7 Reasons to use FP for front-end")),Object(a.b)("li",{parentName:"ul"},Object(a.b)(c.a,{href:"https://immutable-js.github.io/immutable-js/docs/#/",mdxType:"OffsiteLink"},"ImmutableJS")),Object(a.b)("li",{parentName:"ul"},Object(a.b)(c.a,{href:"https://ramdajs.com/",mdxType:"OffsiteLink"},"RamdaJS")),Object(a.b)("li",{parentName:"ul"},Object(a.b)(c.a,{href:"https://www.npmjs.com/package/eslint-plugin-fp",mdxType:"OffsiteLink"},"ESLint FP plugin"))),Object(a.b)("h3",{id:"sources"},"Sources"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)(c.a,{href:"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0",mdxType:"OffsiteLink"},"Master the JavaScript interview: What is FP?")),Object(a.b)("li",{parentName:"ul"},Object(a.b)(c.a,{href:"https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7",mdxType:"OffsiteLink"},"So you want to be a functional programmer")),Object(a.b)("li",{parentName:"ul"},Object(a.b)(c.a,{href:"https://tsh.io/blog/7-reasons-to-use-functional-programming-on-frontend-1-2/",mdxType:"OffsiteLink"},"7 Reasons to use FP for front-end")),Object(a.b)("li",{parentName:"ul"},Object(a.b)(c.a,{href:"https://hackernoon.com/functional-programming-paradigms-in-modern-javascript-currying-5652e489cce8",mdxType:"OffsiteLink"},"FP paradigms in modern JavaScript: currying")),Object(a.b)("li",{parentName:"ul"},Object(a.b)(c.a,{href:"https://hackernoon.com/functional-programming-paradigms-in-modern-javascript-pure-functions-797d9abbee1",mdxType:"OffsiteLink"},"FP paradigms in modern JavaScript: pure functions"))),Object(a.b)("small",null,"Errors, bugs, suggestions, questions? Contact ",Object(a.b)("a",{href:"mailto:Prateek_Sharma@bnz.co.nz"},"Prateek Sharma")," or ",Object(a.b)("a",{href:"mailto:Charles_Munat@bnz.co.nz"},"Charles Munat")),".")}O.isMDXComponent=!0},210:function(e,t,n){"use strict";var a=n(0),o=n.n(a),i=n(68),s=n.n(i);n.d(t,"a",function(){return s.a});n(211),n(9).default.enqueue,o.a.createContext({})},211:function(e,t,n){var a;e.exports=(a=n(213))&&a.default||a},212:function(e){e.exports={data:{site:{siteMetadata:{title:"How to FP"}}}}},213:function(e,t,n){"use strict";n.r(t);n(52),n(17),n(14),n(15),n(8),n(22);var a=n(0),o=n.n(a),i=n(96);function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,a)}return n}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}t.default=function(e){var t=e.location,n=e.pageResources;return n?o.a.createElement(i.a,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(n,!0).forEach(function(t){r(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({location:t,pageResources:n},n.json)):null}},214:function(e,t,n){"use strict";var a=n(215),o=n(0),i=n.n(o),s=n(223),r=n.n(s);function c(e){var t=e.lang,n=e.title,o=a.data.site;return i.a.createElement(r.a,{htmlAttributes:{lang:t},title:n?n+" | "+o.siteMetadata.title:o.siteMetadata.title},i.a.createElement("script",{src:"https://embed.runkit.com","data-element-id":"runkit"}))}c.defaultProps={lang:"en",meta:[],description:""},t.a=c},215:function(e){e.exports={data:{site:{siteMetadata:{title:"How to FP",description:"Functional JavaScript for the OO programmer.",author:"@chasm"}}}}},216:function(e,t,n){"use strict";var a=n(212),o=(n(222),n(0)),i=n.n(o),s=(n(16),n(41),n(210)),r=n(23);function c(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(s.a,{to:"/inductive",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Bottom-up"),i.a.createElement(s.a,{to:"/deductive",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Top-down"),i.a.createElement(s.a,{to:"/cypress",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Cypress"))}function l(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(s.a,{to:"/inductive/reusability",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Reusability"),i.a.createElement(s.a,{to:"/inductive/immutability",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Variables"),i.a.createElement(s.a,{to:"/inductive/iteration",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Looping"),i.a.createElement(s.a,{to:"/inductive/composition",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Pipelines"))}function p(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(s.a,{to:"/deductive/pure-functions/",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Pure functions"),i.a.createElement(s.a,{to:"/deductive/more-fp-concepts",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"More FP concepts"))}function m(e){switch(e.location.pathname.split("/")[1]){case"inductive":return i.a.createElement(l,null);case"deductive":return i.a.createElement(p,null);default:return i.a.createElement(c,null)}}var b=function(e){var t=e.siteTitle,n=e.location,a=function(e){switch(e.pathname.split("/")[1]){case"inductive":return"ForestGreen";case"deductive":return"MediumBlue";case"cypress":return"Maroon";default:return"RebeccaPurple"}}(n);return i.a.createElement("header",{style:{background:a,marginBottom:"1.45rem"}},i.a.createElement("div",{style:{display:"flex",alignItems:"center",margin:"0 auto",maxWidth:960,padding:"1.45rem 1.0875rem"}},i.a.createElement("h1",{style:{margin:0,display:"inline-block",flexGrow:1}},i.a.createElement(s.a,{to:"/",style:{color:"white",textDecoration:"none"}},t)),i.a.createElement("div",{style:{flexShrink:1}},i.a.createElement(m,{location:n}))))};function d(e){return i.a.createElement(r.Location,null,function(t){return i.a.createElement(b,Object.assign({},t,e))})}b.defaultProps={siteTitle:""};t.a=function(e){var t=e.children,n=a.data;return i.a.createElement(i.a.Fragment,null,i.a.createElement(d,{siteTitle:n.site.siteMetadata.title}),i.a.createElement("div",{style:{margin:"0 auto",maxWidth:960,padding:"0 1.0875rem 1.45rem",paddingTop:0}},i.a.createElement("main",null,t)))}},217:function(e,t,n){"use strict";n.d(t,"a",function(){return c});var a=n(0),o=n.n(a),i=n(445),s=n(443),r=n(444);function c(e){var t=e.code,n=void 0===t?"":t,a=e.language,c=void 0===a?"javascript":a,l=e.showLineNumbers,p=void 0===l||l,m=e.startingLineNumber,b=void 0===m?1:m,d=e.theme,g=void 0===d?"light":d,u=e.warn,h=void 0===u?function(){return null}:u;return o.a.createElement(o.a.Fragment,null,h(),o.a.createElement(i.a,{language:c,style:"light"===g?s.a:r.a,showLineNumbers:p,startingLineNumber:b},n))}},218:function(e,t,n){"use strict";n.d(t,"a",function(){return c});n(14),n(15),n(8),n(22),n(16);var a=n(210),o=n(0),i=n.n(o),s=n(23);var r=function(e){return function(t){t.preventDefault;var n=window&&"localhost"===window.location.hostname?e:"/fp"+e;Object(s.navigate)(n)}};function c(e){var t=e.children,n=e.to,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["children","to"]);return n.indexOf("#")>-1||n.indexOf("?")>-1?i.a.createElement("a",Object.assign({onClick:r(n)},o,{style:{cursor:"pointer"}}),t):i.a.createElement(a.a,Object.assign({to:n},o),t)}},219:function(e,t,n){"use strict";var a=n(0),o=n.n(a),i=n(210);function s(){return o.a.createElement("span",{className:"separator"},"»")}function r(e){var t=e.title,n=e.trail;return void 0===n?null:o.a.createElement("p",null,function(e,t){return void 0===t&&(t=[]),o.a.createElement(o.a.Fragment,null,t.map(function(e){var t=e.href,n=e.label;return o.a.createElement(a.Fragment,{key:t},o.a.createElement(i.a,{to:t},n),o.a.createElement(s,null))}),e)}(t,n))}var c=n(216),l=n(214);t.a=function(e){var t=e.children,n=e.pageContext.frontmatter,a=n.title,i=n.trail;return o.a.createElement(c.a,null,o.a.createElement(l.a,{title:a}),o.a.createElement(r,{title:a,trail:i}),o.a.createElement("article",null,t))}},220:function(e,t,n){"use strict";n.d(t,"a",function(){return i});var a=n(0),o=n.n(a);function i(e){var t=e.children,n=e.href;return o.a.createElement("a",{href:n,target:"_blank",rel:"noopener noreferrer","aria-label":"Offsite link: opens in new window",className:"offsite-link",title:"Offsite link: opens in a new window"},t)}},221:function(e,t,n){"use strict";var a=n(0),o=n.n(a),i=n(224),s=n.n(i);n(18);var r=n(217);function c(e){var t,n=e.code,i=void 0===n?"":n,c=e.imports,l=void 0===c?"":c,p=e.requires,m=void 0===p?"":p,b=e.theme,d=void 0===b?"light":b,g=e.warn,u=void 0===g?function(){return null}:g,h=Object(a.useState)(!1),O=h[0],j=h[1];return Object(a.useEffect)(function(){var e=setInterval(function(){j(Boolean(window)&&Boolean(window.RunKit))},1e3);return O&&clearInterval(e),function(){return clearInterval(e)}},[]),O?o.a.createElement("div",{className:"code-block"},u(),o.a.createElement(s.a,{source:""+m+(t=i,t.replace(/import (.+) from '(.+)'/g,function(e,t,n){return"// "+e+"\nconst "+t+" = require('"+n+"') // runkit don't import!"})),nodeVersion:"12",theme:"solarized-"+d})):o.a.createElement(r.a,{code:""+l+i,theme:d,warn:u})}n.d(t,"a",function(){return c})}}]);
//# sourceMappingURL=component---src-pages-cypress-index-mdx-699d42555b7ab812feb5.js.map