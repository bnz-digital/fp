{"version":3,"sources":["webpack:///./src/runkits/inductive/bad-loop.js","webpack:///./src/runkits/inductive/js-adjust.js","webpack:///./src/runkits/inductive/js-adjust-curried.js","webpack:///./src/runkits/inductive/js-all.js","webpack:///./src/runkits/inductive/js-any.js","webpack:///./src/runkits/inductive/js-append.js","webpack:///./src/runkits/inductive/js-bad-foreach.js","webpack:///./src/runkits/inductive/js-concat.js","webpack:///./src/runkits/inductive/js-filter.js","webpack:///./src/runkits/inductive/js-flatten.js","webpack:///./src/runkits/inductive/js-head-tail.js","webpack:///./src/runkits/inductive/js-insert.js","webpack:///./src/runkits/inductive/js-map-with-guard.js","webpack:///./src/runkits/inductive/js-map-squares.js","webpack:///./src/runkits/inductive/js-map-to-upper.js","webpack:///./src/runkits/inductive/js-none.js","webpack:///./src/runkits/inductive/js-prepend.js","webpack:///./src/runkits/inductive/js-reduce-as-map.js","webpack:///./src/runkits/inductive/js-reduce-over-object.js","webpack:///./src/runkits/inductive/js-reduce-sum.js","webpack:///./src/runkits/inductive/js-reduce-string-to-upper.js","webpack:///./src/runkits/inductive/js-remove.js","webpack:///./src/runkits/inductive/js-times.js","webpack:///./src/runkits/inductive/js-unnest.js","webpack:///./src/runkits/inductive/js-vadjust.js","webpack:///./src/runkits/inductive/js-zip.js","webpack:///./src/runkits/inductive/less-bad-loop.js","webpack:///./src/runkits/inductive/less-bad-loop-fixed.js","webpack:///./src/runkits/inductive/non-tail.js","webpack:///./src/runkits/inductive/recursive-squares.js","webpack:///./src/runkits/inductive/recursive-sum-logged.js","webpack:///./src/pages/inductive/iteration/index.mdx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/SEO/index.js","webpack:///./src/components/Header/index.js","webpack:///./src/components/Layout/index.js","webpack:///./src/components/Link/index.js","webpack:///./src/components/Highlighter/index.js","webpack:///./src/components/TrailSeparator/index.js","webpack:///./src/components/BreadcrumbTrail/index.js","webpack:///./src/components/PageLayout/index.js","webpack:///./src/components/OffsiteLink/index.js","webpack:///./src/components/CodeBlock/index.js","webpack:///./src/components/TerminologyBlock/index.js","webpack:///./src/runkits/inductive/recursive-sum.js"],"names":["bad_loop","code","imports","requires","js_adjust","js_adjust_curried","js_all","js_any","js_append","js_bad_foreach","js_concat","js_filter","js_flatten","js_head_tail","js_insert","js_map_with_guard","js_map_squares","js_map_to_upper","js_none","js_prepend","js_reduce_as_map","js_reduce_over_object","js_reduce_sum","js_reduce_string_to_upper","js_remove","js_times","js_unnest","js_vadjust","js_zip","less_bad_loop","less_bad_loop_fixed","non_tail","recursive_squares","recursive_sum_logged","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","Object","index_es","assign","mdxType","parentName","className","CodeBlock","badLoopSource","theme","warn","Highlighter","showLineNumbers","lessBadLoopSource","lessBadLoopFixedSource","id","TerminologyBlock","OffsiteLink","href","recursiveSumSource","nonTailSource","startingLineNumber","recursiveSumLoggedSource","recursiveSquaresSource","jsMapSquaresSource","jsMapToUpperSource","jsMapWithGuardSource","jsReduceSumSource","jsReduceStringToUpperSource","jsReduceOverObjectSource","jsReduceAsMapSource","jsFilterSource","jsAdjustSource","jsAdjustCurriedSource","jsVadjustSource","jsAppendSource","jsPrependSource","jsInsertSource","jsRemoveSource","jsConcatSource","jsZipSource","jsTimesSource","jsHeadTailSource","Link","to","aria-label","jsAllSource","jsAnySource","jsNoneSource","jsFlattenSource","jsUnnestSource","jsBadForeachSource","isMDXComponent","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","a","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","_objectSpread","json","SEO","lang","title","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","siteMetadata","src","data-element-id","defaultProps","meta","description","DefaultLinks","react_default","Fragment","gatsby_browser_entry","style","color","textDecoration","textTransform","display","padding","InductiveLinks","DeductiveLinks","NavLinks","pathname","split","Header","_ref2","siteTitle","backgroundColour","getColour","background","marginBottom","alignItems","margin","maxWidth","flexGrow","flexShrink","HeaderWrapper","es","locationProps","Header_Header","Layout","children","_856328897","paddingTop","pattern","makeOnClick","navigate","test","react__WEBPACK_IMPORTED_MODULE_6___default","onClick","gatsby__WEBPACK_IMPORTED_MODULE_5__","react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_1__","react_syntax_highlighter_dist_esm_styles_hljs__WEBPACK_IMPORTED_MODULE_2__","react_syntax_highlighter_dist_esm_styles_hljs__WEBPACK_IMPORTED_MODULE_3__","_ref$code","_ref$language","language","_ref$showLineNumbers","_ref$startingLineNumb","_ref$theme","_ref$warn","solarizedLight","solarizedDark","TrailSeparator","BreadcrumbTrail","trail","undefined","map","label","react","key","getCrumbs","PageLayout","_pageContext$frontmat","pageContext","frontmatter","target","rel","react_runkit__WEBPACK_IMPORTED_MODULE_1__","react_runkit__WEBPACK_IMPORTED_MODULE_1___default","_Highlighter__WEBPACK_IMPORTED_MODULE_2__","_ref$imports","_ref$requires","_useState","useState","show","setShow","useEffect","interval","setInterval","Boolean","window","RunKit","clearInterval","source","nodeVersion","open","setState","cursor"],"mappings":"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","file":"component---src-pages-inductive-iteration-index-mdx-78df697b1de57ed8b2ba.js","sourcesContent":["const code = `// JUST DON'T DO THIS!\nconst nums = [1, 2, 3, 4, 5]\nconst len = nums.length\n\nlet sum = 0 // DON'T DO THIS!\n\nfor (let i = 0; i < len; i++) {\n  sum += nums[i] // Sum is a mutant!\n}\n\nconsole.log(\\`The sum is \\${sum}\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { adjust } = require('ramda')\n\nconst names = [\n  'Bob', 'Carole', 'Ted', 'Alice', 'Samson', 'Delilah'\n]\n\n// Vanilla JS: let's create our own function\nfunction vadjust (index, f, arr) {\n  return [\n    ...arr.slice(0, index),\n    f(arr[index]),\n    ...arr.slice(index + 1)\n  ]\n}\n\nconst vjsUpdatedNames = vadjust(1, () => 'Carol', names)\n\n// Ramda's adjust\nconst ramdaUpdatedNames = adjust(1, () => 'Carol', names)\n\nconsole.log('Update Carole to Carol by vanilla JS:', vjsUpdatedNames)\nconsole.log('Update Carole to Carol by Ramda\\\\'s adjust:', ramdaUpdatedNames)\nconsole.log('The original list is unchanged:', names)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { adjust, toUpper } = require('ramda')\n\nconst upcaseThirdElement = adjust(2, toUpper)\n\nconst names = [\n  'Bob', 'Carole', 'Ted', 'Alice', 'Samson', 'Delilah'\n]\n\nconst colours = [\n  'red', 'yellow', 'green', 'cyan', 'blue', 'magenta'\n]\n\nconsole.log('Uppercase the third name:', upcaseThirdElement(names))\nconsole.log('Uppercase the third colour:', upcaseThirdElement(colours))\nconsole.log('The original lists are unchanged:', names, colours)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { all } = require('ramda')\n\nconst tests = ['Bob', 'Sally', 'Samuel', 'Ruth']\n\n// Vanilla JS\nconsole.log('tests.every(name => name.length > 1)', tests.every(name => name.length > 1))\nconsole.log('tests.every(name => name.length > 4)', tests.every(name => name.length > 4))\n\n// Ramda\nconsole.log('all(name => name.length > 1, tests)', all(name => name.length > 1, tests))\nconsole.log('all(name => name.length > 4, tests)', all(name => name.length > 4, tests))\n`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { any } = require('ramda')\n\nconst tests = ['Bob', 'Sally', 'Samuel', 'Ruth']\n\n// Vanilla JS\nconsole.log('tests.some(name => name.length > 4)', tests.some(name => name.length > 4))\nconsole.log('tests.some(name => name.length > 10)', tests.some(name => name.length > 10))\n\n// Ramda\nconsole.log('any(name => name.length > 4, tests)', any(name => name.length > 4, tests))\nconsole.log('any(name => name.length > 10, tests)', any(name => name.length > 10, tests))\n`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { append } = require('ramda')\n\nconst nums = [1, 2, 3]\n\n// Vanilla\nconst vjsManual = [...nums, 4]\n\n// Our own append function\nconst vappend = (x, arr) => ([...arr, x])\n\nconst vjsAppend = vappend(4, nums)\n\n// Ramda\nconst ramdaAppend = append(4, nums)\n\nconsole.log('[...nums, 4]:', vjsManual)\nconsole.log('vappend(4, nums):', vjsAppend)\nconsole.log('append(4, nums):', ramdaAppend)\nconsole.log('nums is unchanged:', nums)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `// EVIL! PURE EVIL!\n// forEach is used only for side effects\n\nconst output = ['a', 'b', 'c'].forEach(\n  (value, index, array) => {\n    console.log(\\`The value is \\${value}\\`)\n    console.log(\\`The index is \\${index}\\`)\n    console.log(\\`The array is [\\${array}]\\`)\n  }\n)\n\n// How can forEach do anything if the result is undefined?\n// Only by side effects. Ugh.\nconsole.log(\\`The output of Array.forEach is \\${output}\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { concat } = require('ramda')\n\nconst things = ['a', 'b', 'c']\nconst moreThings = ['d', 'e']\nconst andMore = ['f', 'g']\n\n// Ramda's concat is easy peasy\nconsole.log('concat(things, moreThings)', concat(things, moreThings))\n\n// concat only takes two parameters\nconsole.log('concat(moreThings, things, andMore)', concat(moreThings, things, andMore))\n\n// The vanilla JS Array.concat is a bit trickier as you need to call\n// it on one of the arrays: it is a method, after all\n// But at least it RETURNS A COPY!\nconsole.log('things.concat(moreThings)', things.concat(moreThings))\nconsole.log('moreThings.concat(things)', moreThings.concat(things))\n\n// The Array.concat method takes any number of arrays\nconsole.log('things.concat(moreThings, andMore)', things.concat(moreThings, andMore))\n\n// But we can easily create our own in vanilla JS\nconst vjsConcat = (left, right) => ([...left, ...right])\nconsole.log('vjsConcat(things, moreThings)', vjsConcat(things, moreThings))\nconsole.log('vjsConcat(moreThings, things, andMore)', vjsConcat(moreThings, things, andMore))\n\n// Or make one that takes any number of arrays\nconst superConcat = (x, ...xs) => xs.length < 1\n  ? x\n  : [...x, ...superConcat(...xs)]\n\nconsole.log('superConcat(things, moreThings, andMore)')\nsuperConcat(things, moreThings, andMore)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { filter } = require('ramda')\n\nconst names = [\n  'Bob', 'Carol', 'Ted', 'Alice', 'Samson', 'Delilah'\n]\n\n// Vanilla JS:\nconst vjsLongNames = names.filter(s => s.length > 4)\n\n// Ramda:\nconst ramdaLongNames = filter(s => s.length > 4, names)\n\nconsole.log('The longer names by Array.filter:', vjsLongNames)\nconsole.log('The longer names by Ramda\\\\'s filter:', ramdaLongNames)\nconsole.log('The original list is unchanged:', names)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { flatten, unnest } = require('ramda')\n\nconst nested = [[1, 2, 3], [4, 5], [6, 7, 8]]\nconst deeplyNested = [1, [2, [3, [4, [5, [6]]]]]]\n\n// Ramda flatten does so recursively\nconsole.log('flatten(nested)', flatten(nested))\nconsole.log('flatten(deeplyNested)', flatten(deeplyNested))\n\n// Ramda unnest flattens just one level deep\nconsole.log('unnest(nested)', unnest(nested))\nconsole.log('unnest(deeplyNested)', unnest(deeplyNested))\n\n// Vanilla JS flatMap workes like unnest\nconsole.log('nested.flatMap(n => n)', nested.flatMap(n => n))\nconsole.log('deeplyNested.flatMap(n => n)', deeplyNested.flatMap(n => n))\n\n// Vanilla JS flat works a bit like unnest, but it can specify the\n// levels of nesting to flatten\nconsole.log('deeplyNested.flat(3)', deeplyNested.flat(3))\nconsole.log('deeplyNested.flat(5)', deeplyNested.flat(5))\n\nconsole.log('deeplyNested remains unchanged:', deeplyNested)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { head, tail } = require('ramda')\n\nconst nums = [1, 2, 3, 4, 5]\n\n// In vanilla JS we can use Array.slice to get the head and tail:\nconst x = nums[0]\nconst xs = nums.slice(1)\n\nconsole.log(\\`x is \\${x}\\`)\nconsole.log(\\`xs is \\${JSON.stringify(xs)}\\`)\nconsole.log('nums is unchanged:', nums)\n\n// We can also use destructuring, which is often easier and clearer\nconst [y, ...ys] = nums\n\nconsole.log(\\`y is \\${y}\\`)\nconsole.log(\\`ys is \\${JSON.stringify(ys)}\\`)\nconsole.log('nums is unchanged:', nums)\n\n// Look what happens with an empty list:\nconst [z, ...zs] = []\n\nconsole.log(\\`z (the head of []) is \\${z}\\`)\nconsole.log(\\`zs (the tail of []) is \\${JSON.stringify(zs)}\\`)\n\n// Ramda also offers head and tail functions\nconst r = head(nums)\nconst rs = tail(nums)\n\nconsole.log(\\`r is \\${r}\\`)\nconsole.log(\\`rs is \\${JSON.stringify(rs)}\\`)\nconsole.log('nums is unchanged:', nums)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { insert } = require('ramda')\n\nconst names = [\n  'Bob', 'Carol', 'Ted', 'Samson', 'Delilah'\n]\n\n// Ramda returns a copy\nconsole.log('insert(3, \\\\'Alice\\\\', names)', insert(3, 'Alice', names))\nconsole.log('names is unchanged:', names)\n\n// Splice mutates in place: DO NOT DO THIS!\nconsole.log('splice returns []', names.splice(3, 0, 'George'))\nconsole.log('But names has been mutated!', names)\n\n// Let's remove George\n// Does this look intuitive to you?\nnames.splice(3, 1)\n\n// Best method with vanilla JS\nconst vjsInsert = (index, item, list) =>\n  index > -1 && index < list.length\n    ? [\n        ...list.slice(0, index),\n        item,\n        ...list.slice(index)\n      ]\n    : [...list, item]\n\nconsole.log('Vanilla JS: vjsInsert(3, \\\\'Alice\\\\', names)', vjsInsert(3, 'Alice', names))\nconsole.log('Out of bounds appends, same as Ramda insert (try it):')\nconsole.log('vjsInsert(-1, \\\\'Alice\\\\', names)', vjsInsert(-1, 'Alice', names))\nconsole.log('vjsInsert(7, \\\\'Alice\\\\', names)', vjsInsert(7, 'Alice', names))\nconsole.log('names unchanged:', names)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { map, toUpper } = require('ramda')\n\nconst colours = ['red', 'green', 'blue']\n\n// Uppercase e's if length > 4\nconst longWordBigE = s => s.length > 4 ? s.replace(/e/g, 'E') : s\n\n// Vanilla JS\nconst vjsUppers = colours.map(longWordBigE)\n\n// The purely functional way with Ramda: pass the array\nconst ramdaUppers = map(longWordBigE, colours)\n\nconsole.log(\\`The uppercased colours by Array.map: [\\${vjsUppers}]\\`)\nconsole.log(\\`The uppercased colours by Ramda's map: [\\${ramdaUppers}]\\`)\nconsole.log(\\`Remember, the original array is unchanged: [\\${colours}]\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `// Sadly, runkit does not support import yet\nconst { map } = require('ramda') // The old-fashioned way\n\nconst nums = [1, 2, 3, 4, 5]\n\n// Vanilla JS: map as a method on array\nconst vjsSquares = nums.map(x => x * x)\n\n// The purely functional way with Ramda: pass the array\nconst ramdaSquares = map(x => x * x, nums)\n\nconsole.log(\\`The squares by Array.map: \\${JSON.stringify(vjsSquares)}\\`)\nconsole.log(\\`The squares by Ramda's map: \\${JSON.stringify(ramdaSquares)}\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { map, toUpper } = require('ramda')\n\nconst colours = ['red', 'green', 'blue']\n\n// Vanilla JS\nconst vjsUppers = colours.map(s => s.toUpperCase())\n\n// The purely functional way with Ramda: pass the array\nconst ramdaUppers = map(toUpper, colours)\n\nconsole.log(\\`The uppercased colours by Array.map: [\\${vjsUppers}]\\`)\nconsole.log(\\`The uppercased colours by Ramda's map: [\\${ramdaUppers}]\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { none } = require('ramda')\n\nconst tests = ['Bob', 'Sally', 'Samuel', 'Ruth']\n\n// Vanilla JS\nconsole.log('tests.every(name => name.length <= 1)', tests.every(name => name.length <= 1))\nconsole.log('tests.every(name => name.length <= 4)', tests.every(name => name.length <= 4))\n\n// Or perhaps more clearly\nconsole.log('tests.every(name => !(name.length > 4))', tests.every(name => !(name.length > 4)))\nconsole.log('tests.every(name => !(name.length > 10))', tests.every(name => !(name.length > 10)))\n\n// Ramda\nconsole.log('none(name => name.length > 4, tests)', none(name => name.length > 4, tests))\nconsole.log('none(name => name.length > 10, tests)', none(name => name.length > 10, tests))\n`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { prepend } = require('ramda')\n\nconst nums = [1, 2, 3]\n\n// Vanilla\nconst vjsManual = [0, ...nums]\n\n// Our own prepend function\nconst vprepend = (x, arr) => ([x, ...arr])\n\nconst vjsAppend = vprepend(0, nums)\n\n// Ramda\nconst ramdaAppend = prepend(0, nums)\n\nconsole.log('[0, ...nums]:', vjsManual)\nconsole.log('vprepend(0, nums):', vjsAppend)\nconsole.log('prepend(0, nums):', ramdaAppend)\nconsole.log('nums is unchanged:', nums)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { map, reduce } = require('ramda')\n\n// As with map, we take a function and an array to apply it to\nconst reduceMap = (f, arr) => reduce(\n  (acc, v) => ([...acc, f(v)]),  // Apply the function to each item in turn\n  [],                            // Start with an empty new array\n  arr                            // Loop through the original array\n)\n\nconst nums = [1, 2, 3, 4, 5]\n\nconst oldSquares = map(x => x * x, nums)\nconst squares = reduceMap(x => x * x, nums) // Works the same way\n\nconsole.log('The squares using map:', oldSquares)\nconsole.log('The squares using our reduceMap:', squares)\nconsole.log('And nums remains unchanged:', nums)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { keys, reduce, toUpper } = require('ramda')\n\n// Takes same three parameters as reduce, but last is an object\nconst reduceOverObject = (f, acc, obj) => reduce(\n  (a, key) => f(a, key, obj[key]), // function passed gets value as third parameter\n  acc,\n  keys(obj)\n)\n\nconst bob = {\n  name: 'Bob',\n  age: 'indeterminate',\n  iq: 180,\n  speaksFrench: true\n}\n\n// Now takes the value as a third parameter\nconst upcaseStrings = (acc, key, value) => ({\n  ...acc,                          // copy current accumulator\n  [key]: typeof value === 'string' // add this key-value pair\n    ? toUpper(value)               // uppercase if string\n    : value                        // otherwise, pass unchanged\n})\n\nconst upcased = reduceOverObject(upcaseStrings, {}, bob)\n\nconsole.log('Ramda result:', upcased)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { add, reduce } = require('ramda') // add(1, 2) returns 3\n\nconst nums = [1, 2, 3, 4, 5]\n\n// Vanilla JS\nconst vjsSum = nums.reduce(add, 0)\n\n// Ramda\nconst ramdaSum = reduce(add, 0, nums)\n\nconsole.log(\\`The Array.reduce sum is \\${vjsSum}\\`)\nconsole.log(\\`The Ramda reduce sum is \\${ramdaSum}\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { keys, reduce, toUpper } = require('ramda')\n\nconst bob = {\n  name: 'Bob',\n  age: 'indeterminate',\n  iq: 180,\n  speaksFrench: true\n}\n\nconst upcaseStrings = (acc, key) => {\n  const value = bob[key]\n  \n  return {\n    ...acc,                          // copy current accumulator\n    [key]: typeof value === 'string' // add this key-value pair\n      ? toUpper(value)               // uppercase if string\n      : value                        // otherwise, pass unchanged\n  }\n}\n\nconst vjsUpcase = Object.keys(bob).reduce(upcaseStrings, {})\n\nconst ramdaUpcase = reduce(upcaseStrings, {}, keys(bob))\n\nconsole.log('Vanilla JS result:', vjsUpcase)\nconsole.log('Ramda result:', ramdaUpcase)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { remove } = require('ramda')\n\nconst names = [\n  'Bob', 'Carol', 'Ted', 'Alice', 'Samson', 'Delilah'\n]\n\n// Ramda returns a copy\nconsole.log('remove(4, 1, names) removes Samson', remove(4, 1, names))\nconsole.log('names is unchanged:', names)\nconsole.log('remove(4, 2, names) removes Samson and Delilah', remove(4, 2, names))\n\n// Splice mutates in place: DO NOT DO THIS!\nconsole.log('splice returns an array of the removed items:', names.splice(4, 1))\nconsole.log('But names has been mutated!', names)\n\n// Let's reinsert Samson\n// Does this look intuitive to you?\nnames.splice(4, 0, 'Samson')\n\n// Best method with vanilla JS\nconst vjsRemove = (index, len, list) =>\n  index > -1 && index < list.length\n    ? [\n        ...list.slice(0, index),\n        ...list.slice(index + len)\n      ]\n    : [...list]\n\nconsole.log('Vanilla JS: vjsRemove(4, 1, names)', vjsRemove(4, 1, names))\nconsole.log('Out of bounds does nothing, same as Ramda remove (try it):')\nconsole.log('vjsRemove(-1, 1, names)', vjsRemove(-1, 1, names))\nconsole.log('vjsRemove(7, 1, names)', vjsRemove(7, 1, names))\nconsole.log('names unchanged:', names)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { identity, times } = require('ramda')\n\n// Ramda's times takes a function and a number n\n// Calls the function n times passing it 0, 1, 2, etc. (the index)\n// identity is equivalent to x => x\nconsole.log('times(identity, 5)', times(identity, 5))\nconsole.log('times(n => (n + 1) * (n + 1), 5)', times(n => (n + 1) * (n + 1), 5))\nconsole.log(\\`times(() => '', 3)\\`, times(() => '', 3))\nconsole.log('times(n => n.toString(2), 12)', times(n => n.toString(2), 12))\n\n// In vanilla JS, we can use the new keyword to instantiate an array and pass a length\nconsole.log('new Array(5) has undefined values:', new Array(5))\nconsole.log('new Array(5).map((_, i) => i) does not work:', new Array(5).map((_, i) => i))\nconsole.log(\\`new Array(5).fill('').map((_, i) => i) works:\\`, new Array(5).fill('').map((_, i) => i))\n`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { curry } = require('ramda')\n\nconst nested = [[1, 2, 3], [4, 5], [6, 7, 8]]\nconst deeplyNested = [1, [2, [3, [4, [5, [6]]]]]]\n\nconst unnest = curry((n, list) => list.flat(n))\n\nconsole.log('unnest(3, deeplyNested)', unnest(3, deeplyNested))\nconsole.log('unnest(5, deeplyNested)', unnest(5, deeplyNested))\n\nconst unnestTwoLevels = unnest(2)\nconsole.log('unnestTwoLevels(deeplyNested)', unnestTwoLevels(deeplyNested))`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `function adjust (...args) {\n  // If not all arguments supplied...\n  if (args.length < 3) {\n    // Return a function that remembers the current arguments,\n    // takes more arguments, and calls adjust again with both\n    return (...newArgs) => adjust(...args, ...newArgs)\n  }\n  \n  // Once we have all three arguments, destructure them\n  const [index, f, arr] = args\n  \n  // If the index is out of bounds, return the array unchanged\n  if (index >= arr.length || index < -arr.length ) {\n    return arr\n  }\n  \n  return [\n    ...arr.slice(0, index),     // Get the elements before the index\n    f(...arr.slice(index)),     // Apply the function to the element at index\n    ...(\n      index === -1\n        ? []                    // Handle the special case of -1\n        : arr.slice(index + 1)) // Get the remaining elements, if any\n  ]\n}\n\nconst data = [0, 1, 2, 3, 4]\n\n// We can apply arguments in any increments\nconsole.log('adjust(2)(String)(data)', adjust(2)(String)(data))\nconsole.log('adjust(2, String)(data)', adjust(2, String)(data))\nconsole.log('adjust(2, String, data)', adjust(2, String, data))\nconsole.log('adjust(2)(String, data)', adjust(2)(String, data))\n\n// Calling with no arguments returns the function unchanged\nconsole.log('adjust()()(2)()(String)()()(data)', adjust()()(2)()(String)()()(data))\n\n// It works at different indexes\nconsole.log('adjust(3, String, data)', adjust(3, String, data))\nconsole.log('adjust(0, String, data)', adjust(0, String, data))\nconsole.log('adjust(4, String, data)', adjust(4, String, data))\n\n// It works with negative indexes\nconsole.log('adjust(-1, String, data)', adjust(-1, String, data))\nconsole.log('adjust(-4, String, data)', adjust(-4, String, data))\n\nconst adjustLast = adjust(-1)\nconst addTenToLast = adjustLast(x => x + 10)\n\nconsole.log('addTenToLast(data)', addTenToLast(data))`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const { zip } = require('ramda')\n\nconst digits = [1, 2, 3, 4, 5, 6]\nconst numerals = [\n  'one', 'two', 'three', 'four', 'five'\n]\n\n// Ramda's zip zips while elements exist in both arrays and drops extras\nconsole.log('zip(digits, numerals)', zip(digits, numerals))\nconsole.log('zip(numerals, digits)', zip(numerals, digits))\n\n// Implementing this is vanilla JS is no mean feat\n// Behold the power of reduce!\nconst vjsZip = (left, right) => left.reduce(\n  (acc, val, idx) => right[idx]    // If there is an equivalent element in right\n    ? [...acc, [val, right[idx]]]  // zip left and right together\n    : acc,                         // else return the accumulator unchanged\n  []\n)\n\nconsole.log('vjsZip(digits, numerals)', vjsZip(digits, numerals))\n\nconsole.log('vjsZip(numerals, digits)')\nvjsZip(numerals, digits)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `// DON'T DO THIS EITHER\nconst nums = [1, 2, 3, 4, 5]\nconst len = nums.length\n\nlet sum = 0 // Ugh\n\nfor (num in nums) {\n  sum += num // Sum is still a mutant!\n}\n\nconsole.log(\\`The sum is \\${sum}\\`) // Oh, look what happened here!`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `// DON'T DO THIS EITHER\nconst nums = [1, 2, 3, 4, 5]\nconst len = nums.length\n\nlet sum = 0 // Ugh\n\nfor (i in nums) {\n  // console.log(typeof i) // uncomment this for a surprise\n  sum += nums[i] // i is the INDEX -- ick!\n}\n\nconsole.log(\\`The sum is \\${sum}\\`) // Working, but definitely not intuitive`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `// Not the best way to go about this, usually\nfunction sum (nums = []) {\n  if (nums.length < 1) { return 0 }\n\n  const [head, ...tail] = nums\n\n  return head + sum(tail)\n}`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `function mapSquares (nums = [], accumulator = []) {\n  // When nums is empty, return the accumulated squares\n  if (nums.length < 1) { return accumulator }\n\n  // Get the head and tail\n  const [head, ...tail] = nums\n  \n  // Append the square of the head and call again with the tail\n  return mapSquares(tail, [...accumulator, head * head])\n}\n\nconsole.log(\\`[] mapped to its squares is \\${JSON.stringify(mapSquares([]))}\\`)\nconsole.log(\\`[5] mapped to its squares is \\${JSON.stringify(mapSquares([5]))}\\`)\nconsole.log(\\`[1,2,3] mapped to its squares is \\${JSON.stringify(mapSquares([1,2,3]))}\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `function sum (nums = [], total = 0) {\n  console.log(\\`total is \\${total}\\`)\n\n  if (nums.length < 1) {\n    console.log(\\`Returning the total of \\${total}\\`)\n    return total\n  }\n\n  const [head, ...tail] = nums\n\n  console.log(\\`head is \\${head} and tail is \\${JSON.stringify(tail)}\\`)\n\n  console.log(\\`Calling sum(\\${JSON.stringify(tail)}, \\${total + head})\\`, '')\n\n  return sum(tail, total + head)\n}\n\nconsole.log(\\`The sum of [1, 2, 3, 4, 5] is \\${sum([1, 2, 3, 4, 5])}\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/754368/Workspace/fp-tutorials/fp/src/components/PageLayout/index.js\";\nimport CodeBlock from '../../../components/CodeBlock';\nimport Highlighter from '../../../components/Highlighter';\nimport Link from '../../../components/Link';\nimport OffsiteLink from '../../../components/OffsiteLink';\nimport TerminologyBlock from '../../../components/TerminologyBlock';\nimport badLoopSource from '../../../runkits/inductive/bad-loop';\nimport jsAdjustSource from '../../../runkits/inductive/js-adjust';\nimport jsAdjustCurriedSource from '../../../runkits/inductive/js-adjust-curried';\nimport jsAllSource from '../../../runkits/inductive/js-all';\nimport jsAnySource from '../../../runkits/inductive/js-any';\nimport jsAppendSource from '../../../runkits/inductive/js-append';\nimport jsBadForeachSource from '../../../runkits/inductive/js-bad-foreach';\nimport jsConcatSource from '../../../runkits/inductive/js-concat';\nimport jsFilterSource from '../../../runkits/inductive/js-filter';\nimport jsFlattenSource from '../../../runkits/inductive/js-flatten';\nimport jsHeadTailSource from '../../../runkits/inductive/js-head-tail';\nimport jsInsertSource from '../../../runkits/inductive/js-insert';\nimport jsMapWithGuardSource from '../../../runkits/inductive/js-map-with-guard';\nimport jsMapSquaresSource from '../../../runkits/inductive/js-map-squares';\nimport jsMapToUpperSource from '../../../runkits/inductive/js-map-to-upper';\nimport jsNoneSource from '../../../runkits/inductive/js-none';\nimport jsPrependSource from '../../../runkits/inductive/js-prepend';\nimport jsReduceAsMapSource from '../../../runkits/inductive/js-reduce-as-map';\nimport jsReduceOverObjectSource from '../../../runkits/inductive/js-reduce-over-object';\nimport jsReduceSumSource from '../../../runkits/inductive/js-reduce-sum';\nimport jsReduceStringToUpperSource from '../../../runkits/inductive/js-reduce-string-to-upper';\nimport jsRemoveSource from '../../../runkits/inductive/js-remove';\nimport jsTimesSource from '../../../runkits/inductive/js-times';\nimport jsUnnestSource from '../../../runkits/inductive/js-unnest';\nimport jsVadjustSource from '../../../runkits/inductive/js-vadjust';\nimport jsZipSource from '../../../runkits/inductive/js-zip';\nimport lessBadLoopSource from '../../../runkits/inductive/less-bad-loop';\nimport lessBadLoopFixedSource from '../../../runkits/inductive/less-bad-loop-fixed';\nimport nonTailSource from '../../../runkits/inductive/non-tail';\nimport recursiveSquaresSource from '../../../runkits/inductive/recursive-squares';\nimport recursiveSumLoggedSource from '../../../runkits/inductive/recursive-sum-logged';\nimport recursiveSumSource from '../../../runkits/inductive/recursive-sum';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Loops are so last millennium!`}</h2>\n    <p>{`If you've done much programming, then you've almost certainly used looping constructs. JavaScript offers numerous ways to loop in an `}{`“`}{`imperative`}{`”`}{` manner (meaning you tell the code how to loop rather than just giving it a list of items and letting `}<em parentName=\"p\">{`it`}</em>{` decide how to loop):`}</p>\n    <ul>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`for`}</code>{`: repeat a code block a specified number of times`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`for/in`}</code>{`: repeat a code block for each of the properties of an object`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`for/of`}</code>{`: repeat  a code block for each values in an `}{`“`}{`iterable`}{`”`}{` object, such as an array`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`while`}</code>{`: repeat a block of code while a specified condition is true`}</li>\n      <li parentName=\"ul\"><code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`do/while`}</code>{`: same as while, but always applies the code block at least once`}</li>\n    </ul>\n    <p>{`If you think these are easy to use, then you're fooling yourself. You've just been using them so long that you've forgotten how confusing they were the first time you saw them. Consider the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`for`}</code>{` loop:`}</p>\n    <CodeBlock {...badLoopSource} theme='dark' warn={() => <small>No variables were harmed in the making of this code.</small>} mdxType=\"CodeBlock\" />\n    <p>{`Easy, right?`}</p>\n    <p>{`Don't be absurd. There is `}<em parentName=\"p\">{`nothing`}</em>{` easy about this. Let's look at it a bit more carefully.`}</p>\n    <p>{`First, what on Earth could this possibly mean?`}</p>\n    <Highlighter code={`(let i = 0; i < len; i++)`} showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`OK, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`let i = 0;`}</code>{` is obvious enough: we're setting a local, mutable variable to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`0`}</code>{`. By why `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`i`}</code>{`? Unless you've been `}<em parentName=\"p\">{`taught`}</em>{` how this works, it's not obvious that `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`i`}</code>{` is an `}<em parentName=\"p\">{`index`}</em>{`, or that we'll be incrementing it.`}</p>\n    <p>{`So what is this `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`i < len;`}</code>{`? A conditional, obviously, and we can see that `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`len`}</code>{` is `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`5`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`i`}</code>{` is `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`0`}</code>{`, so `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`i < len`}</code>{` is obviously `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`true`}</code>{`, but so what? What does that do?`}</p>\n    <p>{`And then there is this mystifying `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`i++`}</code>{`. Again, you have to be `}<em parentName=\"p\">{`taught`}</em>{` (and then memorise) that `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`++`}</code>{` is the `}<strong parentName=\"p\">{`increment operator`}</strong>{` and that here it is applied to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`i`}</code>{` in the `}<strong parentName=\"p\">{`postfix`}</strong>{` position, which would normally mean that we would use the value `}<em parentName=\"p\">{`first`}</em>{`, and then increment it.`}</p>\n    <p>{`But the truth is that in the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`for`}</code>{` loop this increment is not applied until `}<em parentName=\"p\">{`after`}</em>{` the loop has run, and then is applied `}<em parentName=\"p\">{`before`}</em>{` the next iteration of the loop. So despite that nearly `}<em parentName=\"p\">{`everyone`}</em>{` who writes `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`for`}</code>{` loops uses `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`i++`}</code>{`, it really should be `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`++i`}</code>{`—`}{`and that will also work (try it).`}</p>\n    <p>{`Wait! Both `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`++i`}</code>{` `}<em parentName=\"p\">{`and`}</em>{` `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`i++`}</code>{` `}<em parentName=\"p\">{`both`}</em>{` work? How does that make any sense at all?`}</p>\n    <p>{`Eventually, the new programmer figures out that `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`i < len;`}</code>{` is used to `}<em parentName=\"p\">{`stop`}</em>{` the loop. When this condition evaluates to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`false`}</code>{`, the loop stops running. This condition is checked before `}<em parentName=\"p\">{`every`}</em>{` application of the code block, so if I write `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`i > len;`}</code>{` the loop never runs at all (try it).`}</p>\n    <p>{`But if you're familiar with this loop, then you'll know that the most common mistake is to write `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`i <= len;`}</code>{`, which causes the loop to run an extra iteration (try it). This throws no error, but results in `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sum`}</code>{` being `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`NaN`}</code>{` no matter what we pass it. Not good.`}</p>\n    <p>{`So gnarly is the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`for`}</code>{` construct that later versions of JavaScript have introduced `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`for/in`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`for/of`}</code>{`. These simplify our loop, but again, you have to remember when to use `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`in`}</code>{` and when to use `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`of`}</code>{`, and this still ends up mutating a variable, though at least we don't have to worry about indexes:`}</p>\n    <CodeBlock {...lessBadLoopSource} theme='dark' warn={() => <small>The only thing necessary for the triumph of evil is for good men to do nothing.</small>} mdxType=\"CodeBlock\" />\n    <p>{`Ha, ha. Yeah. You thought that `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`for/in`}</code>{` would pass you each item in the array one at a time? Seems obvious, but think again. It passes the `}<em parentName=\"p\">{`index`}</em>{`. So we're back to indexes! Let's try that again:`}</p>\n    <CodeBlock {...lessBadLoopFixedSource} theme='dark' warn={() => <small>The greatest trick the Devil ever pulled was convincing the world he didn’t exist.</small>} mdxType=\"CodeBlock\" />\n    <p>{`Wondering why we ended up with `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`0012345`}</code>{` in the broken version of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`for/in`}</code>{` above? That's because for some difficult-to-grasp reason, the index is passed in as a `}<strong parentName=\"p\">{`string`}</strong>{`, so the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`+=`}</code>{` operator `}<em parentName=\"p\">{`concatenates`}</em>{` strings instead of adding numbers. WTF? Is this some kind of sick joke?`}</p>\n    <p>{`Here the TC-39 committee tried to make life easier for JavaScript coders and ended up making things `}<em parentName=\"p\">{`just that much `}<strong parentName=\"em\">{`less`}</strong>{` intuitive`}</em>{`.`}</p>\n    <p>{`The above constructs work, and you can `}<em parentName=\"p\">{`eventually`}</em>{` get reasonably proficient at them, but there is `}<strong parentName=\"p\">{`nothing intuitive`}</strong>{` about them and they are, truly, one of the `}<em parentName=\"p\">{`most difficult`}</em>{` things for new programmers to learn.`}</p>\n    <p>{`Surely, there is a better way! Step into the light...`}</p>\n    <h3 id='recusrive-functions'>Functions can call themselves! No, really!</h3>\n    <p>{`One simple way to handle looping through a set of items, such as an array of numbers, is to process each number in turn. We can use a function call to do this, and rather than putting our function in a loop, we can just pass it the list, have it take the `}{`“`}{`head`}{`”`}{` of the list, process it, and then `}<em parentName=\"p\">{`call itself again with the `}{`“`}{`tail`}{`”`}{` of the list`}</em>{`, which is just the rest of the list.`}</p>\n    <TerminologyBlock mdxType=\"TerminologyBlock\">In functional programming we work a lot with the <OffsiteLink href='https://en.wikipedia.org/wiki/List_(abstract_data_type)' mdxType=\"OffsiteLink\"><strong>list</strong></OffsiteLink> type. In JavaScript, we typically use the <code>Array</code> to mimic a list. It is particularly important when operating on lists to <OffsiteLink href='https://en.wikipedia.org/wiki/List_(abstract_data_type)#Operations' mdxType=\"OffsiteLink\">know your <strong>head</strong> from your <strong>tail</strong></OffsiteLink>, but then that's probably important in many areas of life&mdash;unless you're a politician.</TerminologyBlock>\n    <p>{`And we can continue this process until we run out of list elements. Then we will stop and return the fully processed list, whatever that looks like.`}</p>\n    <p>{`For example, let's take our `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sum`}</code>{` above. Adding a list of numbers together is the same as adding each number to the number after it and keeping a running total.`}</p>\n    <p>{`If you think about it, that's precisely what our loop above does. It creates a running total in a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sum`}</code>{` variable and initialises it to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`0`}</code>{`, then adds the numbers in the list to it sequentially until it exhausts the list. What's left is our final total.`}</p>\n    <p>{`We can do the same thing by creating a function that takes our list and our running total (which defaults to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`0`}</code>{`), gets first item from the list, adds it to the running total, and then `}<em parentName=\"p\">{`calls itself again on the rest of the list, passing it the current subtotal:`}</em></p>\n    <CodeBlock {...recursiveSumSource} mdxType=\"CodeBlock\" />\n    <p>{`That works. Of course, we could have written the function more simply this way:`}</p>\n    <Highlighter code={nonTailSource.code} mdxType=\"Highlighter\" />\n    <p>{`So why not do it that way? Well, let's see...`}</p>\n    <p>{`A minor benefit of having the running total as a parameter to the function is that we can set it to something other than zero. For example, we could add a list of numbers to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`100`}</code>{` instead of zero`}{`—`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sum([1, 4, 9, 16], 100)`}</code>{`—`}{`returning `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`130`}</code>{` instead of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`30`}</code>{`.`}</p>\n    <p>{`But a `}<strong parentName=\"p\">{`more important reason`}</strong>{` is found in line `}{`#`}{`7: `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`return head + sum(tail)`}</code>{`. By choosing to do it this way, we have to push our first function call `}<strong parentName=\"p\">{`onto the stack`}</strong>{` (in memory) and `}<em parentName=\"p\">{`wait for the second call to return`}</em>{` before we can return from the first. Then we have to push the second call onto the stack and wait for the third, etc.`}</p>\n    <p>{`If the list is 1000 items long, then we have to `}<strong parentName=\"p\">{`hold 999 calls on the stack`}</strong>{` waiting for that last call to return. That takes a lot of memory. But we can't do the addition`}{`—`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`head + sum(tail)`}</code>{`—`}{`until we know what `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sum(tail)`}</code>{` is, right? So we're stuck.`}</p>\n    <p>{`But if we do it like this:`}</p>\n    <Highlighter code={`return sum(tail, total + head)`} showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`Then we `}<em parentName=\"p\">{`know`}</em>{` what `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`tail`}</code>{` is and we `}<em parentName=\"p\">{`know`}</em>{` what `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`total + head`}</code>{` is `}<em parentName=\"p\">{`at the time of the function call`}</em>{`. So instead of pushing our function onto the stack and waiting for the second iteration to return, we can simply `}<strong parentName=\"p\">{`replace`}</strong>{` the first function call with the second, right?`}</p>\n    <p>{`Essentially, writing our function-that-calls-itself in this manner makes it work `}<em parentName=\"p\">{`exactly like a loop`}</em>{`. So it's as fast and uses as little memory, effectively. Now we get the benefits of the speed and efficiency of a loop without all the unintuitive looping constructs: the best of both worlds.`}</p>\n    <TerminologyBlock mdxType=\"TerminologyBlock\">This is called <OffsiteLink href='https://en.wikipedia.org/wiki/Tail_call' mdxType=\"OffsiteLink\">tail recursion</OffsiteLink> because the recursive call is the &ldquo;tail call&rdquo; of the function. Whenever you use recursion, it should <em>always</em> be tail recursion unless it is guaranteed to recurse only a very limited number of times.</TerminologyBlock>\n    <p>{`Looked at another way, the second example above`}{`—`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`return head + sum(tail)`}</code>{`—`}{`runs `}<em parentName=\"p\">{`nested`}</em>{`:`}</p>\n    <Highlighter code={`sum([1, 2, 3, 4, 5]) === 1 + (\\n  2 + (\\n    3 + (\\n      4 + (\\n        5 + (\\n          0\\n        )\\n      )\\n    )\\n  )\\n)`} mdxType=\"Highlighter\" />\n    <p>{`Which means it actually adds the list from last to first: `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`0 + 5 + 4 + 3 + 2 + 1`}</code>{`. This is because it has to unwind the stack, returning from each inner call before it can return from the outer call that wraps it.`}</p>\n    <p>{`The first example above`}{`—`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`return sum(tail, total + head)`}</code>{`—`}{`just makes successive calls to the same function:`}</p>\n    <Highlighter code={`sum([1, 2, 3, 4, 5]) // replaced by\\nsum([2, 3, 4, 5], 1) // replaced by\\nsum([3, 4, 5], 3)    // replaced by\\nsum([4, 5], 6)       // replaced by\\nsum([5], 10)         // returns 15`} mdxType=\"Highlighter\" />\n    <p>{`So this version adds in the order you'd expect: `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`0 + 1 + 2 + 3 + 4 + 5`}</code>{`. Each call completes by making the next call, so the calls can replace each other on the stack. There's nothing to unwind. When the last call returns, that's our expected value.`}</p>\n    <p><strong parentName=\"p\">{`Each of the three lines of our function block has a specific purpose`}</strong>{`.`}</p>\n    <p>{`For a function calling itself to work, we must observe two rules:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`We must have a `}<OffsiteLink href='https://en.wikipedia.org/wiki/Recursion#base_case' mdxType=\"OffsiteLink\">{`base case`}</OffsiteLink>{` where the function returns something `}<em parentName=\"li\">{`without`}</em>{` calling itself.`}</li>\n      <li parentName=\"ol\">{`Each time we call the function from within the function we must call it with `}<em parentName=\"li\">{`different`}</em>{` arguments, `}<em parentName=\"li\">{`and the arguments must approach the base case!`}</em></li>\n    </ol>\n    <p>{`Let's look at the lines one at a time:`}</p>\n    <Highlighter code={`if (nums.length < 1) { return total }`} startingLineNumber={2} mdxType=\"Highlighter\" />\n    <p>{`This is our `}{`“`}{`base case`}{`”`}{`. It tells our function when to `}<strong parentName=\"p\">{`stop`}</strong>{` calling itself. When there is nothing left in the array that we're passing to our function`}{`—`}{`i.e., the argument is the empty list`}{`—`}{`then we just return our running total. That stops the loop. It's essentially a `}<OffsiteLink href='https://en.wikipedia.org/wiki/Guard_(computer_science)' mdxType=\"OffsiteLink\">{`guard`}</OffsiteLink>{`.`}</p>\n    <Highlighter code={`const [head, ...tail] = nums`} startingLineNumber={4} mdxType=\"Highlighter\" />\n    <p>{`We are always going to operate on one element of the array at a time, so we'll need to lop the head off the array. When we next call the function, it will be on the remaining elements`}{`—`}{`the `}<strong parentName=\"p\">{`tail`}</strong>{`—`}{`so we need to hang on to those as well.`}</p>\n    <p>{`Recall that arrays are passed by `}{`“`}{`reference`}{`”`}{`, which means they are not copied in but merely pointed to. So we'll want to copy the tail and use the copy rather than mutating the original list. Destructuring and the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`...`}</code>{` (rest) syntax achieves that for us.`}</p>\n    <p>{`When we do:`}</p>\n    <Highlighter code={`const [head, ...tail] = [1, 2, 3, 4, 5]`} showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`Then:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`variable `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`head`}</code>{` has value `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`1`}</code></li>\n      <li parentName=\"ul\">{`variable `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`tail`}</code>{` has value `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`[2, 3, 4, 5]`}</code>{`.`}</li>\n    </ul>\n    <p>{`And these are new values in new variables. Our initial array remains unchanged.`}</p>\n    <p>{`Finally, we do the work in our third line of code:`}</p>\n    <Highlighter code={`return sum(tail, total + head)`} startingLineNumber={6} mdxType=\"Highlighter\" />\n    <p>{`First time through, our `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`total`}</code>{` defaulted to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`0`}</code>{`, so given the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`head`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`tail`}</code>{` above, this becomes:`}</p>\n    <Highlighter code={`return sum([2, 3, 4, 5], 0 + 1)`} showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`Watch it in action:`}</p>\n    <CodeBlock {...recursiveSumLoggedSource} mdxType=\"CodeBlock\" />\n    <p>{`As you can see, the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`total`}</code>{` accumulates the value of our running total. But we could `}{`“`}{`accumulate`}{`”`}{` anything, right?`}</p>\n    <p>{`Consider an example where we have an array of numbers and we want to convert it to an array of the `}<em parentName=\"p\">{`squares`}</em>{` of those numbers. In other words, we want to loop through the array squaring each element and returning a `}<em parentName=\"p\">{`new`}</em>{` array of the squares. Easy!`}</p>\n    <CodeBlock {...recursiveSquaresSource} mdxType=\"CodeBlock\" />\n    <p>{`Passing an accumulator makes it possible to do almost `}<em parentName=\"p\">{`anything`}</em>{` a loop can do by simply writing a function that calls itself.`}</p>\n    <p>{`Writing functions that call themselves is easy and fun, but functional JavaScript is all about `}<strong parentName=\"p\">{`reusability`}</strong>{`. It doesn't take writing too many functions like the ones above to start to see certain patterns emerging.`}</p>\n    <p>{`When we wrote our `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sum`}</code>{` function, we took a list of items and reduced it down to a single item. We can write a function called `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{` that takes a list of items and reduces it to a single output. We just need three things:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The code block that will be executed each time the function runs`}</li>\n      <li parentName=\"ol\">{`The starting value of our accumulator (`}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`0`}</code>{` and `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`[]`}</code>{` respectively above)`}</li>\n      <li parentName=\"ol\">{`The list on which we'll operate (`}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`[1, 2, 3, 4, 5]`}</code>{` above)`}</li>\n    </ol>\n    <TerminologyBlock mdxType=\"TerminologyBlock\">The <code>reduce</code> function is common in functional programming and goes by many other names, the most common of which is <OffsiteLink href='https://en.wikipedia.org/wiki/Fold_(higher-order_function)' mdxType=\"OffsiteLink\">fold</OffsiteLink>. This is one of the most powerful functions in FP: one with which you should become intimately familiar.<br /><br />According to Wikipedia, &ldquo;Folds are in a sense dual to unfolds, which take a seed value and apply a function corecursively to decide how to progressively construct a corecursive data structure, whereas a fold recursively breaks that structure down, replacing it with the results of applying a combining function at each node on its terminal values and the recursive results (catamorphism, versus anamorphism of unfolds).&rdquo;<br /><br />I mean, could it be any easier? Am I right?</TerminologyBlock>\n    <p>{`But we want our `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{` function to be generic, so we'll want to pass it the code block. How do we pass code blocks around in functional JavaScript? `}<strong parentName=\"p\">{`Functions`}</strong>{`, of course. So our `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{` function will take:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A `}<strong parentName=\"li\">{`function`}</strong>{` to be applied to the accumulator and each item of the list in turn`}</li>\n      <li parentName=\"ol\">{`The starting accumulator`}</li>\n      <li parentName=\"ol\">{`The list of values`}</li>\n    </ol>\n    <p>{`And we can see that the function we provide as our first argument must:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Take as parameters:`}<ol parentName=\"li\">\n          <li parentName=\"ol\">{`The accumulator (running total) as an argument`}</li>\n          <li parentName=\"ol\">{`The head of the list as an argument`}</li>\n        </ol></li>\n      <li parentName=\"ul\">{`Return a `}<em parentName=\"li\">{`new`}</em>{` accumulator value, which will be used on the next call (e.g., `}<code parentName=\"li\" {...{\n          \"className\": \"language-text\"\n        }}>{`total + head`}</code>{`)`}</li>\n    </ul>\n    <p>{`For example, if we want to sum up a list of numbers, the function we pass to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{` might look like this:`}</p>\n    <Highlighter code={`(accumulator, value) => accumulator + value`} showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`When we `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`map`}</code>{` our list to the squares of the numbers, things get even simpler. We know we're just mapping from one array to another of equal size, right? So our starting accumulator is always `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[]`}</code>{`. We don't really need to pass it to our function as it never changes. Thus, we can create a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`map`}</code>{` function that:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Takes as parameters:`}<ol parentName=\"li\">\n          <li parentName=\"ol\">{`A function to apply to each item in a list`}</li>\n          <li parentName=\"ol\">{`A list of items to apply it to`}</li>\n        </ol></li>\n      <li parentName=\"ul\">{`Returns a `}<em parentName=\"li\">{`new`}</em>{` list of the results from passing the originals list's items through the function supplied`}</li>\n    </ul>\n    <p>{`Modern JavaScript provides functions such as `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`map`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{` (and many more) already implemented for you. You just need to supply the right arguments.`}</p>\n    <p>{`The built-in versions work in a very OO way: You call the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`map`}</code>{` `}<em parentName=\"p\">{`method`}</em>{` on the array (list) you want to map, pass it the function you want to apply to each item in turn, and it returns a `}<em parentName=\"p\">{`new`}</em>{` array of the results.`}</p>\n    <p>{`Similarly, you call the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{` method on the array you want to reduce in some way, pass it the function (that takes the accumulator and each item in turn and returns a new accumulator value), and pass it the starting accumulator. It returns the final accumulator value, whatever that is.`}</p>\n    <p><strong parentName=\"p\">{`But there is an even better way to do this functionally by pulling the methods out into their own functions, and passing the lists they operate on as an argument, rather than as the caller of a method.`}</strong></p>\n    <p>{`For this purpose, there are numerous libraries out there, the most popular of which is `}<OffsiteLink href='https://github.com/lodash/lodash/wiki/FP-Guide' mdxType=\"OffsiteLink\">{`Lodash`}</OffsiteLink>{`. (But only use the new `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`lodash/fp`}</code>{` module! The original module is broken.).`}</p>\n    <p>{`The `}<OffsiteLink href='https://ramdajs.com/' mdxType=\"OffsiteLink\">{`Ramda`}</OffsiteLink>{` library is much better, having been built (mostly) correctly from the getgo. The best, however, is `}<OffsiteLink href='https://sanctuary.js.org/' mdxType=\"OffsiteLink\">{`Sanctuary`}</OffsiteLink>{`, which is `}<OffsiteLink href='https://sanctuary.js.org/#overview' mdxType=\"OffsiteLink\">{`scrupulously correct`}</OffsiteLink>{`, but this also makes it difficult to use in production. There is no slack at all. You must be `}<em parentName=\"p\">{`meticulous`}</em>{`.`}</p>\n    <TerminologyBlock mdxType=\"TerminologyBlock\">Sanctuary uses the nefarious <OffsiteLink href='https://sanctuary.js.org/#maybe-type' mdxType=\"OffsiteLink\">Maybe</OffsiteLink> and <OffsiteLink href='https://sanctuary.js.org/#either-type' mdxType=\"OffsiteLink\">Either</OffsiteLink> <OffsiteLink href='https://en.wikipedia.org/wiki/Monad_(functional_programming)' mdxType=\"OffsiteLink\">monads</OffsiteLink>, which are wonderful but take some getting used to for sure. They explain why <OffsiteLink href='https://sanctuary.js.org/#overview' mdxType=\"OffsiteLink\">not even Ramda</OffsiteLink> meets their exacting standards (Lodash doesn't even warrant a mention).<br /><br />But for the hardcore...</TerminologyBlock>\n    <p>{`For most cases, Ramda is your best bet unless you are already committed to something else. Below we examine the most common functions/methods available and show how they can be used both in vanilla JavaScript and in Ramda.`}</p>\n    <p>{`(Note: While there is a Node framework called `}{`“`}{`VanillaJS`}{`”`}{` with `}<strong parentName=\"p\">{`no apparent sense of irony`}</strong>{`, what we mean here by vanilla JavaScript is JavaScript used `}<em parentName=\"p\">{`without`}</em>{` adding libraries or frameworks`}{`—`}{`using only the built-in functionality.)`}</p>\n    <p>{`(P.S. the `}<OffsiteLink href='https://ramdajs.com/repl/' mdxType=\"OffsiteLink\">{`Ramda REPL`}</OffsiteLink>{` is awesome. You can play with all this stuff in there, and all the Ramda functions are automagically imported. And you can `}<OffsiteLink href='https://ramdajs.com/repl/?v=0.26.1#?const%20nums%20%3D%20%5B1%2C%202%2C%203%2C%204%2C%205%5D%0A%0A%2F%2F%20Vanilla%20JS%3A%20map%20as%20a%20method%20on%20array%0Aconst%20vjsSquares%20%3D%20nums.map%28x%20%3D%3E%20x%20%2A%20x%29%0A%0A%2F%2F%20The%20purely%20functional%20way%20with%20Ramda%3A%20pass%20the%20array%0Aconst%20ramdaSquares%20%3D%20map%28x%20%3D%3E%20x%20%2A%20x%2C%20nums%29%0A%0Aconsole.log%28%60The%20squares%20by%20Array.map%3A%20%24%7BJSON.stringify%28vjsSquares%29%7D%60%29%0Aconsole.log%28%60The%20squares%20by%20Ramda%27s%20map%3A%20%24%7BJSON.stringify%28ramdaSquares%29%7D%60%29%0A' mdxType=\"OffsiteLink\">{`bookmark your examples`}</OffsiteLink>{`.)`}</p>\n    <h3 id='map'>Use <code>map</code> to modify each value in a list</h3>\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`map`}</code>{` method (or function) does exactly what our `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`map`}</code>{` method above does, except abstractly: we can supply any function we like and it will be applied to each item in the list in turn, returning a new list of the `}{`“`}{`mapped`}{`”`}{` items.`}</p>\n    <p>{`In other words, to get it to `}<em parentName=\"p\">{`square`}</em>{` each  of the numbers in our array, we need to pass it a squaring function: `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`x => x * x`}</code>{` will work:`}</p>\n    <CodeBlock {...jsMapSquaresSource} warn={() => <small>Look, ma! No loops!</small>} mdxType=\"CodeBlock\" />\n    <p>{`Both the built-in `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`map`}</code>{` method and Ramda's `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`map`}</code>{` function work the same, so why use the latter? We'll see advantages when we get to pipelining functions below.`}</p>\n    <p>{`If you're working on a small project and you can do it entirely in vanilla JS without importing a library such as Ramda, then maybe you should just use vanilla JS. But on most larger projects, you're going to need a library such as Ramda for many things, so you might as well use Ramda functions over the built in ones.`}</p>\n    <p>{`But more on that below. Let's take another example of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`map`}</code>{` before we move on:`}</p>\n    <CodeBlock {...jsMapToUpperSource} mdxType=\"CodeBlock\" />\n    <p>{`OK, one more:`}</p>\n    <CodeBlock {...jsMapWithGuardSource} mdxType=\"CodeBlock\" />\n    <p>{`So we can use conditionals or anything we like really, modifying some, all, or none.`}</p>\n    <h3 id='reduce'>Use <code>reduce</code> to combine elements in a list</h3>\n    <p>{`We've already talked about `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{` above. It takes a function, a starting accumulator, and the list to process. It returns the final accumulator.`}</p>\n    <p>{`Above we used `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{` first to add a list of numbers together to get a sum. Let's do it again using the Array's `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{` method and Ramda's `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{` function:`}</p>\n    <CodeBlock {...jsReduceSumSource} mdxType=\"CodeBlock\" />\n    <p>{`We'll see `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{` again and again in the examples below. You can make any of these other functions from `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{`.`}</p>\n    <h3 id='reduce-again'>More fun with <code>reduce</code></h3>\n    <p>{`Suppose we want to loop through an object and uppercase every string value. Can we do that with `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{`? Easy peasy:`}</p>\n    <CodeBlock {...jsReduceStringToUpperSource} mdxType=\"CodeBlock\" />\n    <p>{`The above example isn't the greatest. We reach outside the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{` function to access our `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`bob`}</code>{` object. We should really wrap the function and make a version that takes an object:`}</p>\n    <CodeBlock {...jsReduceOverObjectSource} mdxType=\"CodeBlock\" />\n    <p>{`Now we're beginning to see the advantage of Ramda. Our new `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduceOverObject`}</code>{` function takes a function and passes it `}<em parentName=\"p\">{`three`}</em>{` arguments: the current accumulator, the current key, and the current value. And we pass it the object rather than just the array of keys.`}</p>\n    <p>{`Sweet. Everything is neatly contained in my `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduceOverObject`}</code>{` function. Consider how clean and readable this line is:`}</p>\n    <Highlighter code={`const upcased = reduceOverObject(upcaseStrings, {}, bob)`} startingLineNumber={25} mdxType=\"Highlighter\" />\n    <p>{`Can we duplicate the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`map`}</code>{` function with `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{`? Easy!`}</p>\n    <CodeBlock {...jsReduceAsMapSource} mdxType=\"CodeBlock\" />\n    <p>{`No need to write this function, of course! Just use `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`map`}</code>{`. But as you'll see here, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{` is the mother of all these functions. We can recreate virtually all of them with `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{`, and we can build even more powerful functions on top of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{`. And `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`reduce`}</code>{` is easily created itself by writing a function that calls itself.`}</p>\n    <p>{`Functional code, especially with reuse, is `}<em parentName=\"p\">{`simpler`}</em>{` than the OO equivalent. That means fewer lines, drier code, more reusability, and more power. Free your methods! Use functions instead, and treat Objects as types to be passed around, rather than the output of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`new <ClassName>()`}</code>{`.`}</p>\n    <h3 id='filter'>Use <code>filter</code> to choose particular values from a list</h3>\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`filter`}</code>{` method or function takes a function that returns a Boolean value and a list of items. It applies the function to each item in the list in turn. If the value returned is `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`true`}</code>{`, then that item is included in the output list. If it is `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`false`}</code>{`, then it isn't included. Remember, the output is a copy.`}</p>\n    <p>{`Suppose we had a list of names and we wanted to find all the names at least 5 letters long. We could do that easily with the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`filter`}</code>{` method:`}</p>\n    <CodeBlock {...jsFilterSource} mdxType=\"CodeBlock\" />\n    <p>{`Who needs loops? Not us.`}</p>\n    <h3 id='adjust'>Use <code>adjust</code> to update a single value in a list</h3>\n    <p>{`What if we want to update an element at a specified index in an array. The mutable way would be simple: `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`names[1] = 'Carole'`}</code>{`.`}</p>\n    <p>{`But that mutates our original list. What we want is a new copy of the list with just that element updated. Ramda provides an `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`adjust`}</code>{` function to do just this, but we could also write our own version in vanilla JS:`}</p>\n    <CodeBlock {...jsAdjustSource} mdxType=\"CodeBlock\" />\n    <p>{`Now you're probably wondering why we might add the Ramda dependency with its load time if we can write our own functions so easily.`}</p>\n    <p>{`Well, it depends on what we need. If our needs are as simple as above, then to write our own is probably the way to go. (But be advised that we are then responsible for testing and maintaining our utility functions as well.)`}</p>\n    <p>{`But the Ramda `}<OffsiteLink href='https://ramdajs.com/docs/#adjust' mdxType=\"OffsiteLink\">{`adjust`}</OffsiteLink>{` function can do much more than our version. For one thing, we can apply the arguments `}<em parentName=\"p\">{`one a time`}</em>{`, and with each, get back a function that remembers the arguments already supplied and takes the remaining parameters:`}</p>\n    <CodeBlock {...jsAdjustCurriedSource} mdxType=\"CodeBlock\" />\n    <p>{`Ramda's `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`adjust`}</code>{` can also handle negative indexes (working back from the end of the list). Our `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`vadjust`}</code>{` fails on negative indexes. And if we pass an index that's out of range, then Ramda's `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`adjust`}</code>{` returns our list unchanged so we can continue processing. Again, our version fails. We could fix our version:`}</p>\n    <CodeBlock {...jsVadjustSource} mdxType=\"CodeBlock\" />\n    <p>{`But now it's on us to test it and keep it current. Much easier to use a library such as Ramda or Lodash/FP!`}</p>\n    <h3 id='append-insert-prepend'>Use <code>append</code>, <code>insert</code>, or <code>prepend</code> to add an item to a list</h3>\n    <p>{`These functions do exactly what you'd expect. Should we do it by hand, or use a library? For `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`append`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`prepend`}</code>{`, at least, vanilla JS is probably enough`}{`—`}{`unless we're pipelining (composing) functions.`}</p>\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`append`}</code>{` is the easiest:`}</p>\n    <CodeBlock {...jsAppendSource} mdxType=\"CodeBlock\" />\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`prepend`}</code>{` is also very easy:`}</p>\n    <CodeBlock {...jsPrependSource} mdxType=\"CodeBlock\" />\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`insert`}</code>{` function is a bit trickier:`}</p>\n    <CodeBlock {...jsInsertSource} mdxType=\"CodeBlock\" />\n    <h3 id='remove'>Use <code>remove</code> to remove an item from a list</h3>\n    <p>{`Ramda's `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`remove`}</code>{` function removes one or more sequential items from a list.`}</p>\n    <p>{`It expects three parameters:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The index at which to start removing items.`}</li>\n      <li parentName=\"ol\">{`The number of items to remove.`}</li>\n      <li parentName=\"ol\">{`The list from which to remove the items`}</li>\n    </ol>\n    <p>{`And returns a `}<strong parentName=\"p\">{`copy`}</strong>{` of the list with the items removed.`}</p>\n    <p>{`We can accomplish this in vanilla JS with a little more work. What we want to `}<strong parentName=\"p\">{`avoid`}</strong>{` is using the Array `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`splice`}</code>{` method as it mutates the array in place, and we would never do that, would we?`}</p>\n    <CodeBlock {...jsRemoveSource} mdxType=\"CodeBlock\" />\n    <h3 id='concat'>Use <code>concat</code> or <code>zip</code> to combine two lists</h3>\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`concat`}</code>{` function takes two arrays of equal length and returns an array of arrays, each with two elements: the first from the first array; the second the matching element in the second array. For example:`}</p>\n    <Highlighter code={`concat([1, 2], [3, 4]) // yields [1, 2, 3, 4]`} showLineNumbers={false} mdxType=\"Highlighter\" />\n    <CodeBlock {...jsConcatSource} mdxType=\"CodeBlock\" />\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`zip`}</code>{` function takes two arrays of equal length and returns an array of arrays, each with two elements: the first from the first array; the second the matching element in the second array. For example:`}</p>\n    <Highlighter code={`zip([1, 2], [3, 4]) // yields [[1, 3], [2, 4]]`} showLineNumbers={false} mdxType=\"Highlighter\" />\n    <CodeBlock {...jsZipSource} mdxType=\"CodeBlock\" />\n    <h3 id='times'>Use <code>times</code> to create a new list</h3>\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`times`}</code>{` function takes a function and a number of times, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`n`}</code>{`, to iterate and returns an array of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`n`}</code>{` length with the result of calling the function with the array index. So:`}</p>\n    <Highlighter code={`times(n => n * 2, 5) // yields [0, 2, 4, 6, 8]`} showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`Easy, no?`}</p>\n    <p>{`Doing the same in vanilla JS can be a bit more complex.`}</p>\n    <CodeBlock {...jsTimesSource} mdxType=\"CodeBlock\" />\n    <p>{`Some equivalencies (there may be easier ways, but we don't know them):`}</p>\n    <Highlighter code={`times(identity, 5) // yields [0, 1, 2, 3, 4]\nnew Array(5).fill(null).map((_, i) => i) // yields [0, 1, 2, 3, 4]\\n\ntimes(n => (n + 1) * (n + 1), 5) // yields [1, 4, 9, 16, 25]\nnew Array(5).fill(null).map((_, i) => (i + 1) * (i + 1)) // [1, 4, 9, 16, 25]\\n\ntimes(() => '', 3) // yields ['', '', '']\nnew Array(3).fill('') // yields ['', '', '']\\n\ntimes(n => n.toString(2), 12) // yields binary 0 to 1011\nnew Array(12).fill(null).map((_, i) => (i + 1).toString(2)) // yields binary 0 to 1011`} showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`As you can see, while it can be done in vanilla JS, the Ramda `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`times`}</code>{` function is much easier to use. You could, of course, create your own vanilla JS version, but we'll leave that as an exercise for the reader.`}</p>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`: The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`_`}</code>{` (underscore) is often used in functional programming to indicate a value that we don't care about. In the above examples, the Array `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`map`}</code>{` method passes the index as the `}<em parentName=\"p\">{`second`}</em>{` argument to the function. Here we only care about the index, not the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`null`}</code>{` that is the value at that index, so we use `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`(_, i)`}</code>{` to get the index of the element and ignore the value at that index.`}</p>\n    <h3 id='head-tail'>Use <code>head</code> and <code>tail</code> to destructure a list</h3>\n    <p>{`Remember that the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`head`}</code>{` of a list is just the first element in the list. If it's a list of numbers, then the head is a number; if a list of strings, then the head is a string.`}</p>\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`tail`}</code>{`, in contrast, is `}<em parentName=\"p\">{`the rest of the array`}</em>{`, so it is `}<strong parentName=\"p\">{`always`}</strong>{` an array of the same type as the original array, just without the head element. Note: the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`tail`}</code>{` can be `}<em parentName=\"p\">{`empty`}</em>{`, but it is never undefined.`}</p>\n    <p>{`If we try to get the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`head`}</code>{` of an empty array, it will be `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`undefined`}</code>{`.`}</p>\n    <CodeBlock {...jsHeadTailSource} mdxType=\"CodeBlock\" />\n    <p>{`Frankly, this is one area where Ramda's functions don't always add much value. It is usually easier to use destructuring. Where Ramda's `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`head`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`tail`}</code>{` functions are very useful is in pipelined functions, discussed in `}<Link to='/inductive/composition/' aria-label='Composition' mdxType=\"Link\">{`We can has pipelines!`}</Link></p>\n    <h3 id='all'>Use <code>all</code>, <code>any</code>, or <code>none</code> to test a list</h3>\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`all`}</code>{` takes a function and a list, applies the function to each item in the list, and returns `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`true`}</code>{` `}<em parentName=\"p\">{`if and only if`}</em>{` the function passed returns true `}<strong parentName=\"p\">{`every time`}</strong>{` it is applied to an item in the list.`}</p>\n    <p>{`The vanilla JS equivalent is the Array `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`every`}</code>{` method.`}</p>\n    <CodeBlock {...jsAllSource} mdxType=\"CodeBlock\" />\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`any`}</code>{` takes a function and a list, applies the function to each item in the list, and returns `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`true`}</code>{` `}<em parentName=\"p\">{`if and only if`}</em>{` the function passed returns true `}<strong parentName=\"p\">{`at least once`}</strong>{` when it is applied to an item in the list.`}</p>\n    <p>{`The vanilla JS equivalent is the Array `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`some`}</code>{` method.`}</p>\n    <CodeBlock {...jsAnySource} mdxType=\"CodeBlock\" />\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`none`}</code>{` takes a function and a list, applies the function to each item in the list, and returns `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`true`}</code>{` `}<em parentName=\"p\">{`if and only if`}</em>{` the function passed returns `}<strong parentName=\"p\">{`false`}</strong>{` every time it is applied to an item in the list.`}</p>\n    <p>{`The vanilla JS equivalent is the Array `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`every`}</code>{` method, but with the function changed to return `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`true`}</code>{` when the condition is `}<strong parentName=\"p\">{`not`}</strong>{` met, which is pretty non-intuitive. But there doesn't appear to be a true equivalent of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`none`}</code></p>\n    <CodeBlock {...jsNoneSource} mdxType=\"CodeBlock\" />\n    <p>{`Of course, all of the Array methods are `}<strong parentName=\"p\">{`methods`}</strong>{`, so they must be called on the array, which makes pipelining functions more difficult, as we'll see. The Ramda functions are true functions.`}</p>\n    <h3 id='flatten'>Use <code>flatten</code> to flatten nested lists into a single list</h3>\n    <p>{`This is a simple way to turn this:`}</p>\n    <Highlighter code={`[[1, 2, 3], [4, 5], [6, 7, 8]]`} mdxType=\"Highlighter\" />\n    <p>{`Into this:`}</p>\n    <Highlighter code={`[1, 2, 3, 4, 5, 6, 7, 8]`} mdxType=\"Highlighter\" />\n    <p>{`Let's try it:`}</p>\n    <CodeBlock {...jsFlattenSource} mdxType=\"CodeBlock\" />\n    <p>{`In this unusual case, working with `}<em parentName=\"p\">{`partially`}</em>{` unnesting arrays is actually easier with the Array `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`flat`}</code>{` method. Of course, because the method returns a copy, we could always create our own.`}</p>\n    <p>{`Here use Ramda's `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`curry`}</code>{` function (more on this later) to make it possible to apply the arguments one at a time. This gives us the same power as Ramda's functions to be `}{`“`}{`partially applied`}{`”`}{` and then used in pipelined functions:`}</p>\n    <CodeBlock {...jsUnnestSource} mdxType=\"CodeBlock\" />\n    <h3 id='avoid-foreach'>Avoid <code>forEach</code>! Avoid <code>forEach</code>! Avoid <code>forEach</code>!</h3>\n    <p>{`The `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`forEach`}</code>{` method on the Array (and`}{`—`}{`gasp!`}{`—`}{`the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`forEach`}</code>{` function in Ramda) is used `}<strong parentName=\"p\">{`entirely for side effects`}</strong>{`. Say it ain't so, Ramda!`}</p>\n    <p>{`Side effects almost always mean mutation. And that leads directly to the `}<em parentName=\"p\">{`zombie apocalypse`}</em>{`. Avoid.`}</p>\n    <CodeBlock {...jsBadForeachSource} theme='dark' warn={() => <small>Get thee behind me, Satan!</small>} mdxType=\"CodeBlock\" />\n    <p>{`Every time you use `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`forEach`}</code>{`, a kitten dies. A really adorable one. Just sayin'.`}</p>\n    <p>{`Next, we'll talk about `}<Link to='/inductive/composition/' aria-label='Composition' mdxType=\"Link\">{`pipelines`}</Link>{`.`}</p>\n    <small>Errors, bugs, suggestions, questions? Spare paper bags filled with unmarked fifties and hundreds? Contact <a href='mailto:charles_munat@bnz.co.nz'>Charles Munat</a></small>.\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { graphql, useStaticQuery } from 'gatsby'\nimport React from 'react'\nimport Helmet from 'react-helmet'\n\nfunction SEO ({ lang, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={\n        title\n          ? `${title} | ${site.siteMetadata.title}`\n          : site.siteMetadata.title\n      }\n    >\n      <script src='https://embed.runkit.com' data-element-id='runkit' />\n    </Helmet>\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n}\n\nexport default SEO\n","import { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nimport { Location } from '@reach/router'\n\nfunction DefaultLinks () {\n  return (\n    <>\n      <Link\n        to='/inductive'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Bottom-up\n      </Link>\n      <Link\n        to='/deductive'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Top-down\n      </Link>\n      <Link\n        to='/patterns-antipatterns'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Patterns\n      </Link>\n    </>\n  )\n}\n\nfunction InductiveLinks () {\n  return (\n    <>\n      <Link\n        to='/inductive/reusability'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Reusability\n      </Link>\n      <Link\n        to='/inductive/immutability'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Variables\n      </Link>\n      <Link\n        to='/inductive/iteration'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Looping\n      </Link>\n      <Link\n        to='/inductive/composition'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Pipelines\n      </Link>\n    </>\n  )\n}\n\nfunction DeductiveLinks () {\n  return (\n    <>\n      <Link\n        to='/deductive/pure-functions/'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Pure functions\n      </Link>\n      <Link\n        to='/deductive/more-fp-concepts'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        More FP concepts\n      </Link>\n    </>\n  )\n}\n\nfunction NavLinks ({ location }) {\n  switch (location.pathname.split('/')[1]) {\n    case 'inductive':\n      return <InductiveLinks />\n    case 'deductive':\n      return <DeductiveLinks />\n    default:\n      return <DefaultLinks />\n  }\n}\n\nfunction getColour (location) {\n  switch (location.pathname.split('/')[1]) {\n    case 'inductive':\n      return 'ForestGreen'\n    case 'deductive':\n      return 'MediumBlue'\n    case 'patterns-antipatterns':\n      return 'Maroon'\n    default:\n      return 'RebeccaPurple'\n  }\n}\n\nconst Header = ({ siteTitle, location }) => {\n  const backgroundColour = getColour(location)\n\n  return (\n    <header\n      style={{\n        background: backgroundColour,\n        marginBottom: `1.45rem`\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `1.45rem 1.0875rem`\n        }}\n      >\n        <h1 style={{ margin: 0, display: 'inline-block', flexGrow: 1 }}>\n          <Link\n            to='/'\n            style={{\n              color: `white`,\n              textDecoration: `none`\n            }}\n          >\n            {siteTitle}\n          </Link>\n        </h1>\n        <div style={{ flexShrink: 1 }}>\n          <NavLinks location={location} />\n        </div>\n      </div>\n    </header>\n  )\n}\n\nHeader.propTypes = {\n  location: PropTypes.object.isRequired,\n  siteTitle: PropTypes.string\n}\n\nHeader.defaultProps = {\n  siteTitle: ``\n}\n\nexport default function HeaderWrapper (props) {\n  return (\n    <Location>\n      {locationProps => <Header {...locationProps} {...props} />}\n    </Location>\n  )\n}\n","import './index.css'\n\nimport { graphql, useStaticQuery } from 'gatsby'\nimport React from 'react'\n\nimport Header from '../Header'\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n          paddingTop: 0\n        }}\n      >\n        <main>{children}</main>\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","import { Link as GatsbyLink } from 'gatsby'\nimport React from 'react'\n\nimport { navigate } from '@reach/router'\n\nconst pattern = /#|\\?/g\n\nconst makeOnClick = to => () => navigate(to)\n\nexport default function Link ({ children, to, ...props }) {\n  return pattern.test(to) ? (\n    <a onClick={makeOnClick(to)} {...props}>\n      {children}\n    </a>\n  ) : (\n    <GatsbyLink to={to} {...props}>\n      {children}\n    </GatsbyLink>\n  )\n}\n","import React from 'react'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport {\n  solarizedDark,\n  solarizedLight\n} from 'react-syntax-highlighter/dist/esm/styles/hljs'\n\nexport default function Highlighter ({\n  code = '',\n  language = 'javascript',\n  showLineNumbers = true,\n  startingLineNumber = 1,\n  theme = 'light',\n  warn = () => null\n}) {\n  return (\n    <>\n      {warn()}\n      <SyntaxHighlighter\n        language={language}\n        style={theme === 'light' ? solarizedLight : solarizedDark}\n        showLineNumbers={showLineNumbers}\n        startingLineNumber={startingLineNumber}\n      >\n        {code}\n      </SyntaxHighlighter>\n    </>\n  )\n}\n","import React from 'react'\n\nexport default function TrailSeparator () {\n  return <span className='separator'>&raquo;</span>\n}\n","import { Link } from 'gatsby'\nimport React, { Fragment } from 'react'\n\nimport TrailSeparator from '../TrailSeparator'\n\nfunction getCrumbs (title, trail = []) {\n  return (\n    <>\n      {trail.map(({ href, label }) => (\n        <Fragment key={href}>\n          <Link to={href}>{label}</Link>\n          <TrailSeparator />\n        </Fragment>\n      ))}\n      {title}\n    </>\n  )\n}\n\nexport default function BreadcrumbTrail ({ title, trail }) {\n  if (trail === undefined) {\n    return null\n  }\n\n  return <p>{getCrumbs(title, trail)}</p>\n}\n","import React from 'react'\n\nimport BreadcrumbTrail from '../BreadcrumbTrail'\nimport Layout from '../Layout'\nimport SEO from '../SEO'\n\nfunction PageLayout ({ children, pageContext }) {\n  const { title, trail } = pageContext.frontmatter\n\n  return (\n    <Layout>\n      <SEO title={title} />\n      <BreadcrumbTrail title={title} trail={trail} />\n      <article>{children}</article>\n    </Layout>\n  )\n}\n\nexport default PageLayout\n","import React from 'react'\n\nexport default function OffsiteLink ({ children, href }) {\n  return (\n    <a\n      href={href}\n      target='_blank'\n      rel='noopener noreferrer'\n      aria-label='Offsite link: opens in new window'\n      className='offsite-link'\n      title='Offsite link: opens in a new window'\n    >\n      {children}\n    </a>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport Embed from 'react-runkit'\n\nimport Highlighter from '../Highlighter'\n\nexport default function CodeBlock ({\n  code = '',\n  imports = '',\n  requires = '',\n  theme = 'light',\n  warn = () => null\n}) {\n  const [show, setShow] = useState(false)\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setShow(Boolean(window) && Boolean(window.RunKit))\n    }, 1000)\n\n    if (show) {\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return show ? (\n    <div className='code-block'>\n      {warn()}\n      <Embed\n        source={`${requires}${code}`}\n        nodeVersion='12'\n        theme={`solarized-${theme}`}\n      />\n    </div>\n  ) : (\n    <Highlighter code={`${imports}${code}`} theme={theme} warn={warn} />\n  )\n}\n","import React, { useState } from 'react'\n\nexport default function TerminologyBlock ({ children }) {\n  const [open, setState] = useState(false)\n\n  const toggleState = () => (open ? setState(false) : setState(true))\n\n  return (\n    <>\n      <p>\n        <a onClick={toggleState} style={{ cursor: 'pointer' }}>\n          <strong>{open ? 'Hide ' : 'Show '} Evil Terminology</strong>\n        </a>\n      </p>\n      {open && <blockquote>{children}</blockquote>}\n    </>\n  )\n}\n","const code = `function sum (nums = [], total = 0) {\n  console.log(\\`Total is \\${total}\\`)\n  \n  // If nums is empty, return the total to stop the loop\n  if (nums.length < 1) {\n    console.log(\\`Returning the total of \\${total}\\`)\n    \n    return total\n  }\n\n  // Get the head (first number) and the tail (remaining numbers)\n  // The tail must approach the base case above so the loop terminates\n  const [head, ...tail] = nums\n\n  console.log(\\`Adding \\${head} to \\${total}\\`)\n  \n  // The function calls itself with the remaining numbers and the new total\n  return sum(tail, total + head) \n}\n\nconsole.log(\\`\\u21AA The sum of [] is \\${sum([])}\\`)\nconsole.log(\\`\\u21AA The sum of [5] is \\${sum([5])}\\`, '')\nconsole.log(\\`\\u21AA The sum of [5, 7, 9] is \\${sum([5, 7, 9])}\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n"],"sourceRoot":""}