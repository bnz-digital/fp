{"version":3,"sources":["webpack:///./src/runkits/inductive/add.js","webpack:///./src/runkits/inductive/area-from-diameter.js","webpack:///./src/runkits/inductive/by-reference.js","webpack:///./src/runkits/inductive/by-value.js","webpack:///./src/runkits/inductive/copy-references.js","webpack:///./src/runkits/inductive/function-factory.js","webpack:///./src/runkits/inductive/impure-no-no-no.js","webpack:///./src/runkits/inductive/multiple-results.js","webpack:///./src/runkits/inductive/multiple-results-revised.js","webpack:///./src/runkits/inductive/no-parameters.js","webpack:///./src/runkits/inductive/pipeline-arithmetic.js","webpack:///./src/runkits/inductive/returning-undefined.js","webpack:///./src/runkits/inductive/sort.js","webpack:///./src/pages/inductive/reusability/index.mdx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/SEO/index.js","webpack:///./src/components/Header/index.js","webpack:///./src/components/Layout/index.js","webpack:///./src/components/Highlighter/index.js","webpack:///./src/components/Link/index.js","webpack:///./src/components/TrailSeparator/index.js","webpack:///./src/components/BreadcrumbTrail/index.js","webpack:///./src/components/PageLayout/index.js","webpack:///./src/components/OffsiteLink/index.js","webpack:///./src/components/CodeBlock/index.js","webpack:///./src/components/TerminologyBlock/index.js","webpack:///./src/runkits/inductive/recursive-sum.js"],"names":["add","code","imports","requires","area_from_diameter","by_reference","by_value","copy_references","function_factory","impure_no_no_no","multiple_results","multiple_results_revised","no_parameters","pipeline_arithmetic","returning_undefined","sort","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","Object","index_es","assign","mdxType","parentName","className","CodeBlock","areaFromDiameterSource","id","addSource","noParametersSource","returningUndefinedSource","multipleResultsSource","multipleResultsRevisedSource","Highlighter","showLineNumbers","sortSource","functionFactorySource","TerminologyBlock","OffsiteLink","href","Link","to","aria-label","recursiveSumSource","impureNoNoNoSource","theme","warn","byValueSource","byReferenceSource","copyReferencesSource","pipelineArithmeticSource","isMDXComponent","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","a","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","_objectSpread","json","SEO","lang","title","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","siteMetadata","src","data-element-id","defaultProps","meta","description","DefaultLinks","react_default","Fragment","gatsby_browser_entry","style","color","textDecoration","textTransform","display","padding","InductiveLinks","DeductiveLinks","NavLinks","pathname","split","Header","_ref2","siteTitle","backgroundColour","getColour","background","marginBottom","alignItems","margin","maxWidth","flexGrow","flexShrink","HeaderWrapper","es","locationProps","Header_Header","Layout","children","_856328897","paddingTop","react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_1__","react_syntax_highlighter_dist_esm_styles_hljs__WEBPACK_IMPORTED_MODULE_2__","react_syntax_highlighter_dist_esm_styles_hljs__WEBPACK_IMPORTED_MODULE_3__","_ref$code","_ref$language","language","_ref$showLineNumbers","_ref$startingLineNumb","startingLineNumber","_ref$theme","_ref$warn","solarizedLight","solarizedDark","makeOnClick","e","preventDefault","console","log","process","navigate","indexOf","react__WEBPACK_IMPORTED_MODULE_6___default","onClick","gatsby__WEBPACK_IMPORTED_MODULE_5__","TrailSeparator","BreadcrumbTrail","trail","undefined","map","label","react","key","getCrumbs","PageLayout","_pageContext$frontmat","pageContext","frontmatter","target","rel","react_runkit__WEBPACK_IMPORTED_MODULE_1__","react_runkit__WEBPACK_IMPORTED_MODULE_1___default","_Highlighter__WEBPACK_IMPORTED_MODULE_2__","_ref$imports","_ref$requires","_useState","useState","show","setShow","useEffect","interval","setInterval","Boolean","window","RunKit","clearInterval","source","nodeVersion","open","setState","cursor"],"mappings":"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","file":"component---src-pages-inductive-reusability-index-mdx-6f8c38c8f103a1de3df3.js","sourcesContent":["const code = `function add (x, y) {\n  return x + y\n}\n\nconsole.log('Does 5 + 7 equal 12?', add(5, 7) === 12 ? 'Yes!' : 'No')\nconsole.log('Is 5 + 7 still 12?', add(5, 7) === 12 ? 'Yes!!' : 'No')\nconsole.log('What about now?', add(5, 7) === 12 ? 'Yes! Still 12! UNBELIEVABLE! Who knew?' : 'Uh, oh')`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `function areaFromDiameter (diameter) {\n  const radius = diameter / 2\n  \n  return Math.PI * radius * radius\n}\n\nareaFromDiameter(2) // Radius is 1, 1 squared is 1, area should equal PI`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const person = {\n  name: 'Bob',\n  position: 'Tester'\n}\n\n// DON'T DO THIS!\nfunction updateName (person, name) {\n  person.name = name\n  \n  return person\n}\n\nconsole.log(\\`updateName(person, 'Bobby') returns person.name of '\\${updateName(person, 'Bobby').name}'\\`)\nconsole.log(\\`Now our outer person.name is... wait for it... '\\${person.name}'.\\`)\nconsole.log(\\`That's just not right.\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `let name = 'Bob'\n\nfunction toUpper (name) {\n  // \\`toUpperCase\\` doesn't mutate in place, but returns a new string, as it should\n  // Here we're overwriting the local \\`name\\` variable with an uppercase version\n  name = name.toUpperCase()\n  \n  // We return the VALUE of the updated LOCAL variable\n  // The outer \\`name\\` is unaffected\n  return name \n}\n\nconsole.log(\\`toUpper(name) yields \\${toUpper(name)}\\`)\nconsole.log(\\`But name is still \\${name}\\`)\n\n// Now let's mutate the outer variable\nname = name.toUpperCase() // Why we don't use \"let\"\n\nconsole.log(\\`But now it isn't: \\${name}. Oh, Bob!\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const person = {\n  name: 'Bob',\n  position: 'Tester'\n}\n\nfunction updateNameCorrectly (person, name) {\n  return {\n    ...person, // copies all of the key-value pairs in person to a new object\n    name // overwrites the name value in the new object\n  }\n}\n\nconsole.log(\\`updateName(person, 'Bobby') returns person.name of '\\${updateNameCorrectly(person, 'Bobby').name}'\\`)\nconsole.log(\\`Now look what happened to our outer person.name: '\\${person.name}'.\\`)\nconsole.log(\\`No change! Hooray! We're GENIUSES! Big pay rise? No? Rats.\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `function addToN (n) {\n  // This function takes an x and adds n to it\n  // n is \"remembered\" even though addToN has returned and left scope\n  return x => n + x\n}\n\nconst addToFive = addToN(5)\nconst addToTen = addToN(10)\n\nconsole.log(\\`addToFive(3) is \\${addToFive(3)}\\`)\nconsole.log(\\`addToFive(8) is \\${addToFive(8)}\\`)\nconsole.log(\\`addToTen(17) is \\${addToTen(17)}\\`)\nconsole.log(\\`addToTen(1) is \\${addToTen(1)}\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `// For the love of all that is sacred and true, DO NOT DO THIS!\n\n// Do not let the evil \"let\" into your code!\n// Be constant to \"const\" (constant === faithful, get it?)\nlet x = 'x'\n\nfunction doEvil (y) {\n  x = y // Aieeee! Mutant variable!\n}\n\nconsole.log(\\`Oh, look what doEvil('y') returns: \\${doEvil('y')}\\`)\n\nconsole.log(\\`And x is now \\${x}! Oh, the humanity!\\`)\nconsole.log(\\`doEvil changed something other than through its result. That's just so wrong!\\`)\n\n// More evil!\n\nlet i = 1 // Global, ack!\n\nfunction inc (n) {\n  return n + i // Reaching out to the global. Ugh.\n}\n\nconsole.log(\\`The inc function increments by 1: inc(5) is \\${inc(5)}\\`)\n\ni = 5 // The global mutates. Ack!\n\nconsole.log(\\`Or does it? inc(5) is \\${inc(5)}. WTF?\\`)\nconsole.log('Calling inc(5) at different times got different results. Ack! No! No! No!')\n`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const Tuple = Array // Just for fun\n\nfunction getAreaAndCircumferenceFromRadius (radius) {\n  const area = Math.PI * radius * radius\n  const circumference = Math.PI * radius * 2\n\n  return new Tuple(area, circumference)\n}\n\nconst circleProperties = getAreaAndCircumferenceFromRadius(1)\n\n// In an arry, ordering is important, but you can name your variables\n// whatever you like: values are assigned by position\nconst [area, circumference] = circleProperties\n\nconsole.log(\\`The area is \\${area}\\`)\nconsole.log(\\`The circumference is \\${circumference}\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const calculateArea = radius => Math.PI * radius * radius\nconst calculateCircumference = radius => Math.PI * radius * 2\n\nfunction getAreaAndCircumferenceFromRadius (radius) {\n  // We could return an object instead\n  return {\n    circumference: calculateCircumference(radius),\n    area: calculateArea(radius)\n  }\n}\n\n// When destructuring an object, the order is unimportant\n// but you must use the key for your variable name\nconst { area, circumference } = getAreaAndCircumferenceFromRadius(1)\n\nconsole.log(\\`The area is \\${area}\\`)\nconsole.log(\\`The circumference is \\${circumference}\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `function alwaysTrue () {\n  return true\n}\n\n// Let's try it!\nconsole.log('Calling alwaysTrue', alwaysTrue())\nconsole.log('Calling alwaysTrue again', alwaysTrue())\nconsole.log('Calling alwaysTrue one more time', alwaysTrue())\nconsole.log('Sigh...')`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `// Beauty, eh?\nfunction pipe (f, ...fs) {\n  if (fs.length < 1) { return f } // No tail? Return the function\n  \n  // Return a function that takes arguments\n  // applies \\`f\\` to them, then passes that result\n  // the the function returned from calling pipe\n  // again on the remaining functions\n  return (...args) => pipe(...fs)(f(...args))\n}\n\n// add is a function that takes x\n// and returns a function that takes y\n// adds it to x, and returns the sum\nconst add = x => y => y + x\n\n// These work the same way\nconst subtract = x => y => y - x\nconst multiply = x => y => y * x\nconst divide = x => y => y / x\n\n// Equivalent to \\`y => ((((y + 5) - 7) * 10) / 4)\\`\nconst doTheMath = pipe(add(5), subtract(7), multiply(10), divide(4))\n\nconsole.log(\\`doTheMath(12) is \\${doTheMath(12)}\\`)\nconsole.log(\\`((((12 + 5) - 7) * 10) / 4) is  \\${((((12 + 5) - 7) * 10) / 4)}\\`)\nconsole.log('doTheMath(12) === ((((12 + 5) - 7) * 10) / 4)')\nconsole.log(doTheMath(12) === ((((12 + 5) - 7) * 10) / 4))`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `function testN (n) {\n  if (n <= -1) { return false }\n  if (n >= 1) { return true}\n\n  return undefined\n}\n\nconsole.log('Testing -5:', testN(-5))\nconsole.log('Testing 7:', testN(7))\nconsole.log('Testing 0:', testN(0), 'Yeah, we expected that.')`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const asc = (a, b) => a - b\nconst desc = (a, b) => b - a // Reverse the ordering\n\n// String.match returns an array, the first item of which is the string matched\n// In this instance, that will be the first uppercase letter\n// Then charCodeAt(0) extracts that letter from the string and converts it\n// to its character code, between 65 (A) and 90 (Z)\nconst getFirstCapCharCode = s => s.match(/[A-Z]/)[0].charCodeAt(0)\n\nconst firstCapAsc = (a, b) => getFirstCapCharCode(a) - getFirstCapCharCode(b)\nconst firstCapDesc = (a, b) => getFirstCapCharCode(b) - getFirstCapCharCode(a)\n\nconsole.log('Sort [3, 5, 1] ascending:', [3, 5, 1].sort()) // Defaults to ascending\nconsole.log('Sort [3, 5, 1] ascending:', [3, 5, 1].sort(asc))\nconsole.log('Sort [3, 5, 1] descending:', [3, 5, 1].sort(desc))\n\nconst strs = ['stRinG', 'nuMber', 'Boolean',  'arraY']\n\n// The default string sort will sort uppercase before lowercase\n// as it uses the character codes (A-Z is 65-90, a-z is 97-122)\nconsole.log('Default string sort:', strs.sort())\nconsole.log('Sort strings ascending:', strs.sort(firstCapAsc))\nconsole.log('Sort strings descending:', strs.sort(firstCapDesc))`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/754368/Workspace/fp-tutorials/fp/src/components/PageLayout/index.js\";\nimport CodeBlock from '../../../components/CodeBlock';\nimport Highlighter from '../../../components/Highlighter';\nimport Link from '../../../components/Link';\nimport OffsiteLink from '../../../components/OffsiteLink';\nimport TerminologyBlock from '../../../components/TerminologyBlock';\nimport addSource from '../../../runkits/inductive/add';\nimport areaFromDiameterSource from '../../../runkits/inductive/area-from-diameter';\nimport byReferenceSource from '../../../runkits/inductive/by-reference';\nimport byValueSource from '../../../runkits/inductive/by-value';\nimport copyReferencesSource from '../../../runkits/inductive/copy-references';\nimport functionFactorySource from '../../../runkits/inductive/function-factory';\nimport impureNoNoNoSource from '../../../runkits/inductive/impure-no-no-no';\nimport multipleResultsSource from '../../../runkits/inductive/multiple-results';\nimport multipleResultsRevisedSource from '../../../runkits/inductive/multiple-results-revised';\nimport noParametersSource from '../../../runkits/inductive/no-parameters';\nimport pipelineArithmeticSource from '../../../runkits/inductive/pipeline-arithmetic';\nimport recursiveSumSource from '../../../runkits/inductive/recursive-sum';\nimport returningUndefinedSource from '../../../runkits/inductive/returning-undefined';\nimport sortSource from '../../../runkits/inductive/sort';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Functions are the basic unit of reusability`}</h2>\n    <p>{`Functional programming is programming `}<em parentName=\"p\">{`with functions`}</em>{`. Shocking, no? Who knew?`}</p>\n    <p>{`Functions are the basic unit of reusability. If we have a few lines of code, and they do something that we might want to do again somewhere else in our code, then we can wrap them in a function. Then we can use that function throughout our code.`}</p>\n    <p>{`We don't have to write the algorithm over and over again, which might mean making mistakes and getting different results. It's wrapped up in the function, and we just call the function to run the code and get a result back.`}</p>\n    <p>{`We probably want the function to behave slightly differently in different contexts, so we can pass it arguments. These are the parameters of the function: the context in which it operates. The function takes one or more arguments and returns a single result.`}</p>\n    <p>{`If you think about this, we can consider the input to the function to be the current state of our application (part of it anyway), and the result of the function represents a new, transformed state.`}</p>\n    <p>{`So functions are the way we change state in our application. Essentially, a function is a black box that takes state (in the form of parameters) and returns new state (in the form of a single result):`}</p>\n    <p>{`For example, suppose we wanted to be able to calculate the area of a circle given its diameter. We know that the area of a circle is the radius squared times π (the Greek letter PI), which is 3.141592653589793 in JavaScript and is available in the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Math`}</code>{` module as `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Math.PI`}</code>{`.`}</p>\n    <p>{`We can create a function called `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`areaFromDiameter`}</code>{` that takes the diamter as a parameter and returns the area of the circle with that diameter:`}</p>\n    <CodeBlock {...areaFromDiameterSource} mdxType=\"CodeBlock\" />\n    <p>{`Now we can use that throughout our code. See? Functional programming is easy!`}</p>\n    <h3><span id='purity-rules'>{`Given the same arguments, a function must return the same result`}</span></h3>\n    <p>{`Put another way, what a function returns depends `}<em parentName=\"p\">{`entirely`}</em>{` on the arguments passed to the function. Avoid as much as possible writing functions that return a value `}<em parentName=\"p\">{`independently of the inputs`}</em>{`.`}</p>\n    <p>{`Here is a good example: the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`add`}</code>{` function. It takes two numbers and returns the sum of the numbers. If we call it with 5 and 7, then it always returns 12. It doesn't sometimes return 12, sometimes 11, sometimes 13. Right? Make all your functions work this way and your life as a programmer will get much, much easier.`}</p>\n    <CodeBlock {...addSource} mdxType=\"CodeBlock\" />\n    <h3><span id='real-functions-have-parameters'>{`Functions take at least one parameter`}</span></h3>\n    <p>{`You have probably noticed that we can create a function that has no parameters. How about this one?`}</p>\n    <CodeBlock {...noParametersSource} mdxType=\"CodeBlock\" />\n    <p>{`Kinda boring, huh? Remember that `}<em parentName=\"p\">{`a function always returns the same result for the same arguments`}</em>{`. We can't pass this function any arguments, so we can't change the output in any way. We have a name for this kind of function. We call it a `}<strong parentName=\"p\">{`constant`}</strong>{`.`}</p>\n    <p>{`Ha, ha. Get it? Because its output never changes.`}</p>\n    <p>{`Believe it or not, a parameterless function can be useful in rare circumstances in which we `}<em parentName=\"p\">{`want`}</em>{` a function to return the same thing every time it is called. There's an exception to every rule, no? But in daily use, remember that `}<em parentName=\"p\">{`functions take at least one parameter`}</em>{`.`}</p>\n    <h3><span id='real-functions-return-a-value'>{`Functions return exactly one result`}</span></h3>\n    <p>{`You probably already know that you can't return more than one value from a function. But what we mean by `}{`“`}{`exactly one result`}{`”`}{` is that you should `}<strong parentName=\"p\">{`always return a value`}</strong>{`. A function that does not return a value is useless`}{`—`}{`because the only way a function can change anything is `}<em parentName=\"p\">{`with its return value`}</em>{`.`}</p>\n    <p>{`To be clear, that value might be the value `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`undefined`}</code>{`. But if you are returning `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`undefined`}</code>{` from your function, it should be because whatever is calling the function expects `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`undefined`}</code>{` to be a possible result and will act on it accordingly. That's different from not returning anything`}{`—`}{`even though a function without a return statement will, by default, return `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`undefined`}</code>{`.`}</p>\n    <p>{`To make this explicit to the next programmer`}{`—`}{`that you `}<em parentName=\"p\">{`intended`}</em>{` to return `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`undefined`}</code>{`—`}{`return it explicitly: `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`return undefined`}</code>{`. Here is an example:`}</p>\n    <CodeBlock {...returningUndefinedSource} mdxType=\"CodeBlock\" />\n    <p>{`There may be rare occasions when we want to return multiple values from a function. In this instance, we can wrap them up into a composite value and return that. Then we can `}{`“`}{`destructure`}{`”`}{` our values out of the result on the other end.`}</p>\n    <p>{`For example, we can use the JavaScript `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Array`}</code>{` as a kind of `}{`“`}{`tuple`}{`”`}{`. A tuple is an ordered list of elements, typically having different datatypes, such as a number, a string, and a boolean. In JavaScript, arrays aren't limited to a single datatype, so they can work as tuples. `}</p>\n    <p>{`Here we have a function that calculates the area and the cirumference of a circle given the radius and returns them in a tuple. We can then destructure them from the tuple:`}</p>\n    <CodeBlock {...multipleResultsSource} mdxType=\"CodeBlock\" />\n    <p>{`In general, returning multiple values from a function is a `}<strong parentName=\"p\">{`code smell`}</strong>{`. Try to avoid it. If you must do it, at least delegate the work to smaller, single-purpose functions:`}</p>\n    <CodeBlock {...multipleResultsRevisedSource} mdxType=\"CodeBlock\" />\n    <p><strong parentName=\"p\">{`Notice how the name of our function is kind of long?`}</strong>{` That's a hint that our function is probably doing too much. Refactor, if possible.`}</p>\n    <h3><span id='join-the-higher-order'>{`Functions can be passed as arguments to other functions`}</span></h3>\n    <p>{`Here is where FP starts to come into its own. If we can pass a function as an argument to another function, then our functions become exponentially more powerful.`}</p>\n    <p>{`This is best explained with an example. The JavaScript `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Array`}</code>{` object has a `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sort`}</code>{` method. The default is to sort in ascending order. This uses a `}{`“`}{`comparator`}{`”`}{` function that takes two elements from the array and compares them.`}</p>\n    <p>{`If the elements are of equal priority, meaning their ordering doesn't matter, then the comparator function returns `}<strong parentName=\"p\">{`zero`}</strong>{`. If the first argument should come first in the list, then the comparator returns a `}<strong parentName=\"p\">{`positive`}</strong>{` number; if it should come second, it returns a `}<strong parentName=\"p\">{`negative`}</strong>{` number. So our default comparator looks like this:`}</p>\n    <Highlighter code='(a, b) => a - b' showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`But what if we want to sort in descending order? Well, we could make our `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sort`}</code>{` method take a constant, such as `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ASC`}</code>{` or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`DESC`}</code>{` and switch up the comparator function so on `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`DESC`}</code>{` it was `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`(a, b) => b - a`}</code>{`, right? But our options are pretty limited here, no? For example, what if we wanted to sort a list of strings by `}<em parentName=\"p\">{`the first uppercase letter in the string?`}</em>{` Uh, oh.`}</p>\n    <p>{`So the vanilla JavaScript `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sort`}</code>{` method allows us to pass it our own comparator function. Items in the list (array) will be passed to the comparator two at a time, and  the comparator should return a positive number (keep the ordering), 0 (doesn't matter), or a negative number (reverse the ordering). How it does that is up to us.`}</p>\n    <p>{`Here is our example:`}</p>\n    <CodeBlock {...sortSource} mdxType=\"CodeBlock\" />\n    <p>{`Now that is power.`}</p>\n    <h3><span id='who-wants-curry'>{`Functions can be returned from other functions`}</span></h3>\n    <p>{`We can also return a function from a function. This means we can use functions as factories to create other functions. Here is an example:`}</p>\n    <CodeBlock {...functionFactorySource} mdxType=\"CodeBlock\" />\n    <p>{`This is a pretty simple example, but more useful than you might think. Later, we'll talk about how  we can `}{`“`}{`partially apply`}{`”`}{` some types of functions, and we'll use an `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`add`}</code>{` function as an example. When we start maniuplating lists of items `}<em parentName=\"p\">{`without using loops`}</em>{` we'll see how incredibly powerful this ability to return a function from a function really is.`}</p>\n    <TerminologyBlock mdxType=\"TerminologyBlock\"><OffsiteLink href='https://en.wikipedia.org/wiki/Partial_application' mdxType=\"OffsiteLink\">Partial application</OffsiteLink> is a real thing in computer programming, and we use it a lot in functional programming. It is related to <OffsiteLink href='https://en.wikipedia.org/wiki/Currying' mdxType=\"OffsiteLink\">currying</OffsiteLink>, about which more soon.</TerminologyBlock>\n    <p>{`One thing to note is that under normal circumstances, when we call our `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`addToN`}</code>{` function and pass it an argument, say `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`5`}</code>{`, the function creates a local (to the function) variable `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`n`}</code>{` and assigns it the value `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`5`}</code>{`. We can then use it inside our `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`addToN`}</code>{` function.`}</p>\n    <p>{`Normally when a function exits and returns a value, it releases all its local variables to be garbage collected. But because our `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`addToN`}</code>{` function includes `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`n`}</code>{` `}<strong parentName=\"p\">{`in the function it returns`}</strong>{`, we still have a pointer to that variable, which prevents it from being garbage collected until the function we returned is itself garbage collected.`}</p>\n    <p>{`In this way we can `}{`“`}{`capture`}{`”`}{` (or `}{`“`}{`close`}{`”`}{` on) a bit of state and reuse it over and over again, as we did with our `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`addToFive`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`addToTen`}</code>{` functions above. That is a `}<em parentName=\"p\">{`very powerful`}</em>{` feature of JavaScript: one you will use over and over and over again.`}</p>\n    <TerminologyBlock mdxType=\"TerminologyBlock\">When we use a function to capture a value and return another function that remembers that captured value, then we call our function a <OffsiteLink href='https://en.wikipedia.org/wiki/Closure_(computer_programming)' mdxType=\"OffsiteLink\">closure</OffsiteLink>. Closures are extremely common (and useful) in functional programming.</TerminologyBlock>\n    <h3><span id='we-can-has-recursion'>{`Functions can call functions, including themselves`}</span></h3>\n    <p>{`Suppose we want to add up numbers from an array to get the sum. We could use a loop, but that's so last millennium. Let's try another approach using functions `}<strong parentName=\"p\">{`without loops`}</strong>{`. We'll see more of this in the next section, conveniently titled `}<Link to='/inductive/iteration/' aria-label='Iteration' mdxType=\"Link\"><em>{`Loops are so last millennium!`}</em></Link></p>\n    <p>{`We need to consider several different possibilities. For example, what if the list we want to add up is empty? What should we return?`}</p>\n    <p>{`You might say an `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Error`}</code>{` object, and in some instances that might be the best option. But in functional programming, we try to avoid throwing errors wherever possible. In functional programming, an `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Error`}</code>{` should mean `}<em parentName=\"p\">{`the damn thing is broke`}</em>{` and there ain't no fixing it.`}</p>\n    <p>{`So what is the sum of an empty list of numbers? Why not zero? In short:`}</p>\n    <Highlighter code='sum([]) === 0 // should return true' showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`What about a list with only one number in it, such as `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[5]`}</code>{`? Well, that's just `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`5`}</code>{`, isn't it? And `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`5`}</code>{` is the same as `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`5 + 0`}</code>{`, which is the same as `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`5 + sum([])`}</code>{`.`}</p>\n    <p>{`(Because the same input to a function always yields the same result, we can substitute `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sum([])`}</code>{` for `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`0`}</code>{` in that last example. If `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sum([])`}</code>{` could return different things at different times, then we could not make that substitution. This is the power of `}{`“`}{`pure`}{`”`}{` functions.)`}</p>\n    <p>{`So if we were to take the list, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[5]`}</code>{` and pop the head off it (`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`5`}</code>{`) and add it to the sum of the remaining list (`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[]`}</code>{`), then we'd get our new sum. But doesn't this work for a list of `}<em parentName=\"p\">{`any`}</em>{` length? Isn't the sum of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[1, 2, 3]`}</code>{` just `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`1`}</code>{` plus the sum of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[2, 3]`}</code>{`, which is just `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`2`}</code>{` plus the sum of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[3]`}</code>{`, which is just `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`3`}</code>{` plus the sum of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[]`}</code>{`, which is just `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`0`}</code>{`?`}</p>\n    <Highlighter code={`// Remember that sum takes an Array\nsum([1, 2, 3]) ===\n  sum([1]) + sum([2]) + sum([3]) + sum([]) ===\n  1 + 2 + 3 + 0 ===\n  6`} mdxType=\"Highlighter\" />\n    <p>{`So our `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`sum`}</code>{` function could work by taking the first number in our list (the `}{`“`}{`head`}{`”`}{`) and adding it to `}<em parentName=\"p\">{`the sum of the remaining items in the list`}</em>{` (the `}{`“`}{`tail`}{`”`}{`). And it can do this by calling itself over and over again with the ever-shrinking tail until it hits an empty list in which case it returns zero and the sum is complete:`}</p>\n    <CodeBlock {...recursiveSumSource} mdxType=\"CodeBlock\" />\n    <p>{`We get into this more in the next section, but the ability of functions to call themselves means we never need to bother with `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`for`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`while`}</code>{`, or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`do...while`}</code>{` loops again.`}</p>\n    <p>{`And as you'll see, because there are many common operations for which we might use this superpower, naturally we've made `}<strong parentName=\"p\">{`built-in methods`}</strong>{` (and, even better, libraries of functions such as `}<OffsiteLink href='https://ramdajs.com/docs/' mdxType=\"OffsiteLink\">{`Ramda`}</OffsiteLink>{`) to avoid having to write so many functions over and over again.`}</p>\n    <p>{`Reusability, right? High fives all around!`}</p>\n    <TerminologyBlock mdxType=\"TerminologyBlock\">When a function calls itself&mdash;directly or indirectly via another function&mdash;then we call this function a <OffsiteLink href='https://en.wikipedia.org/wiki/Recursion_(computer_science)' mdxType=\"OffsiteLink\">recursive function</OffsiteLink>. Recursion is very common in functional programming and is used instead of looping constructs. Later, we'll talk about <OffsiteLink href='https://en.wikipedia.org/wiki/Tail_call' mdxType=\"OffsiteLink\">tail recursion</OffsiteLink> and why all your recursive functions should be tail recursive.</TerminologyBlock>\n    <h3><span id='say-no-to-side-effects'>{`Don't be reaching outside the function to mess with shit`}</span></h3>\n    <p>{`This is a bad and sometimes hard-to-break habit that many OO programmers have. Oh, look! We can put a variable in global scope, then mutate it from inside our function! Isn't that cool?`}</p>\n    <p>{`Um no. No it is not. Not at all. Now put on this pointy cap and sit facing the corner.`}</p>\n    <p>{`As we said above, `}<strong parentName=\"p\">{`functions take parameters and return a result`}</strong>{`, and that should be `}<em parentName=\"p\">{`all`}</em>{` they do. Functions should not be reaching outside the function to tweak any values or variables in a higher scope, such as the global scope.`}</p>\n    <TerminologyBlock mdxType=\"TerminologyBlock\">When a function reaches outside itself to affect something outside its own scope (other than by return value), then we call that a <OffsiteLink href='https://en.wikipedia.org/wiki/Side_effect_(computer_science)' mdxType=\"OffsiteLink\">side effect</OffsiteLink>. Although we can't entirely avoid side effcts (our program must affect something outside itself!), we should avoid them in the bulk of our code as much as possible. They are a significant source of bugs and they make code hard to read.</TerminologyBlock>\n    <p>{`Neither should anything in the outer scope change the return from our function. If it did, then we could not guarantee that for the same arguments we'll always get the same result.`}</p>\n    <p>{`The exception to this is when we are returning a function from a function, as discussed in `}<Link to='#who-wants-curry' mdxType=\"Link\">{`Functions can be returned from other functions`}</Link>{` above. In that case, we are capturing the value of a variable in the outer function's scope and using it in the scope of the function returned.`}</p>\n    <p>{`But note that unless the outer function (our `}{`“`}{`function factory`}{`”`}{`) is `}<em parentName=\"p\">{`itself`}</em>{` reaching outside its scope, then as soon as it returns our new function with the captured variable, it goes out of scope. So, effectively, when we capture values in this manner we are not actually reaching `}{`“`}{`outside`}{`”`}{` the function. We're just closing on a value.`}</p>\n    <p>{`Of course, at some point we `}<em parentName=\"p\">{`must`}</em>{` reach outside. We need to have input and output from our program, unless we want to `}<strong parentName=\"p\">{`recreate the entire universe inside the program`}</strong>{`, which might take some time (and a hell of a lot of memory). So the big exception to this rule is input-output.`}</p>\n    <p>{`In pure functional programming languages, the `}{`“`}{`impure`}{`”`}{` I/O functionality is isolated in its own modules to avoid impurifying the rest of the code.`}</p>\n    <p>{`In JavaScript, just make sure that `}<strong parentName=\"p\">{`if`}</strong>{` your function is changing something outside the function, or `}<strong parentName=\"p\">{`if`}</strong>{` it is affected by the state of something outside the function (other than an argument passed in), then `}<em parentName=\"p\">{`you know what you're doing and why`}</em>{`. Avoid it unless you absolutely have to do it, and then keep any `}{`“`}{`impure`}{`”`}{` functions isolated from the rest. Quarantine those spawn of Satan.`}</p>\n    <p>{`Here are examples of things `}<strong parentName=\"p\">{`you should never do`}</strong>{`. The squeamish among you may wish to cover your eyes lest this code haunt your nightmares. Don't say we didn't warn you. Enter the dark side...`}</p>\n    <CodeBlock {...impureNoNoNoSource} theme='dark' warn={() => <small>Warning: Professional programmer working in a sandboxed environment. Do not try this at home!</small>} mdxType=\"CodeBlock\" />\n    <p>{`What's an example of when it's OK to use an impure function to affect something other than by the result? How about `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`console.log`}</code>{`? It returns `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`undefined`}</code>{` no matter what the input, and it reaches out to the console and changes it, and that's outside our function, right? But this is input/output, which we already admitted is an exception.`}</p>\n    <p>{`In general, input/output aside (e.g., logging), `}<em parentName=\"p\">{`no exceptions`}</em>{`.`}</p>\n    <TerminologyBlock mdxType=\"TerminologyBlock\">When a function depends only on its parameters and only affects the program via its return value, we call it a <OffsiteLink href='https://en.wikipedia.org/wiki/Pure_function' mdxType=\"OffsiteLink\">pure function</OffsiteLink>. Programming with pure functions allows our code to be <OffsiteLink href='https://en.wikipedia.org/wiki/Referential_transparency' mdxType=\"OffsiteLink\">referentially transparent</OffsiteLink> and means we can reason about our code by using <OffsiteLink href='https://en.wikipedia.org/wiki/Substitution_(algebra)' mdxType=\"OffsiteLink\">substitution</OffsiteLink> to simplify the code.</TerminologyBlock>\n    <h3><span id='no-mutating-variables'>{`Make copies when passing by reference`}</span></h3>\n    <p>{`Often when programmers are just starting to work with functional JavaScript, they will mutate (change) a value from inside a function without realising it.`}</p>\n    <p>{`A `}{`“`}{`feature`}{`”`}{` of JavaScript is that primitive values, such as numbers, strings, and booleans, are `}<em parentName=\"p\">{`copied`}</em>{` when they are passed as arguments to a function:`}</p>\n    <CodeBlock {...byValueSource} mdxType=\"CodeBlock\" />\n    <p>{`As we see above, simple values are `}{`“`}{`passed by value`}{`”`}{`, which means they are `}<em parentName=\"p\">{`copied`}</em>{` into the function scope. But more complex values, such as arrays and objects, are not copied. Instead, a reference to the original is passed.`}</p>\n    <p>{`(This is true in many languages, not just JavaScript.)`}</p>\n    <p>{`Now, if we mutate (change) that variable in the function scope, we are actually reaching outside the scope to change the original value. This is a big no-no:`}</p>\n    <CodeBlock {...byReferenceSource} theme='dark' warn={() => <small>We wrote this code so you don't have to.</small>} mdxType=\"CodeBlock\" />\n    <p>{`So how do we avoid this? We can use the spread operator `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`...`}</code>{` to make a copy of our referenced object and then update the copy. Easy peasy!`}</p>\n    <CodeBlock {...copyReferencesSource} mdxType=\"CodeBlock\" />\n    <h3><span id='closures-are-cool'>{`Functions can remember things for you`}</span></h3>\n    <p>{`We already discussed this above in `}<Link to='/reusability/#who-wants-curry' mdxType=\"Link\">{`Functions can be returned from other functions`}</Link>{`, but it's worth revisiting.`}</p>\n    <p>{`Consider the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`addToN`}</code>{` function we created above that took a number `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`n`}</code>{` and `}<strong parentName=\"p\">{`returned a function`}</strong>{`. The function `}<em parentName=\"p\">{`returned`}</em>{` took a number and returned the sum of that number and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`n`}</code>{`. We could rename that function '`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`add`}</code>{`' and use arrow functions to keep it as short and sweet as possible:`}</p>\n    <Highlighter code={`// add takes an x and returns a function\n// that takes a y and returns x + y\nconst add = x => y => x + y`} mdxType=\"Highlighter\" />\n    <p>{`Now let's take it to the next level. Ready? Let's create a function that lets us `}<strong parentName=\"p\">{`pipeline`}</strong>{` other functions.`}</p>\n    <p>{`Then we'll create `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`add`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`subtract`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`multiply`}</code>{`, and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`divide`}</code>{` functions that allow us to `}<strong parentName=\"p\">{`pass just one argument and get back a function that takes the second argument and does the arithmetic`}</strong>{`.`}</p>\n    <p>{`Then we'll pipeline a few of them together and see if it works:`}</p>\n    <CodeBlock {...pipelineArithmeticSource} mdxType=\"CodeBlock\" />\n    <p>{`Holy crap! Wasn't this supposed to be easy? What the heck is this supposed to do:`}</p>\n    <Highlighter code={`function pipe (f, ...fs) {\n  if (fs.length < 1) { return f }\n  \n  return (...args) => pipe(...fs)(f(...args))\n}`} mdxType=\"Highlighter\" />\n    <p>{`Well, let's take it apart a little at a time. First, there's this line:`}</p>\n    <Highlighter code='function pipe (f, ...fs) {' showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`This declares a function called `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`pipe`}</code>{`, assigns the first argument to a local variable called `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`f`}</code>{` (the parameters are functions, so `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`f`}</code>{` makes sense, right?), then gathers up the remaining arguments into an array of functions called `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`fs`}</code>{`.`}</p>\n    <p>{`(Calling the head of a list `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`x`}</code>{` and the tail `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`xs`}</code>{`, or `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`y`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`ys`}</code>{`, or, as here, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`f`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`fs`}</code>{` is a common way to denote the head and tail in FP. Think of it as similar to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`element`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`elements`}</code>{`.)`}</p>\n    <p>{`We're assuming, of course, that all the arguments to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`pipe`}</code>{` are functions, as `}<strong parentName=\"p\">{`the point of `}<code parentName=\"strong\" {...{\n          \"className\": \"language-text\"\n        }}>{`pipe`}</code>{` is to take one or more functions and return a function that applies them sequentially to a set of arguments`}</strong>{`.`}</p>\n    <p>{`So in our example, the call to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`pipe`}</code>{` looks like this:`}</p>\n    <Highlighter code='pipe(add(5), subtract(7), multiply(10), divide(4))' showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`Remember that `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`pipe`}</code>{` is going to `}<em parentName=\"p\">{`call itself`}</em>{`, so this is the `}<strong parentName=\"p\">{`first`}</strong>{` call to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`pipe`}</code>{`.`}</p>\n    <p>{`So in `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`(f, ...fs)`}</code>{`, `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`f`}</code>{` is assigned the value `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`add(5)`}</code>{` which is the same as `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`y => y + 5`}</code>{`, right? And `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`fs`}</code>{` is an array of the remaining arguments: `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[subtract(7), multiply(10), divide(4)]`}</code>{`.`}</p>\n    <p>{`Next we hit the guard: `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`if (fs.length < 1) { return f }`}</code>{`. But our current `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`fs`}</code>{` has a length of 3, so we skip the guard. Now we hit this line:`}</p>\n    <Highlighter code='return (...args) => pipe(...fs)(f(...args))' showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`Oh, joy! But it's not as tricky as it looks at first. Because our functions `}<em parentName=\"p\">{`always return the same thing for the same input`}</em>{`, we can do some substitution, right?`}</p>\n    <p>{`The first thing we know is that the value of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`f`}</code>{` is `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`y => y + 5`}</code>{`, so we can substitute that in for `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`(...args)`}</code>{` and `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`f(...args)`}</code>{` (note that `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`...args`}</code>{` here is just `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`y`}</code>{`, right?):`}</p>\n    <Highlighter code='return y => pipe(...fs)(y + 5)' showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`We also know that the value of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`fs`}</code>{` is `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`[subtract(7), multiply(10), divide(4)]`}</code>{`, so we can substitute that as well:`}</p>\n    <Highlighter code='return y => pipe(subtract(7), multiply(10), divide(4))(y + 5)' showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`Remember that the spread operator `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`...`}</code>{` `}{`“`}{`spreads`}{`”`}{` the array of functions out into individual arguments.`}</p>\n    <p>{`Note that `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`pipe`}</code>{` returns a `}<em parentName=\"p\">{`function`}</em>{`, and we're calling that function with `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`y + 5`}</code>{`, which is the result of applying the first function in the pipe (`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`add(5)`}</code>{`) to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`y`}</code>{`, whatever `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`y`}</code>{` is. `}</p>\n    <p><strong parentName=\"p\">{`Note: It is important to remember that `}<code parentName=\"strong\" {...{\n          \"className\": \"language-text\"\n        }}>{`pipe`}</code>{` `}<em parentName=\"strong\">{`returns a function`}</em>{`. We're not applying our outermost function yet, we're just nesting the four functions.)`}</strong></p>\n    <p>{`What we're trying to accomplish is the equivalent of this:`}</p>\n    <Highlighter code={`const doTheMath = y => {\n  return divide(\n    4,\n    multiply(\n      10,\n      subtract(\n        7,\n        add(5, y)\n      )\n    )\n  )\n}`} mdxType=\"Highlighter\" />\n    <p>{`After the second call to `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`pipe`}</code>{`, we can simplify further:`}</p>\n    <Highlighter code='return y => pipe(multiply(10), divide(4))((y + 5) - 7)' showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`And further after the third call:`}</p>\n    <Highlighter code='return y => pipe(divide(4))(((y + 5) - 7) * 10)' showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`And one last time:`}</p>\n    <Highlighter code='return y => (((y + 5) - 7) * 10) / 4' showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`Which means our final result is this:`}</p>\n    <Highlighter code='const doTheMath = y => (((y + 5) - 7) * 10) / 4' showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`So we can see that the value of `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`doTheMath`}</code>{` is a function that takes the `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`y`}</code>{` that `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`add(5)`}</code>{` is expecting, calls it with `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`y`}</code>{`, then takes the value returned from `}<em parentName=\"p\">{`that`}</em>{` call and calls `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`subtract(7)`}</code>{` with it, and so on through the entire list of functions, returning the final result:`}</p>\n    <Highlighter code={`doTheMath(12) // passes 12 to\nadd(5)(12) // returns 17, passed to\nsubtract(7)(17) // returns 10, passed to\nmultiply(10)(10) // returns 100, passed to\ndivide(4)(100) // returns 25, which is returned from doTheMath(12)`} showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`Combining functions together can get quite complex, but if we name the functions well, and we use pure functions that always return the same result for the same arguments, then we can substitute again and again, simplifying our code, until we see what's really happening.`}</p>\n    <p><strong parentName=\"p\">{`Note that the `}<em parentName=\"strong\">{`first`}</em>{` function passed to `}<code parentName=\"strong\" {...{\n          \"className\": \"language-text\"\n        }}>{`pipe`}</code>{` can take any number of parameters, but as each succeeding function takes as its argument the result of the previous function, all functions passed to `}<code parentName=\"strong\" {...{\n          \"className\": \"language-text\"\n        }}>{`pipe`}</code>{` `}<em parentName=\"strong\">{`after the first one`}</em>{` must take only `}<em parentName=\"strong\">{`one`}</em>{` parameter.`}</strong></p>\n    <TerminologyBlock mdxType=\"TerminologyBlock\">Our <code>pipe</code> function above is an example of <OffsiteLink href='https://en.wikipedia.org/wiki/Function_composition' mdxType=\"OffsiteLink\">function composition</OffsiteLink>. We'll discuss composition in detail further on in this tutorial.</TerminologyBlock>\n    <p>{`Now let's talk a bit more about variables and why we never change them once they've been assigned: `}<Link to='/inductive/immutability/' aria-label='Immutability' mdxType=\"Link\"><em>{`Variables are `}{`“`}{`set and forget`}{`”`}</em></Link>{`.`}</p>\n    <p>{`We'll also get more into combining functions later in `}{`“`}<Link to='/inductive/composition/' aria-label='Composition' mdxType=\"Link\"><em>{`We can has pipelines!`}</em></Link>{`”`}</p>\n    <small>Errors, bugs, suggestions, questions? Contact <a href='mailto:charles_munat@bnz.co.nz'>Charles Munat</a></small>.\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { graphql, useStaticQuery } from 'gatsby'\nimport React from 'react'\nimport Helmet from 'react-helmet'\n\nfunction SEO ({ lang, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={\n        title\n          ? `${title} | ${site.siteMetadata.title}`\n          : site.siteMetadata.title\n      }\n    >\n      <script src='https://embed.runkit.com' data-element-id='runkit' />\n    </Helmet>\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n}\n\nexport default SEO\n","import { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nimport { Location } from '@reach/router'\n\nfunction DefaultLinks () {\n  return (\n    <>\n      <Link\n        to='/inductive'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Bottom-up\n      </Link>\n      <Link\n        to='/deductive'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Top-down\n      </Link>\n      <Link\n        to='/cypress'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Cypress\n      </Link>\n    </>\n  )\n}\n\nfunction InductiveLinks () {\n  return (\n    <>\n      <Link\n        to='/inductive/reusability'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Reusability\n      </Link>\n      <Link\n        to='/inductive/immutability'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Variables\n      </Link>\n      <Link\n        to='/inductive/iteration'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Looping\n      </Link>\n      <Link\n        to='/inductive/composition'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Pipelines\n      </Link>\n    </>\n  )\n}\n\nfunction DeductiveLinks () {\n  return (\n    <>\n      <Link\n        to='/deductive/pure-functions/'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        Pure functions\n      </Link>\n      <Link\n        to='/deductive/more-fp-concepts'\n        style={{\n          color: `white`,\n          textDecoration: `none`,\n          textTransform: 'lowercase',\n          display: 'inline-block',\n          padding: '0 0.5rem'\n        }}\n      >\n        More FP concepts\n      </Link>\n    </>\n  )\n}\n\nfunction NavLinks ({ location }) {\n  switch (location.pathname.split('/')[1]) {\n    case 'inductive':\n      return <InductiveLinks />\n    case 'deductive':\n      return <DeductiveLinks />\n    default:\n      return <DefaultLinks />\n  }\n}\n\nfunction getColour (location) {\n  switch (location.pathname.split('/')[1]) {\n    case 'inductive':\n      return 'ForestGreen'\n    case 'deductive':\n      return 'MediumBlue'\n    case 'cypress':\n      return 'Maroon'\n    default:\n      return 'RebeccaPurple'\n  }\n}\n\nconst Header = ({ siteTitle, location }) => {\n  const backgroundColour = getColour(location)\n\n  return (\n    <header\n      style={{\n        background: backgroundColour,\n        marginBottom: `1.45rem`\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `1.45rem 1.0875rem`\n        }}\n      >\n        <h1 style={{ margin: 0, display: 'inline-block', flexGrow: 1 }}>\n          <Link\n            to='/'\n            style={{\n              color: `white`,\n              textDecoration: `none`\n            }}\n          >\n            {siteTitle}\n          </Link>\n        </h1>\n        <div style={{ flexShrink: 1 }}>\n          <NavLinks location={location} />\n        </div>\n      </div>\n    </header>\n  )\n}\n\nHeader.propTypes = {\n  location: PropTypes.object.isRequired,\n  siteTitle: PropTypes.string\n}\n\nHeader.defaultProps = {\n  siteTitle: ``\n}\n\nexport default function HeaderWrapper (props) {\n  return (\n    <Location>\n      {locationProps => <Header {...locationProps} {...props} />}\n    </Location>\n  )\n}\n","import './index.css'\n\nimport { graphql, useStaticQuery } from 'gatsby'\nimport React from 'react'\n\nimport Header from '../Header'\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n          paddingTop: 0\n        }}\n      >\n        <main>{children}</main>\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","import React from 'react'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport {\n  solarizedDark,\n  solarizedLight\n} from 'react-syntax-highlighter/dist/esm/styles/hljs'\n\nexport default function Highlighter ({\n  code = '',\n  language = 'javascript',\n  showLineNumbers = true,\n  startingLineNumber = 1,\n  theme = 'light',\n  warn = () => null\n}) {\n  return (\n    <>\n      {warn()}\n      <SyntaxHighlighter\n        language={language}\n        style={theme === 'light' ? solarizedLight : solarizedDark}\n        showLineNumbers={showLineNumbers}\n        startingLineNumber={startingLineNumber}\n      >\n        {code}\n      </SyntaxHighlighter>\n    </>\n  )\n}\n","import { Link as GatsbyLink } from 'gatsby'\nimport React from 'react'\n\nimport { navigate } from '@reach/router'\n\nconst makeOnClick = to => e => {\n  e.preventDefault\n\n  console.log(process.env)\n\n  navigate(to)\n}\n\nexport default function Link ({ children, to, ...props }) {\n  const useAnchor = to.indexOf('#') > -1 || to.indexOf('?') > -1\n\n  return useAnchor ? (\n    <a onClick={makeOnClick(to)} href={to} {...props}>\n      {children}\n    </a>\n  ) : (\n    <GatsbyLink to={to} {...props}>\n      {children}\n    </GatsbyLink>\n  )\n}\n","import React from 'react'\n\nexport default function TrailSeparator () {\n  return <span className='separator'>&raquo;</span>\n}\n","import { Link } from 'gatsby'\nimport React, { Fragment } from 'react'\n\nimport TrailSeparator from '../TrailSeparator'\n\nfunction getCrumbs (title, trail = []) {\n  return (\n    <>\n      {trail.map(({ href, label }) => (\n        <Fragment key={href}>\n          <Link to={href}>{label}</Link>\n          <TrailSeparator />\n        </Fragment>\n      ))}\n      {title}\n    </>\n  )\n}\n\nexport default function BreadcrumbTrail ({ title, trail }) {\n  if (trail === undefined) {\n    return null\n  }\n\n  return <p>{getCrumbs(title, trail)}</p>\n}\n","import React from 'react'\n\nimport BreadcrumbTrail from '../BreadcrumbTrail'\nimport Layout from '../Layout'\nimport SEO from '../SEO'\n\nfunction PageLayout ({ children, pageContext }) {\n  const { title, trail } = pageContext.frontmatter\n\n  return (\n    <Layout>\n      <SEO title={title} />\n      <BreadcrumbTrail title={title} trail={trail} />\n      <article>{children}</article>\n    </Layout>\n  )\n}\n\nexport default PageLayout\n","import React from 'react'\n\nexport default function OffsiteLink ({ children, href }) {\n  return (\n    <a\n      href={href}\n      target='_blank'\n      rel='noopener noreferrer'\n      aria-label='Offsite link: opens in new window'\n      className='offsite-link'\n      title='Offsite link: opens in a new window'\n    >\n      {children}\n    </a>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport Embed from 'react-runkit'\n\nimport Highlighter from '../Highlighter'\n\nexport default function CodeBlock ({\n  code = '',\n  imports = '',\n  requires = '',\n  theme = 'light',\n  warn = () => null\n}) {\n  const [show, setShow] = useState(false)\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setShow(Boolean(window) && Boolean(window.RunKit))\n    }, 1000)\n\n    if (show) {\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return show ? (\n    <div className='code-block'>\n      {warn()}\n      <Embed\n        source={`${requires}${code}`}\n        nodeVersion='12'\n        theme={`solarized-${theme}`}\n      />\n    </div>\n  ) : (\n    <Highlighter code={`${imports}${code}`} theme={theme} warn={warn} />\n  )\n}\n","import React, { useState } from 'react'\n\nexport default function TerminologyBlock ({ children }) {\n  const [open, setState] = useState(false)\n\n  const toggleState = () => (open ? setState(false) : setState(true))\n\n  return (\n    <>\n      <p>\n        <a onClick={toggleState} style={{ cursor: 'pointer' }}>\n          <strong>{open ? 'Hide ' : 'Show '} Evil Terminology</strong>\n        </a>\n      </p>\n      {open && <blockquote>{children}</blockquote>}\n    </>\n  )\n}\n","const code = `function sum (nums = [], total = 0) {\n  console.log(\\`Total is \\${total}\\`)\n  \n  // If nums is empty, return the total to stop the loop\n  if (nums.length < 1) {\n    console.log(\\`Returning the total of \\${total}\\`)\n    \n    return total\n  }\n\n  // Get the head (first number) and the tail (remaining numbers)\n  // The tail must approach the base case above so the loop terminates\n  const [head, ...tail] = nums\n\n  console.log(\\`Adding \\${head} to \\${total}\\`)\n  \n  // The function calls itself with the remaining numbers and the new total\n  return sum(tail, total + head) \n}\n\nconsole.log(\\`\\u21AA The sum of [] is \\${sum([])}\\`)\nconsole.log(\\`\\u21AA The sum of [5] is \\${sum([5])}\\`, '')\nconsole.log(\\`\\u21AA The sum of [5, 7, 9] is \\${sum([5, 7, 9])}\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n"],"sourceRoot":""}