(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{202:function(e,t,a){"use strict";a.r(t);a(14),a(15),a(8),a(22),a(16),a(0);var n=a(69),s=a(219),o=a(221),l=a(218),i=a(217),r=a(220),c=a(225),u={code:"// JUST DON'T DO THIS!\nconst nums = [1, 2, 3, 4, 5]\nconst len = nums.length\n\nlet sum = 0 // DON'T DO THIS!\n\nfor (let i = 0; i < len; i++) {\n  sum += nums[i] // Sum is a mutant!\n}\n\nconsole.log(`The sum is ${sum}`)",imports:"",requires:""},m={code:"const { adjust } = require('ramda')\n\nconst names = [\n  'Bob', 'Carole', 'Ted', 'Alice', 'Samson', 'Delilah'\n]\n\n// Vanilla JS: let's create our own function\nfunction vadjust (index, f, arr) {\n  return [\n    ...arr.slice(0, index),\n    f(arr[index]),\n    ...arr.slice(index + 1)\n  ]\n}\n\nconst vjsUpdatedNames = vadjust(1, () => 'Carol', names)\n\n// Ramda's adjust\nconst ramdaUpdatedNames = adjust(1, () => 'Carol', names)\n\nconsole.log('Update Carole to Carol by vanilla JS:', vjsUpdatedNames)\nconsole.log('Update Carole to Carol by Ramda\\'s adjust:', ramdaUpdatedNames)\nconsole.log('The original list is unchanged:', names)",imports:"",requires:""},b={code:"const { adjust, toUpper } = require('ramda')\n\nconst upcaseThirdElement = adjust(2, toUpper)\n\nconst names = [\n  'Bob', 'Carole', 'Ted', 'Alice', 'Samson', 'Delilah'\n]\n\nconst colours = [\n  'red', 'yellow', 'green', 'cyan', 'blue', 'magenta'\n]\n\nconsole.log('Uppercase the third name:', upcaseThirdElement(names))\nconsole.log('Uppercase the third colour:', upcaseThirdElement(colours))\nconsole.log('The original lists are unchanged:', names, colours)",imports:"",requires:""},d={code:"const { all } = require('ramda')\n\nconst tests = ['Bob', 'Sally', 'Samuel', 'Ruth']\n\n// Vanilla JS\nconsole.log('tests.every(name => name.length > 1)', tests.every(name => name.length > 1))\nconsole.log('tests.every(name => name.length > 4)', tests.every(name => name.length > 4))\n\n// Ramda\nconsole.log('all(name => name.length > 1, tests)', all(name => name.length > 1, tests))\nconsole.log('all(name => name.length > 4, tests)', all(name => name.length > 4, tests))\n",imports:"",requires:""},p={code:"const { any } = require('ramda')\n\nconst tests = ['Bob', 'Sally', 'Samuel', 'Ruth']\n\n// Vanilla JS\nconsole.log('tests.some(name => name.length > 4)', tests.some(name => name.length > 4))\nconsole.log('tests.some(name => name.length > 10)', tests.some(name => name.length > 10))\n\n// Ramda\nconsole.log('any(name => name.length > 4, tests)', any(name => name.length > 4, tests))\nconsole.log('any(name => name.length > 10, tests)', any(name => name.length > 10, tests))\n",imports:"",requires:""},h={code:"const { append } = require('ramda')\n\nconst nums = [1, 2, 3]\n\n// Vanilla\nconst vjsManual = [...nums, 4]\n\n// Our own append function\nconst vappend = (x, arr) => ([...arr, x])\n\nconst vjsAppend = vappend(4, nums)\n\n// Ramda\nconst ramdaAppend = append(4, nums)\n\nconsole.log('[...nums, 4]:', vjsManual)\nconsole.log('vappend(4, nums):', vjsAppend)\nconsole.log('append(4, nums):', ramdaAppend)\nconsole.log('nums is unchanged:', nums)",imports:"",requires:""},g={code:"// EVIL! PURE EVIL!\n// forEach is used only for side effects\n\nconst output = ['a', 'b', 'c'].forEach(\n  (value, index, array) => {\n    console.log(`The value is ${value}`)\n    console.log(`The index is ${index}`)\n    console.log(`The array is [${array}]`)\n  }\n)\n\n// How can forEach do anything if the result is undefined?\n// Only by side effects. Ugh.\nconsole.log(`The output of Array.forEach is ${output}`)",imports:"",requires:""},j={code:"const { concat } = require('ramda')\n\nconst things = ['a', 'b', 'c']\nconst moreThings = ['d', 'e']\nconst andMore = ['f', 'g']\n\n// Ramda's concat is easy peasy\nconsole.log('concat(things, moreThings)', concat(things, moreThings))\n\n// concat only takes two parameters\nconsole.log('concat(moreThings, things, andMore)', concat(moreThings, things, andMore))\n\n// The vanilla JS Array.concat is a bit trickier as you need to call\n// it on one of the arrays: it is a method, after all\n// But at least it RETURNS A COPY!\nconsole.log('things.concat(moreThings)', things.concat(moreThings))\nconsole.log('moreThings.concat(things)', moreThings.concat(things))\n\n// The Array.concat method takes any number of arrays\nconsole.log('things.concat(moreThings, andMore)', things.concat(moreThings, andMore))\n\n// But we can easily create our own in vanilla JS\nconst vjsConcat = (left, right) => ([...left, ...right])\nconsole.log('vjsConcat(things, moreThings)', vjsConcat(things, moreThings))\nconsole.log('vjsConcat(moreThings, things, andMore)', vjsConcat(moreThings, things, andMore))\n\n// Or make one that takes any number of arrays\nconst superConcat = (x, ...xs) => xs.length < 1\n  ? x\n  : [...x, ...superConcat(...xs)]\n\nconsole.log('superConcat(things, moreThings, andMore)')\nsuperConcat(things, moreThings, andMore)",imports:"",requires:""},O={code:"const { filter } = require('ramda')\n\nconst names = [\n  'Bob', 'Carol', 'Ted', 'Alice', 'Samson', 'Delilah'\n]\n\n// Vanilla JS:\nconst vjsLongNames = names.filter(s => s.length > 4)\n\n// Ramda:\nconst ramdaLongNames = filter(s => s.length > 4, names)\n\nconsole.log('The longer names by Array.filter:', vjsLongNames)\nconsole.log('The longer names by Ramda\\'s filter:', ramdaLongNames)\nconsole.log('The original list is unchanged:', names)",imports:"",requires:""},f={code:"const { flatten, unnest } = require('ramda')\n\nconst nested = [[1, 2, 3], [4, 5], [6, 7, 8]]\nconst deeplyNested = [1, [2, [3, [4, [5, [6]]]]]]\n\n// Ramda flatten does so recursively\nconsole.log('flatten(nested)', flatten(nested))\nconsole.log('flatten(deeplyNested)', flatten(deeplyNested))\n\n// Ramda unnest flattens just one level deep\nconsole.log('unnest(nested)', unnest(nested))\nconsole.log('unnest(deeplyNested)', unnest(deeplyNested))\n\n// Vanilla JS flatMap workes like unnest\nconsole.log('nested.flatMap(n => n)', nested.flatMap(n => n))\nconsole.log('deeplyNested.flatMap(n => n)', deeplyNested.flatMap(n => n))\n\n// Vanilla JS flat works a bit like unnest, but it can specify the\n// levels of nesting to flatten\nconsole.log('deeplyNested.flat(3)', deeplyNested.flat(3))\nconsole.log('deeplyNested.flat(5)', deeplyNested.flat(5))\n\nconsole.log('deeplyNested remains unchanged:', deeplyNested)",imports:"",requires:""},y={code:"const { head, tail } = require('ramda')\n\nconst nums = [1, 2, 3, 4, 5]\n\n// In vanilla JS we can use Array.slice to get the head and tail:\nconst x = nums[0]\nconst xs = nums.slice(1)\n\nconsole.log(`x is ${x}`)\nconsole.log(`xs is ${JSON.stringify(xs)}`)\nconsole.log('nums is unchanged:', nums)\n\n// We can also use destructuring, which is often easier and clearer\nconst [y, ...ys] = nums\n\nconsole.log(`y is ${y}`)\nconsole.log(`ys is ${JSON.stringify(ys)}`)\nconsole.log('nums is unchanged:', nums)\n\n// Look what happens with an empty list:\nconst [z, ...zs] = []\n\nconsole.log(`z (the head of []) is ${z}`)\nconsole.log(`zs (the tail of []) is ${JSON.stringify(zs)}`)\n\n// Ramda also offers head and tail functions\nconst r = head(nums)\nconst rs = tail(nums)\n\nconsole.log(`r is ${r}`)\nconsole.log(`rs is ${JSON.stringify(rs)}`)\nconsole.log('nums is unchanged:', nums)",imports:"",requires:""},w={code:"const { insert } = require('ramda')\n\nconst names = [\n  'Bob', 'Carol', 'Ted', 'Samson', 'Delilah'\n]\n\n// Ramda returns a copy\nconsole.log('insert(3, \\'Alice\\', names)', insert(3, 'Alice', names))\nconsole.log('names is unchanged:', names)\n\n// Splice mutates in place: DO NOT DO THIS!\nconsole.log('splice returns []', names.splice(3, 0, 'George'))\nconsole.log('But names has been mutated!', names)\n\n// Let's remove George\n// Does this look intuitive to you?\nnames.splice(3, 1)\n\n// Best method with vanilla JS\nconst vjsInsert = (index, item, list) =>\n  index > -1 && index < list.length\n    ? [\n        ...list.slice(0, index),\n        item,\n        ...list.slice(index)\n      ]\n    : [...list, item]\n\nconsole.log('Vanilla JS: vjsInsert(3, \\'Alice\\', names)', vjsInsert(3, 'Alice', names))\nconsole.log('Out of bounds appends, same as Ramda insert (try it):')\nconsole.log('vjsInsert(-1, \\'Alice\\', names)', vjsInsert(-1, 'Alice', names))\nconsole.log('vjsInsert(7, \\'Alice\\', names)', vjsInsert(7, 'Alice', names))\nconsole.log('names unchanged:', names)",imports:"",requires:""},N={code:"const { map, toUpper } = require('ramda')\n\nconst colours = ['red', 'green', 'blue']\n\n// Uppercase e's if length > 4\nconst longWordBigE = s => s.length > 4 ? s.replace(/e/g, 'E') : s\n\n// Vanilla JS\nconst vjsUppers = colours.map(longWordBigE)\n\n// The purely functional way with Ramda: pass the array\nconst ramdaUppers = map(longWordBigE, colours)\n\nconsole.log(`The uppercased colours by Array.map: [${vjsUppers}]`)\nconsole.log(`The uppercased colours by Ramda's map: [${ramdaUppers}]`)\nconsole.log(`Remember, the original array is unchanged: [${colours}]`)",imports:"",requires:""},v={code:"// Sadly, runkit does not support import yet\nconst { map } = require('ramda') // The old-fashioned way\n\nconst nums = [1, 2, 3, 4, 5]\n\n// Vanilla JS: map as a method on array\nconst vjsSquares = nums.map(x => x * x)\n\n// The purely functional way with Ramda: pass the array\nconst ramdaSquares = map(x => x * x, nums)\n\nconsole.log(`The squares by Array.map: ${JSON.stringify(vjsSquares)}`)\nconsole.log(`The squares by Ramda's map: ${JSON.stringify(ramdaSquares)}`)",imports:"",requires:""},x={code:"const { map, toUpper } = require('ramda')\n\nconst colours = ['red', 'green', 'blue']\n\n// Vanilla JS\nconst vjsUppers = colours.map(s => s.toUpperCase())\n\n// The purely functional way with Ramda: pass the array\nconst ramdaUppers = map(toUpper, colours)\n\nconsole.log(`The uppercased colours by Array.map: [${vjsUppers}]`)\nconsole.log(`The uppercased colours by Ramda's map: [${ramdaUppers}]`)",imports:"",requires:""},k={code:"const { none } = require('ramda')\n\nconst tests = ['Bob', 'Sally', 'Samuel', 'Ruth']\n\n// Vanilla JS\nconsole.log('tests.every(name => name.length <= 1)', tests.every(name => name.length <= 1))\nconsole.log('tests.every(name => name.length <= 4)', tests.every(name => name.length <= 4))\n\n// Or perhaps more clearly\nconsole.log('tests.every(name => !(name.length > 4))', tests.every(name => !(name.length > 4)))\nconsole.log('tests.every(name => !(name.length > 10))', tests.every(name => !(name.length > 10)))\n\n// Ramda\nconsole.log('none(name => name.length > 4, tests)', none(name => name.length > 4, tests))\nconsole.log('none(name => name.length > 10, tests)', none(name => name.length > 10, tests))\n",imports:"",requires:""},T={code:"const { prepend } = require('ramda')\n\nconst nums = [1, 2, 3]\n\n// Vanilla\nconst vjsManual = [0, ...nums]\n\n// Our own prepend function\nconst vprepend = (x, arr) => ([x, ...arr])\n\nconst vjsAppend = vprepend(0, nums)\n\n// Ramda\nconst ramdaAppend = prepend(0, nums)\n\nconsole.log('[0, ...nums]:', vjsManual)\nconsole.log('vprepend(0, nums):', vjsAppend)\nconsole.log('prepend(0, nums):', ramdaAppend)\nconsole.log('nums is unchanged:', nums)",imports:"",requires:""},S={code:"const { map, reduce } = require('ramda')\n\n// As with map, we take a function and an array to apply it to\nconst reduceMap = (f, arr) => reduce(\n  (acc, v) => ([...acc, f(v)]),  // Apply the function to each item in turn\n  [],                            // Start with an empty new array\n  arr                            // Loop through the original array\n)\n\nconst nums = [1, 2, 3, 4, 5]\n\nconst oldSquares = map(x => x * x, nums)\nconst squares = reduceMap(x => x * x, nums) // Works the same way\n\nconsole.log('The squares using map:', oldSquares)\nconsole.log('The squares using our reduceMap:', squares)\nconsole.log('And nums remains unchanged:', nums)",imports:"",requires:""},q={code:"const { keys, reduce, toUpper } = require('ramda')\n\n// Takes same three parameters as reduce, but last is an object\nconst reduceOverObject = (f, acc, obj) => reduce(\n  (a, key) => f(a, key, obj[key]), // function passed gets value as third parameter\n  acc,\n  keys(obj)\n)\n\nconst bob = {\n  name: 'Bob',\n  age: 'indeterminate',\n  iq: 180,\n  speaksFrench: true\n}\n\n// Now takes the value as a third parameter\nconst upcaseStrings = (acc, key, value) => ({\n  ...acc,                          // copy current accumulator\n  [key]: typeof value === 'string' // add this key-value pair\n    ? toUpper(value)               // uppercase if string\n    : value                        // otherwise, pass unchanged\n})\n\nconst upcased = reduceOverObject(upcaseStrings, {}, bob)\n\nconsole.log('Ramda result:', upcased)",imports:"",requires:""},A={code:"const { add, reduce } = require('ramda') // add(1, 2) returns 3\n\nconst nums = [1, 2, 3, 4, 5]\n\n// Vanilla JS\nconst vjsSum = nums.reduce(add, 0)\n\n// Ramda\nconst ramdaSum = reduce(add, 0, nums)\n\nconsole.log(`The Array.reduce sum is ${vjsSum}`)\nconsole.log(`The Ramda reduce sum is ${ramdaSum}`)",imports:"",requires:""},E={code:"const { keys, reduce, toUpper } = require('ramda')\n\nconst bob = {\n  name: 'Bob',\n  age: 'indeterminate',\n  iq: 180,\n  speaksFrench: true\n}\n\nconst upcaseStrings = (acc, key) => {\n  const value = bob[key]\n  \n  return {\n    ...acc,                          // copy current accumulator\n    [key]: typeof value === 'string' // add this key-value pair\n      ? toUpper(value)               // uppercase if string\n      : value                        // otherwise, pass unchanged\n  }\n}\n\nconst vjsUpcase = Object.keys(bob).reduce(upcaseStrings, {})\n\nconst ramdaUpcase = reduce(upcaseStrings, {}, keys(bob))\n\nconsole.log('Vanilla JS result:', vjsUpcase)\nconsole.log('Ramda result:', ramdaUpcase)",imports:"",requires:""},R={code:"const { remove } = require('ramda')\n\nconst names = [\n  'Bob', 'Carol', 'Ted', 'Alice', 'Samson', 'Delilah'\n]\n\n// Ramda returns a copy\nconsole.log('remove(4, 1, names) removes Samson', remove(4, 1, names))\nconsole.log('names is unchanged:', names)\nconsole.log('remove(4, 2, names) removes Samson and Delilah', remove(4, 2, names))\n\n// Splice mutates in place: DO NOT DO THIS!\nconsole.log('splice returns an array of the removed items:', names.splice(4, 1))\nconsole.log('But names has been mutated!', names)\n\n// Let's reinsert Samson\n// Does this look intuitive to you?\nnames.splice(4, 0, 'Samson')\n\n// Best method with vanilla JS\nconst vjsRemove = (index, len, list) =>\n  index > -1 && index < list.length\n    ? [\n        ...list.slice(0, index),\n        ...list.slice(index + len)\n      ]\n    : [...list]\n\nconsole.log('Vanilla JS: vjsRemove(4, 1, names)', vjsRemove(4, 1, names))\nconsole.log('Out of bounds does nothing, same as Ramda remove (try it):')\nconsole.log('vjsRemove(-1, 1, names)', vjsRemove(-1, 1, names))\nconsole.log('vjsRemove(7, 1, names)', vjsRemove(7, 1, names))\nconsole.log('names unchanged:', names)",imports:"",requires:""},B={code:"const { identity, times } = require('ramda')\n\n// Ramda's times takes a function and a number n\n// Calls the function n times passing it 0, 1, 2, etc. (the index)\n// identity is equivalent to x => x\nconsole.log('times(identity, 5)', times(identity, 5))\nconsole.log('times(n => (n + 1) * (n + 1), 5)', times(n => (n + 1) * (n + 1), 5))\nconsole.log(`times(() => '', 3)`, times(() => '', 3))\nconsole.log('times(n => n.toString(2), 12)', times(n => n.toString(2), 12))\n\n// In vanilla JS, we can use the new keyword to instantiate an array and pass a length\nconsole.log('new Array(5) has undefined values:', new Array(5))\nconsole.log('new Array(5).map((_, i) => i) does not work:', new Array(5).map((_, i) => i))\nconsole.log(`new Array(5).fill('').map((_, i) => i) works:`, new Array(5).fill('').map((_, i) => i))\n",imports:"",requires:""},C={code:"const { curry } = require('ramda')\n\nconst nested = [[1, 2, 3], [4, 5], [6, 7, 8]]\nconst deeplyNested = [1, [2, [3, [4, [5, [6]]]]]]\n\nconst unnest = curry((n, list) => list.flat(n))\n\nconsole.log('unnest(3, deeplyNested)', unnest(3, deeplyNested))\nconsole.log('unnest(5, deeplyNested)', unnest(5, deeplyNested))\n\nconst unnestTwoLevels = unnest(2)\nconsole.log('unnestTwoLevels(deeplyNested)', unnestTwoLevels(deeplyNested))",imports:"",requires:""},L={code:"function adjust (...args) {\n  // If not all arguments supplied...\n  if (args.length < 3) {\n    // Return a function that remembers the current arguments,\n    // takes more arguments, and calls adjust again with both\n    return (...newArgs) => adjust(...args, ...newArgs)\n  }\n  \n  // Once we have all three arguments, destructure them\n  const [index, f, arr] = args\n  \n  // If the index is out of bounds, return the array unchanged\n  if (index >= arr.length || index < -arr.length ) {\n    return arr\n  }\n  \n  return [\n    ...arr.slice(0, index),     // Get the elements before the index\n    f(...arr.slice(index)),     // Apply the function to the element at index\n    ...(\n      index === -1\n        ? []                    // Handle the special case of -1\n        : arr.slice(index + 1)) // Get the remaining elements, if any\n  ]\n}\n\nconst data = [0, 1, 2, 3, 4]\n\n// We can apply arguments in any increments\nconsole.log('adjust(2)(String)(data)', adjust(2)(String)(data))\nconsole.log('adjust(2, String)(data)', adjust(2, String)(data))\nconsole.log('adjust(2, String, data)', adjust(2, String, data))\nconsole.log('adjust(2)(String, data)', adjust(2)(String, data))\n\n// Calling with no arguments returns the function unchanged\nconsole.log('adjust()()(2)()(String)()()(data)', adjust()()(2)()(String)()()(data))\n\n// It works at different indexes\nconsole.log('adjust(3, String, data)', adjust(3, String, data))\nconsole.log('adjust(0, String, data)', adjust(0, String, data))\nconsole.log('adjust(4, String, data)', adjust(4, String, data))\n\n// It works with negative indexes\nconsole.log('adjust(-1, String, data)', adjust(-1, String, data))\nconsole.log('adjust(-4, String, data)', adjust(-4, String, data))\n\nconst adjustLast = adjust(-1)\nconst addTenToLast = adjustLast(x => x + 10)\n\nconsole.log('addTenToLast(data)', addTenToLast(data))",imports:"",requires:""},I={code:"const { zip } = require('ramda')\n\nconst digits = [1, 2, 3, 4, 5, 6]\nconst numerals = [\n  'one', 'two', 'three', 'four', 'five'\n]\n\n// Ramda's zip zips while elements exist in both arrays and drops extras\nconsole.log('zip(digits, numerals)', zip(digits, numerals))\nconsole.log('zip(numerals, digits)', zip(numerals, digits))\n\n// Implementing this is vanilla JS is no mean feat\n// Behold the power of reduce!\nconst vjsZip = (left, right) => left.reduce(\n  (acc, val, idx) => right[idx]    // If there is an equivalent element in right\n    ? [...acc, [val, right[idx]]]  // zip left and right together\n    : acc,                         // else return the accumulator unchanged\n  []\n)\n\nconsole.log('vjsZip(digits, numerals)', vjsZip(digits, numerals))\n\nconsole.log('vjsZip(numerals, digits)')\nvjsZip(numerals, digits)",imports:"",requires:""},J={code:"// DON'T DO THIS EITHER\nconst nums = [1, 2, 3, 4, 5]\nconst len = nums.length\n\nlet sum = 0 // Ugh\n\nfor (num in nums) {\n  sum += num // Sum is still a mutant!\n}\n\nconsole.log(`The sum is ${sum}`) // Oh, look what happened here!",imports:"",requires:""},W={code:"// DON'T DO THIS EITHER\nconst nums = [1, 2, 3, 4, 5]\nconst len = nums.length\n\nlet sum = 0 // Ugh\n\nfor (i in nums) {\n  // console.log(typeof i) // uncomment this for a surprise\n  sum += nums[i] // i is the INDEX -- ick!\n}\n\nconsole.log(`The sum is ${sum}`) // Working, but definitely not intuitive",imports:"",requires:""},D={code:"// Not the best way to go about this, usually\nfunction sum (nums = []) {\n  if (nums.length < 1) { return 0 }\n\n  const [head, ...tail] = nums\n\n  return head + sum(tail)\n}",imports:"",requires:""},U={code:"function mapSquares (nums = [], accumulator = []) {\n  // When nums is empty, return the accumulated squares\n  if (nums.length < 1) { return accumulator }\n\n  // Get the head and tail\n  const [head, ...tail] = nums\n  \n  // Append the square of the head and call again with the tail\n  return mapSquares(tail, [...accumulator, head * head])\n}\n\nconsole.log(`[] mapped to its squares is ${JSON.stringify(mapSquares([]))}`)\nconsole.log(`[5] mapped to its squares is ${JSON.stringify(mapSquares([5]))}`)\nconsole.log(`[1,2,3] mapped to its squares is ${JSON.stringify(mapSquares([1,2,3]))}`)",imports:"",requires:""},F={code:"function sum (nums = [], total = 0) {\n  console.log(`total is ${total}`)\n\n  if (nums.length < 1) {\n    console.log(`Returning the total of ${total}`)\n    return total\n  }\n\n  const [head, ...tail] = nums\n\n  console.log(`head is ${head} and tail is ${JSON.stringify(tail)}`)\n\n  console.log(`Calling sum(${JSON.stringify(tail)}, ${total + head})`, '')\n\n  return sum(tail, total + head)\n}\n\nconsole.log(`The sum of [1, 2, 3, 4, 5] is ${sum([1, 2, 3, 4, 5])}`)",imports:"",requires:""},$=a(232);a.d(t,"_frontmatter",function(){return H}),a.d(t,"default",function(){return P});var H={},M={_frontmatter:H},_=s.a;function P(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,["components"]);return Object(n.b)(_,Object.assign({},M,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h2",null,"Loops are so last millennium!"),Object(n.b)("p",null,"If you've done much programming, then you've almost certainly used looping constructs. JavaScript offers numerous ways to loop in an ","“","imperative","”"," manner (meaning you tell the code how to loop rather than just giving it a list of items and letting ",Object(n.b)("em",{parentName:"p"},"it")," decide how to loop):"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"for"),": repeat a code block a specified number of times"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"for/in"),": repeat a code block for each of the properties of an object"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"for/of"),": repeat  a code block for each values in an ","“","iterable","”"," object, such as an array"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"while"),": repeat a block of code while a specified condition is true"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"do/while"),": same as while, but always applies the code block at least once")),Object(n.b)("p",null,"If you think these are easy to use, then you're fooling yourself. You've just been using them so long that you've forgotten how confusing they were the first time you saw them. Consider the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"for")," loop:"),Object(n.b)(o.a,Object.assign({},u,{theme:"dark",warn:function(){return Object(n.b)("small",null,"No variables were harmed in the making of this code.")},mdxType:"CodeBlock"})),Object(n.b)("p",null,"Easy, right?"),Object(n.b)("p",null,"Don't be absurd. There is ",Object(n.b)("em",{parentName:"p"},"nothing")," easy about this. Let's look at it a bit more carefully."),Object(n.b)("p",null,"First, what on Earth could this possibly mean?"),Object(n.b)(l.a,{code:"(let i = 0; i < len; i++)",showLineNumbers:!1,mdxType:"Highlighter"}),Object(n.b)("p",null,"OK, ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"let i = 0;")," is obvious enough: we're setting a local, mutable variable to ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0"),". By why ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"i"),"? Unless you've been ",Object(n.b)("em",{parentName:"p"},"taught")," how this works, it's not obvious that ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"i")," is an ",Object(n.b)("em",{parentName:"p"},"index"),", or that we'll be incrementing it."),Object(n.b)("p",null,"So what is this ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"i < len;"),"? A conditional, obviously, and we can see that ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"len")," is ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"5")," and ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"i")," is ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0"),", so ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"i < len")," is obviously ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"true"),", but so what? What does that do?"),Object(n.b)("p",null,"And then there is this mystifying ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"i++"),". Again, you have to be ",Object(n.b)("em",{parentName:"p"},"taught")," (and then memorise) that ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"++")," is the ",Object(n.b)("strong",{parentName:"p"},"increment operator")," and that here it is applied to ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"i")," in the ",Object(n.b)("strong",{parentName:"p"},"postfix")," position, which would normally mean that we would use the value ",Object(n.b)("em",{parentName:"p"},"first"),", and then increment it."),Object(n.b)("p",null,"But the truth is that in the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"for")," loop this increment is not applied until ",Object(n.b)("em",{parentName:"p"},"after")," the loop has run, and then is applied ",Object(n.b)("em",{parentName:"p"},"before")," the next iteration of the loop. So despite that nearly ",Object(n.b)("em",{parentName:"p"},"everyone")," who writes ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"for")," loops uses ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"i++"),", it really should be ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"++i"),"—","and that will also work (try it)."),Object(n.b)("p",null,"Wait! Both ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"++i")," ",Object(n.b)("em",{parentName:"p"},"and")," ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"i++")," ",Object(n.b)("em",{parentName:"p"},"both")," work? How does that make any sense at all?"),Object(n.b)("p",null,"Eventually, the new programmer figures out that ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"i < len;")," is used to ",Object(n.b)("em",{parentName:"p"},"stop")," the loop. When this condition evaluates to ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"false"),", the loop stops running. This condition is checked before ",Object(n.b)("em",{parentName:"p"},"every")," application of the code block, so if I write ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"i > len;")," the loop never runs at all (try it)."),Object(n.b)("p",null,"But if you're familiar with this loop, then you'll know that the most common mistake is to write ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"i <= len;"),", which causes the loop to run an extra iteration (try it). This throws no error, but results in ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"sum")," being ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"NaN")," no matter what we pass it. Not good."),Object(n.b)("p",null,"So gnarly is the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"for")," construct that later versions of JavaScript have introduced ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"for/in")," and ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"for/of"),". These simplify our loop, but again, you have to remember when to use ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"in")," and when to use ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"of"),", and this still ends up mutating a variable, though at least we don't have to worry about indexes:"),Object(n.b)(o.a,Object.assign({},J,{theme:"dark",warn:function(){return Object(n.b)("small",null,"The only thing necessary for the triumph of evil is for good men to do nothing.")},mdxType:"CodeBlock"})),Object(n.b)("p",null,"Ha, ha. Yeah. You thought that ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"for/in")," would pass you each item in the array one at a time? Seems obvious, but think again. It passes the ",Object(n.b)("em",{parentName:"p"},"index"),". So we're back to indexes! Let's try that again:"),Object(n.b)(o.a,Object.assign({},W,{theme:"dark",warn:function(){return Object(n.b)("small",null,"The greatest trick the Devil ever pulled was convincing the world he didn’t exist.")},mdxType:"CodeBlock"})),Object(n.b)("p",null,"Wondering why we ended up with ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0012345")," in the broken version of ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"for/in")," above? That's because for some difficult-to-grasp reason, the index is passed in as a ",Object(n.b)("strong",{parentName:"p"},"string"),", so the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"+=")," operator ",Object(n.b)("em",{parentName:"p"},"concatenates")," strings instead of adding numbers. WTF? Is this some kind of sick joke?"),Object(n.b)("p",null,"Here the TC-39 committee tried to make life easier for JavaScript coders and ended up making things ",Object(n.b)("em",{parentName:"p"},"just that much ",Object(n.b)("strong",{parentName:"em"},"less")," intuitive"),"."),Object(n.b)("p",null,"The above constructs work, and you can ",Object(n.b)("em",{parentName:"p"},"eventually")," get reasonably proficient at them, but there is ",Object(n.b)("strong",{parentName:"p"},"nothing intuitive")," about them and they are, truly, one of the ",Object(n.b)("em",{parentName:"p"},"most difficult")," things for new programmers to learn."),Object(n.b)("p",null,"Surely, there is a better way! Step into the light..."),Object(n.b)("h3",{id:"recusrive-functions"},"Functions can call themselves! No, really!"),Object(n.b)("p",null,"One simple way to handle looping through a set of items, such as an array of numbers, is to process each number in turn. We can use a function call to do this, and rather than putting our function in a loop, we can just pass it the list, have it take the ","“","head","”"," of the list, process it, and then ",Object(n.b)("em",{parentName:"p"},"call itself again with the ","“","tail","”"," of the list"),", which is just the rest of the list."),Object(n.b)(c.a,{mdxType:"TerminologyBlock"},"In functional programming we work a lot with the ",Object(n.b)(r.a,{href:"https://en.wikipedia.org/wiki/List_(abstract_data_type)",mdxType:"OffsiteLink"},Object(n.b)("strong",null,"list"))," type. In JavaScript, we typically use the ",Object(n.b)("code",null,"Array")," to mimic a list. It is particularly important when operating on lists to ",Object(n.b)(r.a,{href:"https://en.wikipedia.org/wiki/List_(abstract_data_type)#Operations",mdxType:"OffsiteLink"},"know your ",Object(n.b)("strong",null,"head")," from your ",Object(n.b)("strong",null,"tail")),", but then that's probably important in many areas of life—unless you're a politician."),Object(n.b)("p",null,"And we can continue this process until we run out of list elements. Then we will stop and return the fully processed list, whatever that looks like."),Object(n.b)("p",null,"For example, let's take our ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"sum")," above. Adding a list of numbers together is the same as adding each number to the number after it and keeping a running total."),Object(n.b)("p",null,"If you think about it, that's precisely what our loop above does. It creates a running total in a ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"sum")," variable and initialises it to ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0"),", then adds the numbers in the list to it sequentially until it exhausts the list. What's left is our final total."),Object(n.b)("p",null,"We can do the same thing by creating a function that takes our list and our running total (which defaults to ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0"),"), gets first item from the list, adds it to the running total, and then ",Object(n.b)("em",{parentName:"p"},"calls itself again on the rest of the list, passing it the current subtotal:")),Object(n.b)(o.a,Object.assign({},$.a,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"That works. Of course, we could have written the function more simply this way:"),Object(n.b)(l.a,{code:D.code,mdxType:"Highlighter"}),Object(n.b)("p",null,"So why not do it that way? Well, let's see..."),Object(n.b)("p",null,"A minor benefit of having the running total as a parameter to the function is that we can set it to something other than zero. For example, we could add a list of numbers to ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"100")," instead of zero","—",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"sum([1, 4, 9, 16], 100)"),"—","returning ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"130")," instead of ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"30"),"."),Object(n.b)("p",null,"But a ",Object(n.b)("strong",{parentName:"p"},"more important reason")," is found in line ","#","7: ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"return head + sum(tail)"),". By choosing to do it this way, we have to push our first function call ",Object(n.b)("strong",{parentName:"p"},"onto the stack")," (in memory) and ",Object(n.b)("em",{parentName:"p"},"wait for the second call to return")," before we can return from the first. Then we have to push the second call onto the stack and wait for the third, etc."),Object(n.b)("p",null,"If the list is 1000 items long, then we have to ",Object(n.b)("strong",{parentName:"p"},"hold 999 calls on the stack")," waiting for that last call to return. That takes a lot of memory. But we can't do the addition","—",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"head + sum(tail)"),"—","until we know what ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"sum(tail)")," is, right? So we're stuck."),Object(n.b)("p",null,"But if we do it like this:"),Object(n.b)(l.a,{code:"return sum(tail, total + head)",showLineNumbers:!1,mdxType:"Highlighter"}),Object(n.b)("p",null,"Then we ",Object(n.b)("em",{parentName:"p"},"know")," what ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"tail")," is and we ",Object(n.b)("em",{parentName:"p"},"know")," what ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"total + head")," is ",Object(n.b)("em",{parentName:"p"},"at the time of the function call"),". So instead of pushing our function onto the stack and waiting for the second iteration to return, we can simply ",Object(n.b)("strong",{parentName:"p"},"replace")," the first function call with the second, right?"),Object(n.b)("p",null,"Essentially, writing our function-that-calls-itself in this manner makes it work ",Object(n.b)("em",{parentName:"p"},"exactly like a loop"),". So it's as fast and uses as little memory, effectively. Now we get the benefits of the speed and efficiency of a loop without all the unintuitive looping constructs: the best of both worlds."),Object(n.b)(c.a,{mdxType:"TerminologyBlock"},"This is called ",Object(n.b)(r.a,{href:"https://en.wikipedia.org/wiki/Tail_call",mdxType:"OffsiteLink"},"tail recursion")," because the recursive call is the “tail call” of the function. Whenever you use recursion, it should ",Object(n.b)("em",null,"always")," be tail recursion unless it is guaranteed to recurse only a very limited number of times."),Object(n.b)("p",null,"Looked at another way, the second example above","—",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"return head + sum(tail)"),"—","runs ",Object(n.b)("em",{parentName:"p"},"nested"),":"),Object(n.b)(l.a,{code:"sum([1, 2, 3, 4, 5]) === 1 + (\n  2 + (\n    3 + (\n      4 + (\n        5 + (\n          0\n        )\n      )\n    )\n  )\n)",mdxType:"Highlighter"}),Object(n.b)("p",null,"Which means it actually adds the list from last to first: ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0 + 5 + 4 + 3 + 2 + 1"),". This is because it has to unwind the stack, returning from each inner call before it can return from the outer call that wraps it."),Object(n.b)("p",null,"The first example above","—",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"return sum(tail, total + head)"),"—","just makes successive calls to the same function:"),Object(n.b)(l.a,{code:"sum([1, 2, 3, 4, 5]) // replaced by\nsum([2, 3, 4, 5], 1) // replaced by\nsum([3, 4, 5], 3)    // replaced by\nsum([4, 5], 6)       // replaced by\nsum([5], 10)         // returns 15",mdxType:"Highlighter"}),Object(n.b)("p",null,"So this version adds in the order you'd expect: ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0 + 1 + 2 + 3 + 4 + 5"),". Each call completes by making the next call, so the calls can replace each other on the stack. There's nothing to unwind. When the last call returns, that's our expected value."),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Each of the three lines of our function block has a specific purpose"),"."),Object(n.b)("p",null,"For a function calling itself to work, we must observe two rules:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"We must have a ",Object(n.b)(r.a,{href:"https://en.wikipedia.org/wiki/Recursion#base_case",mdxType:"OffsiteLink"},"base case")," where the function returns something ",Object(n.b)("em",{parentName:"li"},"without")," calling itself."),Object(n.b)("li",{parentName:"ol"},"Each time we call the function from within the function we must call it with ",Object(n.b)("em",{parentName:"li"},"different")," arguments, ",Object(n.b)("em",{parentName:"li"},"and the arguments must approach the base case!"))),Object(n.b)("p",null,"Let's look at the lines one at a time:"),Object(n.b)(l.a,{code:"if (nums.length < 1) { return total }",startingLineNumber:2,mdxType:"Highlighter"}),Object(n.b)("p",null,"This is our ","“","base case","”",". It tells our function when to ",Object(n.b)("strong",{parentName:"p"},"stop")," calling itself. When there is nothing left in the array that we're passing to our function","—","i.e., the argument is the empty list","—","then we just return our running total. That stops the loop. It's essentially a ",Object(n.b)(r.a,{href:"https://en.wikipedia.org/wiki/Guard_(computer_science)",mdxType:"OffsiteLink"},"guard"),"."),Object(n.b)(l.a,{code:"const [head, ...tail] = nums",startingLineNumber:4,mdxType:"Highlighter"}),Object(n.b)("p",null,"We are always going to operate on one element of the array at a time, so we'll need to lop the head off the array. When we next call the function, it will be on the remaining elements","—","the ",Object(n.b)("strong",{parentName:"p"},"tail"),"—","so we need to hang on to those as well."),Object(n.b)("p",null,"Recall that arrays are passed by ","“","reference","”",", which means they are not copied in but merely pointed to. So we'll want to copy the tail and use the copy rather than mutating the original list. Destructuring and the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"...")," (rest) syntax achieves that for us."),Object(n.b)("p",null,"When we do:"),Object(n.b)(l.a,{code:"const [head, ...tail] = [1, 2, 3, 4, 5]",showLineNumbers:!1,mdxType:"Highlighter"}),Object(n.b)("p",null,"Then:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"variable ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"head")," has value ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"1")),Object(n.b)("li",{parentName:"ul"},"variable ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"tail")," has value ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"[2, 3, 4, 5]"),".")),Object(n.b)("p",null,"And these are new values in new variables. Our initial array remains unchanged."),Object(n.b)("p",null,"Finally, we do the work in our third line of code:"),Object(n.b)(l.a,{code:"return sum(tail, total + head)",startingLineNumber:6,mdxType:"Highlighter"}),Object(n.b)("p",null,"First time through, our ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"total")," defaulted to ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"0"),", so given the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"head")," and ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"tail")," above, this becomes:"),Object(n.b)(l.a,{code:"return sum([2, 3, 4, 5], 0 + 1)",showLineNumbers:!1,mdxType:"Highlighter"}),Object(n.b)("p",null,"Watch it in action:"),Object(n.b)(o.a,Object.assign({},F,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"As you can see, the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"total")," accumulates the value of our running total. But we could ","“","accumulate","”"," anything, right?"),Object(n.b)("p",null,"Consider an example where we have an array of numbers and we want to convert it to an array of the ",Object(n.b)("em",{parentName:"p"},"squares")," of those numbers. In other words, we want to loop through the array squaring each element and returning a ",Object(n.b)("em",{parentName:"p"},"new")," array of the squares. Easy!"),Object(n.b)(o.a,Object.assign({},U,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"Passing an accumulator makes it possible to do almost ",Object(n.b)("em",{parentName:"p"},"anything")," a loop can do by simply writing a function that calls itself."),Object(n.b)("p",null,"Writing functions that call themselves is easy and fun, but functional JavaScript is all about ",Object(n.b)("strong",{parentName:"p"},"reusability"),". It doesn't take writing too many functions like the ones above to start to see certain patterns emerging."),Object(n.b)("p",null,"When we wrote our ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"sum")," function, we took a list of items and reduced it down to a single item. We can write a function called ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce")," that takes a list of items and reduces it to a single output. We just need three things:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"The code block that will be executed each time the function runs"),Object(n.b)("li",{parentName:"ol"},"The starting value of our accumulator (",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"0")," and ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"[]")," respectively above)"),Object(n.b)("li",{parentName:"ol"},"The list on which we'll operate (",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"[1, 2, 3, 4, 5]")," above)")),Object(n.b)(c.a,{mdxType:"TerminologyBlock"},"The ",Object(n.b)("code",null,"reduce")," function is common in functional programming and goes by many other names, the most common of which is ",Object(n.b)(r.a,{href:"https://en.wikipedia.org/wiki/Fold_(higher-order_function)",mdxType:"OffsiteLink"},"fold"),". This is one of the most powerful functions in FP: one with which you should become intimately familiar.",Object(n.b)("br",null),Object(n.b)("br",null),"According to Wikipedia, “Folds are in a sense dual to unfolds, which take a seed value and apply a function corecursively to decide how to progressively construct a corecursive data structure, whereas a fold recursively breaks that structure down, replacing it with the results of applying a combining function at each node on its terminal values and the recursive results (catamorphism, versus anamorphism of unfolds).”",Object(n.b)("br",null),Object(n.b)("br",null),"I mean, could it be any easier? Am I right?"),Object(n.b)("p",null,"But we want our ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce")," function to be generic, so we'll want to pass it the code block. How do we pass code blocks around in functional JavaScript? ",Object(n.b)("strong",{parentName:"p"},"Functions"),", of course. So our ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce")," function will take:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"A ",Object(n.b)("strong",{parentName:"li"},"function")," to be applied to the accumulator and each item of the list in turn"),Object(n.b)("li",{parentName:"ol"},"The starting accumulator"),Object(n.b)("li",{parentName:"ol"},"The list of values")),Object(n.b)("p",null,"And we can see that the function we provide as our first argument must:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Take as parameters:",Object(n.b)("ol",{parentName:"li"},Object(n.b)("li",{parentName:"ol"},"The accumulator (running total) as an argument"),Object(n.b)("li",{parentName:"ol"},"The head of the list as an argument"))),Object(n.b)("li",{parentName:"ul"},"Return a ",Object(n.b)("em",{parentName:"li"},"new")," accumulator value, which will be used on the next call (e.g., ",Object(n.b)("code",Object.assign({parentName:"li"},{className:"language-text"}),"total + head"),")")),Object(n.b)("p",null,"For example, if we want to sum up a list of numbers, the function we pass to ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce")," might look like this:"),Object(n.b)(l.a,{code:"(accumulator, value) => accumulator + value",showLineNumbers:!1,mdxType:"Highlighter"}),Object(n.b)("p",null,"When we ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"map")," our list to the squares of the numbers, things get even simpler. We know we're just mapping from one array to another of equal size, right? So our starting accumulator is always ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"[]"),". We don't really need to pass it to our function as it never changes. Thus, we can create a ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"map")," function that:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Takes as parameters:",Object(n.b)("ol",{parentName:"li"},Object(n.b)("li",{parentName:"ol"},"A function to apply to each item in a list"),Object(n.b)("li",{parentName:"ol"},"A list of items to apply it to"))),Object(n.b)("li",{parentName:"ul"},"Returns a ",Object(n.b)("em",{parentName:"li"},"new")," list of the results from passing the originals list's items through the function supplied")),Object(n.b)("p",null,"Modern JavaScript provides functions such as ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"map")," and ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce")," (and many more) already implemented for you. You just need to supply the right arguments."),Object(n.b)("p",null,"The built-in versions work in a very OO way: You call the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"map")," ",Object(n.b)("em",{parentName:"p"},"method")," on the array (list) you want to map, pass it the function you want to apply to each item in turn, and it returns a ",Object(n.b)("em",{parentName:"p"},"new")," array of the results."),Object(n.b)("p",null,"Similarly, you call the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce")," method on the array you want to reduce in some way, pass it the function (that takes the accumulator and each item in turn and returns a new accumulator value), and pass it the starting accumulator. It returns the final accumulator value, whatever that is."),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"But there is an even better way to do this functionally by pulling the methods out into their own functions, and passing the lists they operate on as an argument, rather than as the caller of a method.")),Object(n.b)("p",null,"For this purpose, there are numerous libraries out there, the most popular of which is ",Object(n.b)(r.a,{href:"https://github.com/lodash/lodash/wiki/FP-Guide",mdxType:"OffsiteLink"},"Lodash"),". (But only use the new ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"lodash/fp")," module! The original module is broken.)."),Object(n.b)("p",null,"The ",Object(n.b)(r.a,{href:"https://ramdajs.com/",mdxType:"OffsiteLink"},"Ramda")," library is much better, having been built (mostly) correctly from the getgo. The best, however, is ",Object(n.b)(r.a,{href:"https://sanctuary.js.org/",mdxType:"OffsiteLink"},"Sanctuary"),", which is ",Object(n.b)(r.a,{href:"https://sanctuary.js.org/#overview",mdxType:"OffsiteLink"},"scrupulously correct"),", but this also makes it difficult to use in production. There is no slack at all. You must be ",Object(n.b)("em",{parentName:"p"},"meticulous"),"."),Object(n.b)(c.a,{mdxType:"TerminologyBlock"},"Sanctuary uses the nefarious ",Object(n.b)(r.a,{href:"https://sanctuary.js.org/#maybe-type",mdxType:"OffsiteLink"},"Maybe")," and ",Object(n.b)(r.a,{href:"https://sanctuary.js.org/#either-type",mdxType:"OffsiteLink"},"Either")," ",Object(n.b)(r.a,{href:"https://en.wikipedia.org/wiki/Monad_(functional_programming)",mdxType:"OffsiteLink"},"monads"),", which are wonderful but take some getting used to for sure. They explain why ",Object(n.b)(r.a,{href:"https://sanctuary.js.org/#overview",mdxType:"OffsiteLink"},"not even Ramda")," meets their exacting standards (Lodash doesn't even warrant a mention).",Object(n.b)("br",null),Object(n.b)("br",null),"But for the hardcore..."),Object(n.b)("p",null,"For most cases, Ramda is your best bet unless you are already committed to something else. Below we examine the most common functions/methods available and show how they can be used both in vanilla JavaScript and in Ramda."),Object(n.b)("p",null,"(Note: While there is a Node framework called ","“","VanillaJS","”"," with ",Object(n.b)("strong",{parentName:"p"},"no apparent sense of irony"),", what we mean here by vanilla JavaScript is JavaScript used ",Object(n.b)("em",{parentName:"p"},"without")," adding libraries or frameworks","—","using only the built-in functionality.)"),Object(n.b)("p",null,"(P.S. the ",Object(n.b)(r.a,{href:"https://ramdajs.com/repl/",mdxType:"OffsiteLink"},"Ramda REPL")," is awesome. You can play with all this stuff in there, and all the Ramda functions are automagically imported. And you can ",Object(n.b)(r.a,{href:"https://ramdajs.com/repl/?v=0.26.1#?const%20nums%20%3D%20%5B1%2C%202%2C%203%2C%204%2C%205%5D%0A%0A%2F%2F%20Vanilla%20JS%3A%20map%20as%20a%20method%20on%20array%0Aconst%20vjsSquares%20%3D%20nums.map%28x%20%3D%3E%20x%20%2A%20x%29%0A%0A%2F%2F%20The%20purely%20functional%20way%20with%20Ramda%3A%20pass%20the%20array%0Aconst%20ramdaSquares%20%3D%20map%28x%20%3D%3E%20x%20%2A%20x%2C%20nums%29%0A%0Aconsole.log%28%60The%20squares%20by%20Array.map%3A%20%24%7BJSON.stringify%28vjsSquares%29%7D%60%29%0Aconsole.log%28%60The%20squares%20by%20Ramda%27s%20map%3A%20%24%7BJSON.stringify%28ramdaSquares%29%7D%60%29%0A",mdxType:"OffsiteLink"},"bookmark your examples"),".)"),Object(n.b)("h3",{id:"map"},"Use ",Object(n.b)("code",null,"map")," to modify each value in a list"),Object(n.b)("p",null,"The ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"map")," method (or function) does exactly what our ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"map")," method above does, except abstractly: we can supply any function we like and it will be applied to each item in the list in turn, returning a new list of the ","“","mapped","”"," items."),Object(n.b)("p",null,"In other words, to get it to ",Object(n.b)("em",{parentName:"p"},"square")," each  of the numbers in our array, we need to pass it a squaring function: ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"x => x * x")," will work:"),Object(n.b)(o.a,Object.assign({},v,{warn:function(){return Object(n.b)("small",null,"Look, ma! No loops!")},mdxType:"CodeBlock"})),Object(n.b)("p",null,"Both the built-in ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"map")," method and Ramda's ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"map")," function work the same, so why use the latter? We'll see advantages when we get to pipelining functions below."),Object(n.b)("p",null,"If you're working on a small project and you can do it entirely in vanilla JS without importing a library such as Ramda, then maybe you should just use vanilla JS. But on most larger projects, you're going to need a library such as Ramda for many things, so you might as well use Ramda functions over the built in ones."),Object(n.b)("p",null,"But more on that below. Let's take another example of ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"map")," before we move on:"),Object(n.b)(o.a,Object.assign({},x,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"OK, one more:"),Object(n.b)(o.a,Object.assign({},N,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"So we can use conditionals or anything we like really, modifying some, all, or none."),Object(n.b)("h3",{id:"reduce"},"Use ",Object(n.b)("code",null,"reduce")," to combine elements in a list"),Object(n.b)("p",null,"We've already talked about ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce")," above. It takes a function, a starting accumulator, and the list to process. It returns the final accumulator."),Object(n.b)("p",null,"Above we used ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce")," first to add a list of numbers together to get a sum. Let's do it again using the Array's ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce")," method and Ramda's ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce")," function:"),Object(n.b)(o.a,Object.assign({},A,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"We'll see ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce")," again and again in the examples below. You can make any of these other functions from ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce"),"."),Object(n.b)("h3",{id:"reduce-again"},"More fun with ",Object(n.b)("code",null,"reduce")),Object(n.b)("p",null,"Suppose we want to loop through an object and uppercase every string value. Can we do that with ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce"),"? Easy peasy:"),Object(n.b)(o.a,Object.assign({},E,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"The above example isn't the greatest. We reach outside the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce")," function to access our ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"bob")," object. We should really wrap the function and make a version that takes an object:"),Object(n.b)(o.a,Object.assign({},q,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"Now we're beginning to see the advantage of Ramda. Our new ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduceOverObject")," function takes a function and passes it ",Object(n.b)("em",{parentName:"p"},"three")," arguments: the current accumulator, the current key, and the current value. And we pass it the object rather than just the array of keys."),Object(n.b)("p",null,"Sweet. Everything is neatly contained in my ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduceOverObject")," function. Consider how clean and readable this line is:"),Object(n.b)(l.a,{code:"const upcased = reduceOverObject(upcaseStrings, {}, bob)",startingLineNumber:25,mdxType:"Highlighter"}),Object(n.b)("p",null,"Can we duplicate the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"map")," function with ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce"),"? Easy!"),Object(n.b)(o.a,Object.assign({},S,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"No need to write this function, of course! Just use ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"map"),". But as you'll see here, ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce")," is the mother of all these functions. We can recreate virtually all of them with ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce"),", and we can build even more powerful functions on top of ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce"),". And ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"reduce")," is easily created itself by writing a function that calls itself."),Object(n.b)("p",null,"Functional code, especially with reuse, is ",Object(n.b)("em",{parentName:"p"},"simpler")," than the OO equivalent. That means fewer lines, drier code, more reusability, and more power. Free your methods! Use functions instead, and treat Objects as types to be passed around, rather than the output of ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"new <ClassName>()"),"."),Object(n.b)("h3",{id:"filter"},"Use ",Object(n.b)("code",null,"filter")," to choose particular values from a list"),Object(n.b)("p",null,"The ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"filter")," method or function takes a function that returns a Boolean value and a list of items. It applies the function to each item in the list in turn. If the value returned is ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"true"),", then that item is included in the output list. If it is ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"false"),", then it isn't included. Remember, the output is a copy."),Object(n.b)("p",null,"Suppose we had a list of names and we wanted to find all the names at least 5 letters long. We could do that easily with the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"filter")," method:"),Object(n.b)(o.a,Object.assign({},O,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"Who needs loops? Not us."),Object(n.b)("h3",{id:"adjust"},"Use ",Object(n.b)("code",null,"adjust")," to update a single value in a list"),Object(n.b)("p",null,"What if we want to update an element at a specified index in an array. The mutable way would be simple: ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"names[1] = 'Carole'"),"."),Object(n.b)("p",null,"But that mutates our original list. What we want is a new copy of the list with just that element updated. Ramda provides an ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"adjust")," function to do just this, but we could also write our own version in vanilla JS:"),Object(n.b)(o.a,Object.assign({},m,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"Now you're probably wondering why we might add the Ramda dependency with its load time if we can write our own functions so easily."),Object(n.b)("p",null,"Well, it depends on what we need. If our needs are as simple as above, then to write our own is probably the way to go. (But be advised that we are then responsible for testing and maintaining our utility functions as well.)"),Object(n.b)("p",null,"But the Ramda ",Object(n.b)(r.a,{href:"https://ramdajs.com/docs/#adjust",mdxType:"OffsiteLink"},"adjust")," function can do much more than our version. For one thing, we can apply the arguments ",Object(n.b)("em",{parentName:"p"},"one a time"),", and with each, get back a function that remembers the arguments already supplied and takes the remaining parameters:"),Object(n.b)(o.a,Object.assign({},b,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"Ramda's ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"adjust")," can also handle negative indexes (working back from the end of the list). Our ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"vadjust")," fails on negative indexes. And if we pass an index that's out of range, then Ramda's ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"adjust")," returns our list unchanged so we can continue processing. Again, our version fails. We could fix our version:"),Object(n.b)(o.a,Object.assign({},L,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"But now it's on us to test it and keep it current. Much easier to use a library such as Ramda or Lodash/FP!"),Object(n.b)("h3",{id:"append-insert-prepend"},"Use ",Object(n.b)("code",null,"append"),", ",Object(n.b)("code",null,"insert"),", or ",Object(n.b)("code",null,"prepend")," to add an item to a list"),Object(n.b)("p",null,"These functions do exactly what you'd expect. Should we do it by hand, or use a library? For ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"append")," and ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"prepend"),", at least, vanilla JS is probably enough","—","unless we're pipelining (composing) functions."),Object(n.b)("p",null,"The ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"append")," is the easiest:"),Object(n.b)(o.a,Object.assign({},h,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"The ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"prepend")," is also very easy:"),Object(n.b)(o.a,Object.assign({},T,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"The ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"insert")," function is a bit trickier:"),Object(n.b)(o.a,Object.assign({},w,{mdxType:"CodeBlock"})),Object(n.b)("h3",{id:"remove"},"Use ",Object(n.b)("code",null,"remove")," to remove an item from a list"),Object(n.b)("p",null,"Ramda's ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"remove")," function removes one or more sequential items from a list."),Object(n.b)("p",null,"It expects three parameters:"),Object(n.b)("ol",null,Object(n.b)("li",{parentName:"ol"},"The index at which to start removing items."),Object(n.b)("li",{parentName:"ol"},"The number of items to remove."),Object(n.b)("li",{parentName:"ol"},"The list from which to remove the items")),Object(n.b)("p",null,"And returns a ",Object(n.b)("strong",{parentName:"p"},"copy")," of the list with the items removed."),Object(n.b)("p",null,"We can accomplish this in vanilla JS with a little more work. What we want to ",Object(n.b)("strong",{parentName:"p"},"avoid")," is using the Array ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"splice")," method as it mutates the array in place, and we would never do that, would we?"),Object(n.b)(o.a,Object.assign({},R,{mdxType:"CodeBlock"})),Object(n.b)("h3",{id:"concat"},"Use ",Object(n.b)("code",null,"concat")," or ",Object(n.b)("code",null,"zip")," to combine two lists"),Object(n.b)("p",null,"The ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"concat")," function takes two arrays of equal length and returns an array of arrays, each with two elements: the first from the first array; the second the matching element in the second array. For example:"),Object(n.b)(l.a,{code:"concat([1, 2], [3, 4]) // yields [1, 2, 3, 4]",showLineNumbers:!1,mdxType:"Highlighter"}),Object(n.b)(o.a,Object.assign({},j,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"The ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"zip")," function takes two arrays of equal length and returns an array of arrays, each with two elements: the first from the first array; the second the matching element in the second array. For example:"),Object(n.b)(l.a,{code:"zip([1, 2], [3, 4]) // yields [[1, 3], [2, 4]]",showLineNumbers:!1,mdxType:"Highlighter"}),Object(n.b)(o.a,Object.assign({},I,{mdxType:"CodeBlock"})),Object(n.b)("h3",{id:"times"},"Use ",Object(n.b)("code",null,"times")," to create a new list"),Object(n.b)("p",null,"The ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"times")," function takes a function and a number of times, ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"n"),", to iterate and returns an array of ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"n")," length with the result of calling the function with the array index. So:"),Object(n.b)(l.a,{code:"times(n => n * 2, 5) // yields [0, 2, 4, 6, 8]",showLineNumbers:!1,mdxType:"Highlighter"}),Object(n.b)("p",null,"Easy, no?"),Object(n.b)("p",null,"Doing the same in vanilla JS can be a bit more complex."),Object(n.b)(o.a,Object.assign({},B,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"Some equivalencies (there may be easier ways, but we don't know them):"),Object(n.b)(l.a,{code:"times(identity, 5) // yields [0, 1, 2, 3, 4]\nnew Array(5).fill(null).map((_, i) => i) // yields [0, 1, 2, 3, 4]\n\ntimes(n => (n + 1) * (n + 1), 5) // yields [1, 4, 9, 16, 25]\nnew Array(5).fill(null).map((_, i) => (i + 1) * (i + 1)) // [1, 4, 9, 16, 25]\n\ntimes(() => '', 3) // yields ['', '', '']\nnew Array(3).fill('') // yields ['', '', '']\n\ntimes(n => n.toString(2), 12) // yields binary 0 to 1011\nnew Array(12).fill(null).map((_, i) => (i + 1).toString(2)) // yields binary 0 to 1011",showLineNumbers:!1,mdxType:"Highlighter"}),Object(n.b)("p",null,"As you can see, while it can be done in vanilla JS, the Ramda ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"times")," function is much easier to use. You could, of course, create your own vanilla JS version, but we'll leave that as an exercise for the reader."),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Note"),": The ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"_")," (underscore) is often used in functional programming to indicate a value that we don't care about. In the above examples, the Array ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"map")," method passes the index as the ",Object(n.b)("em",{parentName:"p"},"second")," argument to the function. Here we only care about the index, not the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"null")," that is the value at that index, so we use ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"(_, i)")," to get the index of the element and ignore the value at that index."),Object(n.b)("h3",{id:"head-tail"},"Use ",Object(n.b)("code",null,"head")," and ",Object(n.b)("code",null,"tail")," to destructure a list"),Object(n.b)("p",null,"Remember that the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"head")," of a list is just the first element in the list. If it's a list of numbers, then the head is a number; if a list of strings, then the head is a string."),Object(n.b)("p",null,"The ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"tail"),", in contrast, is ",Object(n.b)("em",{parentName:"p"},"the rest of the array"),", so it is ",Object(n.b)("strong",{parentName:"p"},"always")," an array of the same type as the original array, just without the head element. Note: the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"tail")," can be ",Object(n.b)("em",{parentName:"p"},"empty"),", but it is never undefined."),Object(n.b)("p",null,"If we try to get the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"head")," of an empty array, it will be ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"undefined"),"."),Object(n.b)(o.a,Object.assign({},y,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"Frankly, this is one area where Ramda's functions don't always add much value. It is usually easier to use destructuring. Where Ramda's ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"head")," and ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"tail")," functions are very useful is in pipelined functions, discussed in ",Object(n.b)(i.a,{to:"/inductive/composition/","aria-label":"Composition",mdxType:"Link"},"We can has pipelines!")),Object(n.b)("h3",{id:"all"},"Use ",Object(n.b)("code",null,"all"),", ",Object(n.b)("code",null,"any"),", or ",Object(n.b)("code",null,"none")," to test a list"),Object(n.b)("p",null,"The ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"all")," takes a function and a list, applies the function to each item in the list, and returns ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"true")," ",Object(n.b)("em",{parentName:"p"},"if and only if")," the function passed returns true ",Object(n.b)("strong",{parentName:"p"},"every time")," it is applied to an item in the list."),Object(n.b)("p",null,"The vanilla JS equivalent is the Array ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"every")," method."),Object(n.b)(o.a,Object.assign({},d,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"The ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"any")," takes a function and a list, applies the function to each item in the list, and returns ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"true")," ",Object(n.b)("em",{parentName:"p"},"if and only if")," the function passed returns true ",Object(n.b)("strong",{parentName:"p"},"at least once")," when it is applied to an item in the list."),Object(n.b)("p",null,"The vanilla JS equivalent is the Array ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"some")," method."),Object(n.b)(o.a,Object.assign({},p,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"The ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"none")," takes a function and a list, applies the function to each item in the list, and returns ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"true")," ",Object(n.b)("em",{parentName:"p"},"if and only if")," the function passed returns ",Object(n.b)("strong",{parentName:"p"},"false")," every time it is applied to an item in the list."),Object(n.b)("p",null,"The vanilla JS equivalent is the Array ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"every")," method, but with the function changed to return ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"true")," when the condition is ",Object(n.b)("strong",{parentName:"p"},"not")," met, which is pretty non-intuitive. But there doesn't appear to be a true equivalent of ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"none")),Object(n.b)(o.a,Object.assign({},k,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"Of course, all of the Array methods are ",Object(n.b)("strong",{parentName:"p"},"methods"),", so they must be called on the array, which makes pipelining functions more difficult, as we'll see. The Ramda functions are true functions."),Object(n.b)("h3",{id:"flatten"},"Use ",Object(n.b)("code",null,"flatten")," to flatten nested lists into a single list"),Object(n.b)("p",null,"This is a simple way to turn this:"),Object(n.b)(l.a,{code:"[[1, 2, 3], [4, 5], [6, 7, 8]]",mdxType:"Highlighter"}),Object(n.b)("p",null,"Into this:"),Object(n.b)(l.a,{code:"[1, 2, 3, 4, 5, 6, 7, 8]",mdxType:"Highlighter"}),Object(n.b)("p",null,"Let's try it:"),Object(n.b)(o.a,Object.assign({},f,{mdxType:"CodeBlock"})),Object(n.b)("p",null,"In this unusual case, working with ",Object(n.b)("em",{parentName:"p"},"partially")," unnesting arrays is actually easier with the Array ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"flat")," method. Of course, because the method returns a copy, we could always create our own."),Object(n.b)("p",null,"Here use Ramda's ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"curry")," function (more on this later) to make it possible to apply the arguments one at a time. This gives us the same power as Ramda's functions to be ","“","partially applied","”"," and then used in pipelined functions:"),Object(n.b)(o.a,Object.assign({},C,{mdxType:"CodeBlock"})),Object(n.b)("h3",{id:"avoid-foreach"},"Avoid ",Object(n.b)("code",null,"forEach"),"! Avoid ",Object(n.b)("code",null,"forEach"),"! Avoid ",Object(n.b)("code",null,"forEach"),"!"),Object(n.b)("p",null,"The ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"forEach")," method on the Array (and","—","gasp!","—","the ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"forEach")," function in Ramda) is used ",Object(n.b)("strong",{parentName:"p"},"entirely for side effects"),". Say it ain't so, Ramda!"),Object(n.b)("p",null,"Side effects almost always mean mutation. And that leads directly to the ",Object(n.b)("em",{parentName:"p"},"zombie apocalypse"),". Avoid."),Object(n.b)(o.a,Object.assign({},g,{theme:"dark",warn:function(){return Object(n.b)("small",null,"Get thee behind me, Satan!")},mdxType:"CodeBlock"})),Object(n.b)("p",null,"Every time you use ",Object(n.b)("code",Object.assign({parentName:"p"},{className:"language-text"}),"forEach"),", a kitten dies. A really adorable one. Just sayin'."),Object(n.b)("p",null,"Next, we'll talk about ",Object(n.b)(i.a,{to:"/inductive/composition/","aria-label":"Composition",mdxType:"Link"},"pipelines"),"."),Object(n.b)("small",null,"Errors, bugs, suggestions, questions? Spare paper bags filled with unmarked fifties and hundreds? Contact ",Object(n.b)("a",{href:"mailto:charles_munat@bnz.co.nz"},"Charles Munat")),".")}P.isMDXComponent=!0},210:function(e,t,a){"use strict";var n=a(0),s=a.n(n),o=a(68),l=a.n(o);a.d(t,"a",function(){return l.a});a(211),a(9).default.enqueue,s.a.createContext({})},211:function(e,t,a){var n;e.exports=(n=a(213))&&n.default||n},212:function(e){e.exports={data:{site:{siteMetadata:{title:"How to FP"}}}}},213:function(e,t,a){"use strict";a.r(t);a(52),a(17),a(14),a(15),a(8),a(22);var n=a(0),s=a.n(n),o=a(96);function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),a.push.apply(a,n)}return a}function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}t.default=function(e){var t=e.location,a=e.pageResources;return a?s.a.createElement(o.a,function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(a,!0).forEach(function(t){i(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(a).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}({location:t,pageResources:a},a.json)):null}},214:function(e,t,a){"use strict";var n=a(215),s=a(0),o=a.n(s),l=a(223),i=a.n(l);function r(e){var t=e.lang,a=e.title,s=n.data.site;return o.a.createElement(i.a,{htmlAttributes:{lang:t},title:a?a+" | "+s.siteMetadata.title:s.siteMetadata.title},o.a.createElement("script",{src:"https://embed.runkit.com","data-element-id":"runkit"}))}r.defaultProps={lang:"en",meta:[],description:""},t.a=r},215:function(e){e.exports={data:{site:{siteMetadata:{title:"How to FP",description:"Functional JavaScript for the OO programmer.",author:"@chasm"}}}}},216:function(e,t,a){"use strict";var n=a(212),s=(a(222),a(0)),o=a.n(s),l=(a(16),a(41),a(210)),i=a(23);function r(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(l.a,{to:"/inductive",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Bottom-up"),o.a.createElement(l.a,{to:"/deductive",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Top-down"),o.a.createElement(l.a,{to:"/cypress",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Cypress"))}function c(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(l.a,{to:"/inductive/reusability",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Reusability"),o.a.createElement(l.a,{to:"/inductive/immutability",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Variables"),o.a.createElement(l.a,{to:"/inductive/iteration",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Looping"),o.a.createElement(l.a,{to:"/inductive/composition",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Pipelines"))}function u(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(l.a,{to:"/deductive/pure-functions/",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"Pure functions"),o.a.createElement(l.a,{to:"/deductive/more-fp-concepts",style:{color:"white",textDecoration:"none",textTransform:"lowercase",display:"inline-block",padding:"0 0.5rem"}},"More FP concepts"))}function m(e){switch(e.location.pathname.split("/")[1]){case"inductive":return o.a.createElement(c,null);case"deductive":return o.a.createElement(u,null);default:return o.a.createElement(r,null)}}var b=function(e){var t=e.siteTitle,a=e.location,n=function(e){switch(e.pathname.split("/")[1]){case"inductive":return"ForestGreen";case"deductive":return"MediumBlue";case"cypress":return"Maroon";default:return"RebeccaPurple"}}(a);return o.a.createElement("header",{style:{background:n,marginBottom:"1.45rem"}},o.a.createElement("div",{style:{display:"flex",alignItems:"center",margin:"0 auto",maxWidth:960,padding:"1.45rem 1.0875rem"}},o.a.createElement("h1",{style:{margin:0,display:"inline-block",flexGrow:1}},o.a.createElement(l.a,{to:"/",style:{color:"white",textDecoration:"none"}},t)),o.a.createElement("div",{style:{flexShrink:1}},o.a.createElement(m,{location:a}))))};function d(e){return o.a.createElement(i.Location,null,function(t){return o.a.createElement(b,Object.assign({},t,e))})}b.defaultProps={siteTitle:""};t.a=function(e){var t=e.children,a=n.data;return o.a.createElement(o.a.Fragment,null,o.a.createElement(d,{siteTitle:a.site.siteMetadata.title}),o.a.createElement("div",{style:{margin:"0 auto",maxWidth:960,padding:"0 1.0875rem 1.45rem",paddingTop:0}},o.a.createElement("main",null,t)))}},217:function(e,t,a){"use strict";a.d(t,"a",function(){return r});a(14),a(15),a(8),a(22),a(16);var n=a(210),s=a(0),o=a.n(s),l=a(23);var i=function(e){return function(t){t.preventDefault;var a=window&&"localhost"===window.location.hostname?e:"/fp"+e;Object(l.navigate)(a)}};function r(e){var t=e.children,a=e.to,s=function(e,t){if(null==e)return{};var a,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,["children","to"]);return a.indexOf("#")>-1||a.indexOf("?")>-1?o.a.createElement("a",Object.assign({onClick:i(a)},s,{style:{cursor:"pointer"}}),t):o.a.createElement(n.a,Object.assign({to:a},s),t)}},218:function(e,t,a){"use strict";a.d(t,"a",function(){return r});var n=a(0),s=a.n(n),o=a(445),l=a(443),i=a(444);function r(e){var t=e.code,a=void 0===t?"":t,n=e.language,r=void 0===n?"javascript":n,c=e.showLineNumbers,u=void 0===c||c,m=e.startingLineNumber,b=void 0===m?1:m,d=e.theme,p=void 0===d?"light":d,h=e.warn,g=void 0===h?function(){return null}:h;return s.a.createElement(s.a.Fragment,null,g(),s.a.createElement(o.a,{language:r,style:"light"===p?l.a:i.a,showLineNumbers:u,startingLineNumber:b},a))}},219:function(e,t,a){"use strict";var n=a(0),s=a.n(n),o=a(210);function l(){return s.a.createElement("span",{className:"separator"},"»")}function i(e){var t=e.title,a=e.trail;return void 0===a?null:s.a.createElement("p",null,function(e,t){return void 0===t&&(t=[]),s.a.createElement(s.a.Fragment,null,t.map(function(e){var t=e.href,a=e.label;return s.a.createElement(n.Fragment,{key:t},s.a.createElement(o.a,{to:t},a),s.a.createElement(l,null))}),e)}(t,a))}var r=a(216),c=a(214);t.a=function(e){var t=e.children,a=e.pageContext.frontmatter,n=a.title,o=a.trail;return s.a.createElement(r.a,null,s.a.createElement(c.a,{title:n}),s.a.createElement(i,{title:n,trail:o}),s.a.createElement("article",null,t))}},220:function(e,t,a){"use strict";a.d(t,"a",function(){return o});var n=a(0),s=a.n(n);function o(e){var t=e.children,a=e.href;return s.a.createElement("a",{href:a,target:"_blank",rel:"noopener noreferrer","aria-label":"Offsite link: opens in new window",className:"offsite-link",title:"Offsite link: opens in a new window"},t)}},221:function(e,t,a){"use strict";a.d(t,"a",function(){return r});var n=a(0),s=a.n(n),o=a(224),l=a.n(o),i=a(218);function r(e){var t=e.code,a=void 0===t?"":t,o=e.imports,r=void 0===o?"":o,c=e.requires,u=void 0===c?"":c,m=e.theme,b=void 0===m?"light":m,d=e.warn,p=void 0===d?function(){return null}:d,h=Object(n.useState)(!1),g=h[0],j=h[1];return Object(n.useEffect)(function(){var e=setInterval(function(){j(Boolean(window)&&Boolean(window.RunKit))},1e3);return g&&clearInterval(e),function(){return clearInterval(e)}},[]),g?s.a.createElement("div",{className:"code-block"},p(),s.a.createElement(l.a,{source:""+u+a,nodeVersion:"12",theme:"solarized-"+b})):s.a.createElement(i.a,{code:""+r+a,theme:b,warn:p})}},225:function(e,t,a){"use strict";a.d(t,"a",function(){return o});var n=a(0),s=a.n(n);function o(e){var t=e.children,a=Object(n.useState)(!1),o=a[0],l=a[1];return s.a.createElement(s.a.Fragment,null,s.a.createElement("p",null,s.a.createElement("a",{onClick:function(){return l(!o)},style:{cursor:"pointer"}},s.a.createElement("strong",null,o?"Hide ":"Show "," Evil Terminology"))),o&&s.a.createElement("blockquote",null,t))}},232:function(e,t,a){"use strict";t.a={code:"function sum (nums = [], total = 0) {\n  console.log(`Total is ${total}`)\n  \n  // If nums is empty, return the total to stop the loop\n  if (nums.length < 1) {\n    console.log(`Returning the total of ${total}`)\n    \n    return total\n  }\n\n  // Get the head (first number) and the tail (remaining numbers)\n  // The tail must approach the base case above so the loop terminates\n  const [head, ...tail] = nums\n\n  console.log(`Adding ${head} to ${total}`)\n  \n  // The function calls itself with the remaining numbers and the new total\n  return sum(tail, total + head) \n}\n\nconsole.log(`↪ The sum of [] is ${sum([])}`)\nconsole.log(`↪ The sum of [5] is ${sum([5])}`, '')\nconsole.log(`↪ The sum of [5, 7, 9] is ${sum([5, 7, 9])}`)",imports:"",requires:""}}}]);
//# sourceMappingURL=component---src-pages-inductive-iteration-index-mdx-efa9218ac6b314bb0da3.js.map