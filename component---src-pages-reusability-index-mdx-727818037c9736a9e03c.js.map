{"version":3,"sources":["webpack:///./src/runkits/add.js","webpack:///./src/runkits/area-from-diameter.js","webpack:///./src/runkits/by-reference.js","webpack:///./src/runkits/by-value.js","webpack:///./src/runkits/copy-references.js","webpack:///./src/runkits/function-factory.js","webpack:///./src/runkits/impure-no-no-no.js","webpack:///./src/runkits/multiple-results.js","webpack:///./src/runkits/multiple-results-revised.js","webpack:///./src/runkits/no-parameters.js","webpack:///./src/runkits/recursive-sum.js","webpack:///./src/runkits/returning-undefined.js","webpack:///./src/runkits/sort.js","webpack:///./src/pages/reusability/index.mdx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/SEO/index.js","webpack:///./src/components/Header/index.js","webpack:///./src/components/Layout/index.js","webpack:///./src/components/BreadcrumbTrail/index.js","webpack:///./src/components/PageLayout/index.js","webpack:///./src/components/Highlighter/index.js","webpack:///./src/components/CodeBlock/index.js"],"names":["add","code","imports","requires","area_from_diameter","by_reference","by_value","copy_references","function_factory","impure_no_no_no","multiple_results","multiple_results_revised","no_parameters","recursive_sum","returning_undefined","sort","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","Object","index_es","assign","mdxType","parentName","CodeBlock","areaFromDiameterSource","id","addSource","noParametersSource","returningUndefinedSource","multipleResultsSource","multipleResultsRevisedSource","sortSource","functionFactorySource","gatsby_browser_entry","to","aria-label","Highlighter","showLineNumbers","recursiveSumSource","href","impureNoNoNoSource","byValueSource","byReferenceSource","copyReferencesSource","isMDXComponent","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","d","__webpack_exports__","a","React","createContext","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","_objectSpread","json","propTypes","shape","pathname","SEO","lang","title","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","siteMetadata","src","data-element-id","defaultProps","meta","description","Header","siteTitle","react_default","style","background","marginBottom","display","alignItems","margin","maxWidth","padding","flexGrow","color","textDecoration","flexShrink","textTransform","Layout","children","_856328897","Fragment","components_Header","paddingTop","BreadcrumbTrail","PageLayout","pageContext","frontmatter","react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_1__","react_syntax_highlighter_dist_esm_styles_hljs__WEBPACK_IMPORTED_MODULE_2__","_ref$code","_ref$showLineNumbers","language","solarizedLight","react_runkit__WEBPACK_IMPORTED_MODULE_1__","react_runkit__WEBPACK_IMPORTED_MODULE_1___default","_Highlighter__WEBPACK_IMPORTED_MODULE_2__","_ref$imports","_ref$requires","_useState","useState","show","setShow","useEffect","interval","setInterval","Boolean","window","RunKit","clearInterval","source","nodeVersion"],"mappings":"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","file":"component---src-pages-reusability-index-mdx-727818037c9736a9e03c.js","sourcesContent":["const code = `function add (x, y) {\n  return x + y\n}\n\nconsole.log('Does 5 + 7 equal 12?', add(5, 7) === 12 ? 'Yes!' : 'No')\nconsole.log('Is 5 + 7 still 12?', add(5, 7) === 12 ? 'Yes!!' : 'No')\nconsole.log('What about now?', add(5, 7) === 12 ? 'Yes! Still 12! UNBELIEVABLE! Who knew?' : 'Uh, oh')`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `function areaFromDiameter (diameter) {\n  const radius = diameter / 2\n  \n  return Math.PI * radius * radius\n}\n\nareaFromDiameter(2) // Radius is 1, 1 squared is 1, area should equal PI`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const person = {\n  name: 'Bob',\n  position: 'Tester'\n}\n\nfunction updateName (person, name) {\n  person.name = name\n  \n  return person\n}\n\nconsole.log(\\`updateName(person, 'Bobby') returns person.name of \\${updateName(person, 'Bobby').name}\\`)\nconsole.log(\\`Now look what happened to our outer person.name: \\${person.name}. Not good.\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `let name = 'Bob'\n\nfunction toUpper (name) {\n  name = name.toUpperCase() // name inside the function is a COPY of the string passed in\n  \n  return name // This returns the updated COPY\n}\n\nconsole.log(\\`toUpper(name) yields \\${toUpper(name)}\\`)\nconsole.log(\\`But name is still \\${name}\\`)\n\nname = name.toUpperCase() // Why we don't use \"let\"\n\nconsole.log(\\`But now it isn't: \\${name}\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const person = {\n  name: 'Bob',\n  position: 'Tester'\n}\n\nfunction updateNameCorrectly (person, name) {\n  \n  return {\n    ...person, // copies all of the key-value pairs in person to a new object\n    name // overwrites the name value in the new object\n  }\n}\n\nconsole.log(\\`updateName(person, 'Bobby') returns person.name of \\${updateNameCorrectly(person, 'Bobby').name}\\`)\nconsole.log(\\`Now look what happened to our outer person.name: \\${person.name}. No change. Hooray! We're GENIUSES!\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `function addToN (n) {\n  return x => n + x\n}\n\nconst addToFive = addToN(5)\nconst addToTen = addToN(10)\n\nconsole.log(\\`3 + 5 is \\${addToFive(3)}\\`)\nconsole.log(\\`8 + 5 is \\${addToFive(8)}\\`)\nconsole.log(\\`17 + 10 is \\${addToTen(17)}\\`)\nconsole.log(\\`1 + 10 is \\${addToTen(1)}\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `// For the love of all that is holy and pure, DO NOT DO THIS!\n\n// Do not let the evil \"let\" into your code!\nlet x = 'x'\n\nfunction doEvil (y) {\n  x = y\n}\n\nconsole.log(\\`Oh, look what doEvil returns: \\${doEvil('y')}\\`)\n\nconsole.log(\\`And x is now \\${x}! Oh, the humanity!\\`)\nconsole.log(\\`doEvil changed something other than through its result. That's just so wrong.\\`)\n\n// More evil!\n\nlet i = 1\n\nfunction inc (n) {\n  return n + i\n}\n\nconsole.log(\\`The inc function increments by 1: inc(5) is \\${inc(5)}\\`)\n\ni = 5\n\nconsole.log(\\`Or does it: inc(5) is \\${inc(5)}\\`)\nconsole.log('Calling inc(5) at different times got different results. Ack! No! No! No!')\n`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `function getAreaAndCircumferenceFromRadius (radius) {\n  const area = Math.PI * radius * radius\n  const circumference = Math.PI * radius * 2\n\n  return [area, circumference]\n}\n\nconst [area, circumference] = getAreaAndCircumferenceFromRadius(1)\n\nconsole.log(\\`The area is \\${area}\\`)\nconsole.log(\\`The circumference is \\${circumference}\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const calculateArea = radius => Math.PI * radius * radius\nconst calculateCircumference = radius => Math.PI * radius * 2\n\nfunction getAreaAndCircumferenceFromRadius (radius) {\n  // We can also return an object\n  return {\n    area: calculateArea(radius),\n    circumference: calculateCircumference(radius)\n  }\n}\n\nconst { area, circumference } = getAreaAndCircumferenceFromRadius(1)\n\nconsole.log(\\`The area is \\${area}\\`)\nconsole.log(\\`The circumference is \\${circumference}\\`)`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `function alwaysTrue () {\n  return true\n}\n\n// Let's try it!\nconsole.log('Calling alwaysTrue', alwaysTrue())\nconsole.log('Calling alwaysTrue again', alwaysTrue())\nconsole.log('Calling alwaysTrue one more time', alwaysTrue())`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `function sum (nums = []) {\n  if (nums.length < 1) { return 0 }\n\n  const [head, ...tail] = nums\n\n  return head + sum(tail)\n}\n\nconsole.log('The sum of [] is:', sum([]))\nconsole.log('The sum of [5] is:', sum([5]))\nconsole.log('The sum of [1, 2, 3] is:', sum([1, 2, 3]))`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `function testN (n) {\n  if (n <= -1) { return false }\n  if (n >= 1) { return true}\n\n  return undefined\n}\n\nconsole.log('Testing -5:', testN(-5))\nconsole.log('Testing 7:', testN(7))\nconsole.log('Testing 0:', testN(0))`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","const code = `const asc = (a, b) => a - b\nconst desc = (a, b) => b - a\n\nconst getFirstCapCharCode = s => s.match(/[A-Z]/)[0].charCodeAt(0)\n\nconst firstCapAsc = (a, b) => getFirstCapCharCode(a) - getFirstCapCharCode(b)\nconst firstCapDesc = (a, b) => getFirstCapCharCode(b) - getFirstCapCharCode(a)\n\nconsole.log('Sort [3, 5, 1] ascending:', [3, 5, 1].sort())\nconsole.log('Sort [3, 5, 1] ascending:', [3, 5, 1].sort(asc))\nconsole.log('Sort [3, 5, 1] descending:', [3, 5, 1].sort(desc))\n\nconst strs = ['stRinG', 'nuMber', 'Boolean',  'arraY']\n\nconsole.log('Sort strings ascending:', strs.sort(firstCapAsc))\nconsole.log('Sort strings descending:', strs.sort(firstCapDesc))`\n\nconst imports = ``\n\nconst requires = ``\n\nexport default {\n  code,\n  imports,\n  requires\n}\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/754368/Workspace/fpx/src/components/PageLayout/index.js\";\nimport { Link } from 'gatsby';\nimport Highlighter from '../../components/Highlighter';\nimport CodeBlock from '../../components/CodeBlock';\nimport addSource from '../../runkits/add';\nimport areaFromDiameterSource from '../../runkits/area-from-diameter';\nimport byReferenceSource from '../../runkits/by-reference';\nimport byValueSource from '../../runkits/by-value';\nimport copyReferencesSource from '../../runkits/copy-references';\nimport functionFactorySource from '../../runkits/function-factory';\nimport impureNoNoNoSource from '../../runkits/impure-no-no-no';\nimport multipleResultsSource from '../../runkits/multiple-results';\nimport multipleResultsRevisedSource from '../../runkits/multiple-results-revised';\nimport noParametersSource from '../../runkits/no-parameters';\nimport recursiveSumSource from '../../runkits/recursive-sum';\nimport returningUndefinedSource from '../../runkits/returning-undefined';\nimport sortSource from '../../runkits/sort';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h2>{`Functions are the basic unit of reusability`}</h2>\n    <p>{`Functional programming is programming `}<em parentName=\"p\">{`with functions`}</em>{`. Shocking, no? Who knew?`}</p>\n    <p>{`Functions are the basic unit of reusability. If we have a few lines of code, and they do something that we might want to do again somewhere else in our code, then we can wrap them in a function. Then we can use that function throughout our code.`}</p>\n    <p>{`We don't have to write the algorithm over and over again, which might mean making mistakes and getting different results. It's wrapped up in the function, and we just call the function to run the code and get a result back.`}</p>\n    <p>{`We probably want the function to behave slightly differently in different contexts, so we can pass it arguments. These are the parameters of the function: the context in which it operates. The function takes one or more arguments and returns a single result.`}</p>\n    <p>{`If you think about this, we can consider the input to the function to be the current state of our application (part of it anyway), and the result of the function represents a new, transformed state.`}</p>\n    <p>{`So functions are the way we change state in our application. Essentially, a function is a black box that takes state (in the form of arguments) and returns new state (in the form of a single result):`}</p>\n    <p>{`For example, suppose we wanted to be able to calculate the area of a circle given its diameter. We know that the area of a circle is the radius squared times PI (3.1415926...). We can create a function called `}<inlineCode parentName=\"p\">{`areaFromDiameter`}</inlineCode>{` that takes the diamter as a parameter and returns the area of the circle with that diameter:`}</p>\n    <CodeBlock {...areaFromDiameterSource} mdxType=\"CodeBlock\" />\n    <p>{`Now we can use that throughout our code. See? Functional programming is easy!`}</p>\n    <p><h3 id=\"purity-rules\">{`Given the same arguments, a function must return the same result`}</h3></p>\n    <p>{`Put another way, what a function returns depends `}<em parentName=\"p\">{`entirely`}</em>{` on the arguments passed to the function. Avoid as much as possible writing functions that return a value `}<em parentName=\"p\">{`independently of the inputs`}</em>{`.`}</p>\n    <p>{`Here is a good example: the `}<inlineCode parentName=\"p\">{`add`}</inlineCode>{` function. It takes two numbers and returns the sum of the numbers. If we call it with 5 and 7, then it always returns 12. It doesn't sometimes return 12, sometimes 11, sometimes 13. Right? Make all your functions work this way and your life as a programmer will get much, much easier.`}</p>\n    <CodeBlock {...addSource} mdxType=\"CodeBlock\" />\n    <p><h3 id='real-functions-have-parameters'>{`Functions take at least one parameter`}</h3></p>\n    <p>{`You have probably noticed that we can create a function that has no parameters. How about this one?`}</p>\n    <CodeBlock {...noParametersSource} mdxType=\"CodeBlock\" />\n    <p>{`Kinda boring, huh? Remember that `}<em parentName=\"p\">{`a function always returns the same result for the same arguments`}</em>{`. We can't pass this function any arguments, so we can't change the input in any way, hence we can't change the output either. We have a name for this kind of function. We call it a `}<strong parentName=\"p\">{`constant`}</strong>{`.`}</p>\n    <p>{`Ha, ha. Get it? Because its output is `}<em parentName=\"p\">{`constant`}</em>{`.`}</p>\n    <p>{`Believe it or not, a parameterless function can be useful in rare circumstances in which we `}<em parentName=\"p\">{`want`}</em>{` a function to return the same thing every time it is called. There's an exception to every rule, no? But in daily use, remember that `}<em parentName=\"p\">{`functions take at least one parameter`}</em>{`.`}</p>\n    <p><h3 id='real-functions-return-a-value'>{`Functions return exactly one result`}</h3></p>\n    <p>{`You probably already know that you can't return more than one value from a function. But what we mean by \"exactly one result\" is that you should always return a value. A function that returns no value is `}<strong parentName=\"p\">{`useless`}</strong>{`, as we'll explain below.`}</p>\n    <p>{`To be clear, that value might be the value `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`. But if you are returning `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` from your function, it should be because whatever is calling the function expects `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` to be a possible result and will act on it accordingly. That's different from not returning anything (even though a function without a return statement will, by default, return `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`).`}</p>\n    <p>{`To make this explicit to the next programmer`}{`—`}{`that you `}<em parentName=\"p\">{`intended`}</em>{` to return `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`—`}{`return it explicitly: `}<inlineCode parentName=\"p\">{`return undefined`}</inlineCode>{`. Here is an example:`}</p>\n    <CodeBlock {...returningUndefinedSource} mdxType=\"CodeBlock\" />\n    <p>{`There may be rare occasions when we want to return multiple values from a function. In this instance, we can wrap them up into a composite value and return that. Then we can destructure our values out of it on the other end.`}</p>\n    <p>{`For example, we can use the JavaScript `}<inlineCode parentName=\"p\">{`Array`}</inlineCode>{` as a kind of tuple. A tuple is an ordered list of elements, typically having different datatypes, such as a number, a string, and a boolean. In JavaScript, arrays aren't limited to a single datatype, so they can work as tuples. `}</p>\n    <p>{`Here we have a function that calculates the area and the cirumference of a circle given the radius and returns them in a tuple. We can then destructure them from the tuple:`}</p>\n    <CodeBlock {...multipleResultsSource} mdxType=\"CodeBlock\" />\n    <p>{`In general, returning multiple values from a function is a `}<strong parentName=\"p\">{`code smell`}</strong>{`. Try to avoid it. If you must do it, at least delegate the work to smaller, single-purpose functions:`}</p>\n    <CodeBlock {...multipleResultsRevisedSource} mdxType=\"CodeBlock\" />\n    <p>{`Notice how the name of our function is kind of long? That's a hint that our function is probably doing too much. Refactor, if possible.`}</p>\n    <p><h3 id='join-the-higher-order'>{`Functions can be passed as arguments to other functions`}</h3></p>\n    <p>{`Here is where FP starts to come into its own. If we can pass a function as an argument to another function, then our functions become exponentially more powerful.`}</p>\n    <p>{`This is best explained with an example. The JavaScript `}<inlineCode parentName=\"p\">{`Array`}</inlineCode>{` object has a `}<inlineCode parentName=\"p\">{`sort`}</inlineCode>{` method. The default is to sort in ascending order. This uses a \"comparator\" function that takes two elements from the array and compares them.`}</p>\n    <p>{`If the elements are of equal priority, meaning their ordering doesn't matter, then the comparator function returns zero. If the first argument should come first in the list, then the comparator returns one; if it should come second, it returns minus one. So our default comparator looks like this: `}<inlineCode parentName=\"p\">{`(a, b) => a - b`}</inlineCode>{`.`}</p>\n    <p>{`But what if we want to sort in descending order? Well, we could make our `}<inlineCode parentName=\"p\">{`sort`}</inlineCode>{` method take a constant, such as `}<inlineCode parentName=\"p\">{`ASC`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`DESC`}</inlineCode>{` and switch up the comparator function so on `}<inlineCode parentName=\"p\">{`DESC`}</inlineCode>{` it was `}<inlineCode parentName=\"p\">{`(a, b) => b - a`}</inlineCode>{`, right? But our options are pretty limited here, no? For example, what if we wanted to sort a list of strings by `}<em parentName=\"p\">{`the first uppercase letter in the string?`}</em>{` Uh, oh.`}</p>\n    <p>{`So the \"Vanilla JS\" `}<inlineCode parentName=\"p\">{`sort`}</inlineCode>{` method allows us to pass it our own comparator function. Items in the list (array) will be passed to the comparator two at a time, and  the comparator should return 1, 0, or -1 accordingly. How it does that is up to us.`}</p>\n    <p>{`Here is our example:`}</p>\n    <CodeBlock {...sortSource} mdxType=\"CodeBlock\" />\n    <p>{`Now that is power.`}</p>\n    <p><h3 id='who-wants-curry'>{`Functions can be returned from other functions`}</h3></p>\n    <p>{`We can also return a function from a function. This means we can use functions as factories to create other functions. Here is an example:`}</p>\n    <CodeBlock {...functionFactorySource} mdxType=\"CodeBlock\" />\n    <p>{`This is a pretty simple example, but more useful than you might think. Later, we'll talk about how  we can \"partially apply\" some types of functions, and we'll use an `}<inlineCode parentName=\"p\">{`add`}</inlineCode>{` function as an example. When we start maniuplating lists of items `}<em parentName=\"p\">{`without using loops`}</em>{` we'll see how incredibly powerful this ability to return a function from a function really is.`}</p>\n    <p>{`One thing to note is that under normal circumstances, when we call our `}<inlineCode parentName=\"p\">{`addToN`}</inlineCode>{` function and pass it an argument, say `}<inlineCode parentName=\"p\">{`5`}</inlineCode>{`, the function creates a local (to the function) variable `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{` and assigns it the value `}<inlineCode parentName=\"p\">{`5`}</inlineCode>{`. We can then use it inside our `}<inlineCode parentName=\"p\">{`addToN`}</inlineCode>{` function.`}</p>\n    <p>{`Normally when a function exits and returns a value, it releases all its local variables to be garbage collected. But because our `}<inlineCode parentName=\"p\">{`addToN`}</inlineCode>{` function includes `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{` in the function it returns, we still have a pointer to that variable, which prevents it from being garbage collected until the function we returned is garbage collected.`}</p>\n    <p>{`In this way we can \"capture\" (or \"close\" on) a bit of state and reuse it over and over again, as we did with our `}<inlineCode parentName=\"p\">{`addToFive`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`addToTen`}</inlineCode>{` functions above. That is a `}<em parentName=\"p\">{`very powerful`}</em>{` feature of JavaScript: one you will use over and over and over again.`}</p>\n    <p><h3 id='we-can-has-recursion'>{`Functions can call functions, including themselves`}</h3></p>\n    <p>{`Suppose we want to add up numbers from an array to get the sum. We could use a loop, but that's so last millennium. Let's try another approach using functions `}<strong parentName=\"p\">{`without loops`}</strong>{`. We'll see more of this in the next section, conveniently titled `}<Link to=\"/iteration/\" aria-label=\"Iteration\" mdxType=\"Link\"><em>{`Loops are so last millennium!`}</em></Link></p>\n    <p>{`We need to consider several different possibilities. For example, what if the list we want to add up is empty? What should we return?`}</p>\n    <p>{`You might say an `}<inlineCode parentName=\"p\">{`Error`}</inlineCode>{` object, and in some instances that might be the best option. But in functional programming, we try to avoid using errors wherever possible. And error in functional programming should mean `}<em parentName=\"p\">{`the damn thing is broke`}</em>{` and there ain't no fixing it.`}</p>\n    <p>{`So what is the sum of an empty list of numbers? Why not zero? In short:`}</p>\n    <Highlighter code='sum([]) === 0 // should return true' showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`What about a list with only one number in it, such as `}<inlineCode parentName=\"p\">{`[5]`}</inlineCode>{`? Well, that's just `}<inlineCode parentName=\"p\">{`5`}</inlineCode>{`, isn't it? And `}<inlineCode parentName=\"p\">{`5`}</inlineCode>{` is the same as `}<inlineCode parentName=\"p\">{`5 + 0`}</inlineCode>{`, which is the same as `}<inlineCode parentName=\"p\">{`5 + sum([])`}</inlineCode>{`.`}</p>\n    <p>{`(Because the same input to a function always yields the same result, we can substitute `}<inlineCode parentName=\"p\">{`sum([])`}</inlineCode>{` for `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` in that last example. If `}<inlineCode parentName=\"p\">{`sum([])`}</inlineCode>{` could return different things at different times, then we could not make that substitution. This is the power of \"pure\" functions.)`}</p>\n    <p>{`So if we were to take the list, `}<inlineCode parentName=\"p\">{`[5]`}</inlineCode>{` and pop the head off it (`}<inlineCode parentName=\"p\">{`5`}</inlineCode>{`) and add it to the sum of the remaining list (`}<inlineCode parentName=\"p\">{`[]`}</inlineCode>{`), then we'd get our new sum. But doesn't this work for a list of `}<em parentName=\"p\">{`any`}</em>{` length? Isn't the sum of `}<inlineCode parentName=\"p\">{`[1, 2, 3]`}</inlineCode>{` just `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` plus the sum of `}<inlineCode parentName=\"p\">{`[2, 3]`}</inlineCode>{`, which is just `}<inlineCode parentName=\"p\">{`2`}</inlineCode>{` plus the sum of `}<inlineCode parentName=\"p\">{`[3]`}</inlineCode>{`, which is just `}<inlineCode parentName=\"p\">{`3`}</inlineCode>{` plus the sum of `}<inlineCode parentName=\"p\">{`[]`}</inlineCode>{`, which is just `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`?`}</p>\n    <Highlighter code='sum([1, 2, 3]) === 1 + 2 + 3 + 0 === 6' showLineNumbers={false} mdxType=\"Highlighter\" />\n    <p>{`So our `}<inlineCode parentName=\"p\">{`sum`}</inlineCode>{` function could work by taking the first number in our list (the \"head\") and adding it to `}<em parentName=\"p\">{`the sum of the remaining items in the list`}</em>{` (the \"tail\"). And it can do this by calling itself over and over again with the ever-shrinking tail until it hits an empty list in which case it returns zero and the sum is complete:`}</p>\n    <CodeBlock {...recursiveSumSource} mdxType=\"CodeBlock\" />\n    <p>{`We get into this more in the next section, but the ability of functions to call themselves means we never need to bother with loops again. And as you'll see, there are many common operations for which we might use this superpower, so naturally we've made built-in methods (and libraries of functions such as `}<a parentName=\"p\" {...{\n        \"href\": \"https://ramdajs.com/docs/\"\n      }}>{`Ramda`}</a>{`) to avoid having to write so many functions over and over again. Reusability, right? High five!`}</p>\n    <p><h3 id='say-no-to-side-effects'>{`Don't be reaching outside the function to mess with shit`}</h3></p>\n    <p>{`This is a bad and sometimes hard-to-break habit that many OO programmers have. As we said above, functions take parameters and return a result, and that should be `}<em parentName=\"p\">{`all`}</em>{` they do. Functions should not be reaching outside the function to tweak any values or variables in a higher scope, such as the global scope.`}</p>\n    <p>{`Neither should anything in the outer scope change the return from our function. If it did, then we could not guarantee that for the same arguments we'll always get the same result.`}</p>\n    <p>{`The exception to this is when we are returning a function from a function, as discussed in `}<Link to='#who-wants-curry' mdxType=\"Link\">{`Functions can be returned from other functions`}</Link>{` above. In that case, we are capturing the value of a variable in the outer function's scope and using it in the scope of the function returned.`}</p>\n    <p>{`But note that unless the outer function (our \"function factory\") is `}<em parentName=\"p\">{`itself`}</em>{` reaching outside its scope, then as soon as it returns our new function with the captured variable, it goes out of scope. So, effectively, when we capture values in this manner we are not actually reaching outside the function.`}</p>\n    <p>{`Of course, at some point we must reach outside. We need to have input and output from our program, unless we want to recreate the entire universe inside the program, which might take some time (and a hell of a lot of memory). So the big exception to this rule is input-output. In pure functional programming languages, the \"impure\" I/O functionality is isolated in its own modules to avoid impurifying the rest of the code.`}</p>\n    <p>{`In JavaScript, just make sure that if you're function is changing something outside the function, or if it is affected by the state of something outside the function (other than an argument passed in), that you `}<em parentName=\"p\">{`know what you're doing and why`}</em>{`. Avoid it unless you absolutely have to do it, and then keep any \"impure\" functions isolated from the rest. Quarantine those babies.`}</p>\n    <p>{`Here are examples of things `}<strong parentName=\"p\">{`you should never do`}</strong>{`. The squeamish among you may wish to cover your eyes lest this code haunt your nightmares. Don't say we didn't warn you.`}</p>\n    <CodeBlock {...impureNoNoNoSource} mdxType=\"CodeBlock\" />\n    <p>{`What's an example of when it's OK to use an impure function to affect something other than by the result? How about `}<inlineCode parentName=\"p\">{`console.log`}</inlineCode>{`? It returns `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` no matter what the input, and it reaches out to the console and changes it, and that's outside our function, right? But this is input/output, which we already admitted is an exception. In general, `}<em parentName=\"p\">{`no exceptions`}</em>{`.`}</p>\n    <p><h3 id='no-mutating-variables'>{`Make copies when passing by reference`}</h3></p>\n    <p>{`Often when programmers are just starting to work with functional JavaScript, they will mutate (change) a value from inside a function without realising it.`}</p>\n    <p>{`A \"feature\" of JavaScript is that primitive values, such as numbers, strings, and booleans, are `}<em parentName=\"p\">{`copied`}</em>{` when they are passed as arguments to a function:`}</p>\n    <CodeBlock {...byValueSource} mdxType=\"CodeBlock\" />\n    <p>{`Simple values are \"passed by value\", which means they are `}<em parentName=\"p\">{`copied`}</em>{` into the function scope. But more complex values, such as arrays and objects, are not copied. Instead, a reference to the original is passed.`}</p>\n    <p>{`Now, if we mutate (change) that variable in the function scope, we are actually reaching outside the scope to change the original value. This is a big no-no:`}</p>\n    <CodeBlock {...byReferenceSource} mdxType=\"CodeBlock\" />\n    <p>{`So how do we avoid this? We can use the spread operator, `}<inlineCode parentName=\"p\">{`...`}</inlineCode>{`, to make a copy of our referenced object and then update the copy. Easy peasy!`}</p>\n    <CodeBlock {...copyReferencesSource} mdxType=\"CodeBlock\" />\n    <p><h3 id='closures-are-cool'>{`Functions can remember things for you`}</h3></p>\n    <p>{`We already discussed this above in `}<Link to='#functions-as-results' mdxType=\"Link\">{`Functions can be returned from other functions`}</Link>{`, but it's worth revisiting.`}</p>\n\n    </MDXLayout>;\n}\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { graphql, useStaticQuery } from 'gatsby'\nimport React from 'react'\nimport Helmet from 'react-helmet'\n\nfunction SEO ({ lang, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={\n        title\n          ? `${title} | ${site.siteMetadata.title}`\n          : site.siteMetadata.title\n      }\n    >\n      <script src='https://embed.runkit.com' data-element-id='runkit' />\n    </Helmet>\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n}\n\nexport default SEO\n","import { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`\n    }}\n  >\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`\n      }}\n    >\n      <h1 style={{ margin: 0, display: 'inline-block', flexGrow: 1 }}>\n        <Link\n          to='/'\n          style={{\n            color: `white`,\n            textDecoration: `none`\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n      <div style={{ flexShrink: 1 }}>\n        <Link\n          to='/reusability'\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n            textTransform: 'lowercase',\n            display: 'inline-block',\n            padding: '0 0.5rem'\n          }}\n        >\n          Reusability\n        </Link>\n        <Link\n          to='/immutability'\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n            textTransform: 'lowercase',\n            display: 'inline-block',\n            padding: '0 0.5rem'\n          }}\n        >\n          Variables\n        </Link>\n        <Link\n          to='/iteration'\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n            textTransform: 'lowercase',\n            display: 'inline-block',\n            padding: '0 0.5rem'\n          }}\n        >\n          Looping\n        </Link>\n        <Link\n          to='/composition'\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n            textTransform: 'lowercase',\n            display: 'inline-block',\n            padding: '0 0.5rem'\n          }}\n        >\n          Pipelines\n        </Link>\n        <Link\n          to='/patterns-antipatterns'\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n            textTransform: 'lowercase',\n            display: 'inline-block',\n            padding: '0 0.5rem'\n          }}\n        >\n          Patterns\n        </Link>\n      </div>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string\n}\n\nHeader.defaultProps = {\n  siteTitle: ``\n}\n\nexport default Header\n","import './index.css'\n\nimport { graphql, useStaticQuery } from 'gatsby'\nimport React from 'react'\n\nimport Header from '../Header'\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0 1.0875rem 1.45rem`,\n          paddingTop: 0\n        }}\n      >\n        <main>{children}</main>\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","import { Link } from 'gatsby'\nimport React from 'react'\n\nexport default function BreadcrumbTrail ({ title }) {\n  return title ? (\n    <p>\n      <Link to='/'>Home</Link>\n      {` > `}\n      {title}\n    </p>\n  ) : null\n}\n","import React from 'react'\n\nimport BreadcrumbTrail from '../BreadcrumbTrail'\nimport Layout from '../Layout'\nimport SEO from '../SEO'\n\nfunction PageLayout ({ children, pageContext }) {\n  const { title } = pageContext.frontmatter\n\n  return (\n    <Layout>\n      <SEO title={title} />\n      <BreadcrumbTrail title={title} />\n      <article>{children}</article>\n    </Layout>\n  )\n}\n\nexport default PageLayout\n","import React from 'react'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport { solarizedLight } from 'react-syntax-highlighter/dist/esm/styles/hljs'\n\nexport default function Highlighter ({ code = '', showLineNumbers = true }) {\n  return (\n    <SyntaxHighlighter\n      language='javascript'\n      style={solarizedLight}\n      showLineNumbers={showLineNumbers}\n    >\n      {code}\n    </SyntaxHighlighter>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport Embed from 'react-runkit'\n\nimport Highlighter from '../Highlighter'\n\nexport default function CodeBlock ({ code = '', imports = '', requires = '' }) {\n  const [show, setShow] = useState(false)\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setShow(Boolean(window) && Boolean(window.RunKit))\n    }, 1000)\n\n    if (show) {\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return show ? (\n    <div style={{ marginBottom: '1rem' }}>\n      <Embed source={`${requires}${code}`} nodeVersion='12' />\n    </div>\n  ) : (\n    <Highlighter code={`${imports}${code}`} />\n  )\n}\n"],"sourceRoot":""}